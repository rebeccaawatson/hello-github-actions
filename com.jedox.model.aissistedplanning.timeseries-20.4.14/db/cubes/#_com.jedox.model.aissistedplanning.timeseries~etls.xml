<?xml version='1.0' encoding='utf-8'?><!-- CUBE "#_com.jedox.model.aissistedplanning.timeseries~etls" --><cube><e0><e0><e0><!-- name / p3 / ~ -->DeleteAIElements</e0></e0><e1><e0><!-- name / p15 / ~ -->Time Series Prediction</e0></e1></e0><e1><e0><e0><!-- definition / p3 / ~ -->&lt;?xml version="1.0" encoding="UTF-8"?>&#xd;
&lt;project name="DeleteAIElements" version="20.4" modified="1585707899600" modifiedBy="admin" olapId="p3" format="strict">&#xd;
  &lt;headers>&#xd;
    &lt;header name="comment" modified="1585707899600" modifiedBy="admin">&#xd;
      &lt;comment>&lt;![CDATA[Clear AI Config Cube]]&gt;&lt;/comment>&#xd;
    &lt;/header>&#xd;
  &lt;/headers>&#xd;
  &lt;variables>&#xd;
    &lt;variable modified="1582538245693" name="sys_database" modifiedBy="admin">&#xd;
      &lt;comment>&lt;![CDATA[UPDATE:
Name of database used.
AIssistedWizardDemoData
PlanningModels]]&gt;&lt;/comment>&#xd;
      &lt;default>BikeRental_updated&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1582538245693" name="regexVar" modifiedBy="admin">&#xd;
      &lt;comment />&#xd;
      &lt;default>VD&lt;/default>&#xd;
    &lt;/variable>&#xd;
  &lt;/variables>&#xd;
  &lt;connections>&#xd;
    &lt;connection modified="1582538245693" name="CON_jedoxGlobal" type="JedoxOlap" modifiedBy="admin">&#xd;
      &lt;global nameref="localhost" />&#xd;
      &lt;database>${sys_database}&lt;/database>&#xd;
      &lt;ssl>trust&lt;/ssl>&#xd;
    &lt;/connection>&#xd;
  &lt;/connections>&#xd;
  &lt;extracts>&#xd;
    &lt;extract modified="1582538245693" name="EXT_sysDimension" type="Dimension" modifiedBy="admin">&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;query>&#xd;
        &lt;dimension name="#_#_CUBE__">&#xd;
          &lt;condition operator="like" type="accept">&lt;![CDATA[^${regexVar}]]&gt;&lt;/condition>&#xd;
        &lt;/dimension>&#xd;
      &lt;/query>&#xd;
      &lt;attributesMode>none&lt;/attributesMode>&#xd;
    &lt;/extract>&#xd;
  &lt;/extracts>&#xd;
  &lt;transforms />&#xd;
  &lt;loads>&#xd;
    &lt;load modified="1582538245693" name="LOAD_sysDimension" type="Dimension" modifiedBy="admin">&#xd;
      &lt;source nameref="EXT_sysDimension" />&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;dimension name="#_#_CUBE__">&#xd;
        &lt;elements mode="delete" />&#xd;
        &lt;consolidations mode="inactive" />&#xd;
        &lt;attributes mode="inactive" />&#xd;
      &lt;/dimension>&#xd;
    &lt;/load>&#xd;
  &lt;/loads>&#xd;
  &lt;jobs />&#xd;
&lt;/project>&#xd;
</e0></e0><e1><e0><!-- definition / p15 / ~ -->&lt;?xml version="1.0" encoding="UTF-8"?>&#xd;
&lt;project modified="1612343763073" modifiedBy="peter" name="Time Series Prediction" olapId="p15" version="20.4" format="strict">&#xd;
  &lt;headers>&#xd;
    &lt;header modified="1599657357196" name="comment" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[Project description : This project calculates Time Series Predictions with AIssisted(tm) Planning Services.

Developed by: Peter Strohm, Jedox AG; Ibrahim Alshibani, Jedox AG]]&gt;&lt;/comment>&#xd;
    &lt;/header>&#xd;
    &lt;header modified="1599657357196" name="protection" modifiedBy="peter">&#xd;
      &lt;value>0&lt;/value>&#xd;
    &lt;/header>&#xd;
  &lt;/headers>&#xd;
  &lt;variables>&#xd;
    &lt;variable modified="1599657357196" name="db_elementVersion" modifiedBy="peter">&#xd;
      &lt;comment>UPDATE/MAKRO TARGET:&#xd;
version element for input values&lt;/comment>&#xd;
      &lt;default>elementVersion&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="sys_database" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[UPDATE:
Name of database used.]]&gt;&lt;/comment>&#xd;
      &lt;default>CUSTOM-DATABASE&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="aip_period" modifiedBy="peter">&#xd;
      &lt;comment>UPDATE:&#xd;
type of time; yearly=1, monthly=12, weekly=52, daily=364&lt;/comment>&#xd;
      &lt;default>12&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="aip_inputValues" modifiedBy="peter">&#xd;
      &lt;comment>To be filled from groovy job/ADAPT&#xd;
Is automatically filled with values from extract "EXTRACT_InputValues".&#xd;
Adapt extract "EXTRACT_InputValues" to change input for your project&lt;/comment>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="intern_bearer" modifiedBy="peter">&#xd;
      &lt;comment>INTERN:&#xd;
To be filled from groovy job&#xd;
Authentication Token for Jedox AIssisted Planning WebService&lt;/comment>&#xd;
      &lt;default>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IkN0ZlFDOExlLThOc0M3b0MyelFrWnBjcmZPYyIsImtpZCI6IkN0ZlFDOExlLThOc0M3b0MyelFrWnBjcmZPYyJ9.eyJhdWQiOiI3YmIzNTBjYi01NzU3LTRjODUtYjA5OC0wZjlmZDVjN2U0ZTQiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC83YzMyMTY4Ni1jMzAwLTQ3ZTQtYjM5ZS04ZGU5ODg5M2U4ODYvIiwiaWF0IjoxNTYwNDMyODc2LCJuYmYiOjE1NjA0MzI4NzYsImV4cCI6MTU2MDQzNjc3NiwiYWNyIjoiMSIsImFpbyI6IjQyWmdZRWhoQ3p2WDFzWWJrbjB4N0xQYVlaN0p6NStYQ2JzY2RXVzNtaUU1d1oxM3pVOEEiLCJhbXIiOlsicHdkIl0sImFwcGlkIjoiODliMjg2MzAtMDg4Zi00NmE5LTg1ZWItMTRhOTE5YzJmOTRhIiwiYXBwaWRhY3IiOiIwIiwiaXBhZGRyIjoiMjEzLjE2NC43Ni4zOCIsIm5hbWUiOiJQcmVzYWxlcyBEZW1vIiwib2lkIjoiY2MyOTg2NWQtMmE2OC00NWMwLWJiODktMTE3MDg2MGJlZjQ4Iiwic2NwIjoidXNlcl9pbXBlcnNvbmF0aW9uIiwic3ViIjoiU3otUk16a0dPVXIxSWVES2NNakNmUDRrWUFzWlJySlJ2cXV2c2hTRGJpYyIsInRpZCI6IjdjMzIxNjg2LWMzMDAtNDdlNC1iMzllLThkZTk4ODkzZTg4NiIsInVuaXF1ZV9uYW1lIjoicHJlc2FsZXNfZGVtb0BhaXNzaXN0ZWRwbGFubmluZy5jbG91ZC5qZWRveC5jb20iLCJ1cG4iOiJwcmVzYWxlc19kZW1vQGFpc3Npc3RlZHBsYW5uaW5nLmNsb3VkLmplZG94LmNvbSIsInV0aSI6Imtyb0FYN3p2SFVDLUltQTBLTzg5QUEiLCJ2ZXIiOiIxLjAifQ.PYbZshZjNpplhciB9uLz3ChRgG-ncc8mjTkj183eEWJuZQh3FfPN01l_qwhretB4NTZ4F7KeiLkKBQ6YD1MZUHbQni-ieBGwr7gf3b-z7GhNYLGTDOTPA8ViOhF8j4ujMJn2Gey7HyXpOqRRfITWYjHNTY7ygsXfVMs0wzPG5JUJJnvLM3z_f9zyfOGH7epHL1TXFK3frueGRMvnMG-2Z4akAanEK2wbxBLTUMRdBda5iM4ByTBbelbS7bRh-9-e9LvNToIEMP6msPoL3wLVtonjErNxkAETRkavIs0rcifFjciNEhZEKrhpBNqguDN6u0PtYF3_tvG3Gb_hmMtS6w&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="sys_sourceCube" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[UPDATE:
Cube to use in database.]]&gt;&lt;/comment>&#xd;
      &lt;default>SOURCE-CUBE&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="aip_predictionType" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[ADAPT:
Type for prediction:
Algorithm selection number (Linear Model = 1, Holt Winter = 2, Seasonal Naïve = 3, Exponential Smoothing = 4, ARIMA = 5, Random Walk with Drift = 6, Seasonal and Trend decomposition using Loess(STL) model = 7, generalized STL model = 8, neural network time series forecast = 9, TBATs model = 10, Croston’s method = 11, Extrapolation = 12. Best = 0, Best of Classic (1,2,3,4,5,6,12) = 100, Best of Innovative (7,8,9,10,11,12) = 101)]]&gt;&lt;/comment>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="time_yearRegExpAccept" modifiedBy="peter">&#xd;
      &lt;comment>ADAPT:&#xd;
To be filled from user (depending on time dimension).&#xd;
(-0.$|-1.$)&lt;/comment>&#xd;
      &lt;default>(0.|1.)&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="time_yearRegExpDeny" modifiedBy="peter">&#xd;
      &lt;comment>ADAPT:&#xd;
Prefilled. Add more elements that should be ignored (depending on time dimension)&#xd;
-00&lt;/comment>&#xd;
      &lt;default>00&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="aip_numValues" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[UPDATE:
number of values to be forecasted (e.g. 12 if you want the next 12 month to be predicted) 
-> set via integrator into internal variable intern_numValues]]&gt;&lt;/comment>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="aip_numPeriods" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[UPDATE:
number of previous periods for your prediction (e.g. target year is 2018, input would be 2015,2016,2017 -> number of periods would be 3)
Definition: number of periods (e.g. number of years which are input for prediction)]]&gt;&lt;/comment>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" modifiedBy="peter" name="aip_outputType">&#xd;
      &lt;comment>ADAPT:&#xd;
Type of output:&#xd;
Forecast values and accuracy = 0, Only accuracy = 1, Forecast values with accuracy, lower bounds and upper bounds = 2&lt;/comment>&#xd;
      &lt;default>2&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="aip_numSeries" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[UPDATE:
number of different measures you want to predict.
Definition: type of input; Single input for forecasting = 0/1, Multiple inputs for forecasting > 1]]&gt;&lt;/comment>&#xd;
      &lt;default>2&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="db_elementMeasure" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[UPDATE/MAKRO TARGET:
Measures which should be predicted.
Enter like this: M1|M2|M3|M4
-> variable "aip_numInputs" has to be the number of measures you put in here]]&gt;&lt;/comment>&#xd;
      &lt;default>elemMeasure&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599814205292" name="time_inputStartDate" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[UPDATE:
Starting date for input data]]&gt;&lt;/comment>&#xd;
      &lt;default>2016-06&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="sys_connection" modifiedBy="peter">&#xd;
      &lt;comment>UPDATE:&#xd;
Connection to Jedox database&lt;/comment>&#xd;
      &lt;default setting="System.connection">localhost&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="db_elementTargetVersion" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[UPDATE/MAKRO TARGET:
Defines the version element for prediction]]&gt;&lt;/comment>&#xd;
      &lt;default>elemTargetVersion&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1600675708796" name="aip_accThreshold" modifiedBy="admin">&#xd;
      &lt;comment>&lt;![CDATA[ADAPT:
threshold for accuracy. Results with accuracy below this threshold will return "null" and warning.]]&gt;&lt;/comment>&#xd;
      &lt;default>0&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="sys_AIssistedUser" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[ADAPT:
Enter your user name for the Jedox AIssisted(R) Planning Service here or in the global settings section.]]&gt;&lt;/comment>&#xd;
      &lt;script>&lt;![CDATA[String a = API.getProjectName();
String[] str;
str = a.split('~');
proj = str[0].substring(0,str[0].length()-11);
val = API.getConfigSetting("System.aissisted_user", proj);
return val;]]&gt;&lt;/script>&#xd;
      &lt;default>USER&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="sys_AIssistedPass" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[ADAPT:
Enter your password for the Jedox AIssisted(R) Planning Service here or in the global settings section.]]&gt;&lt;/comment>&#xd;
      &lt;script>&lt;![CDATA[String a = API.getProjectName();
String[] str;
str = a.split('~');
proj = str[0].substring(0,str[0].length()-11);
val = API.getConfigSetting("System.aissisted_pass", proj);
return val;]]&gt;&lt;/script>&#xd;
      &lt;default>YOUR-PASSWORD-HERE&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="db_dimensionMeasure" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[UPDATE:
dimension variables define dimensions for extracts e.g. "EXTRACT_input_values"
Use this for dimension with measures.]]&gt;&lt;/comment>&#xd;
      &lt;default>DimMeasure&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="db_dimensionTime" modifiedBy="peter">&#xd;
      &lt;comment>UPDATE:&#xd;
dimension variables define dimensions for extracts e.g. "EXTRACT_input_values"&#xd;
Use this dimension for time&lt;/comment>&#xd;
      &lt;default>timeDim&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="db_dimensionVersion" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[UPDATE:
dimension variables define dimensions for extracts e.g. "EXTRACT_input_values"
Use this dimension for version]]&gt;&lt;/comment>&#xd;
      &lt;default>DimVersion&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="sys_accuracyFlag" modifiedBy="peter">&#xd;
      &lt;comment>UPDATE:&#xd;
Cube to store accuracy in database.&#xd;
NOTE: Leave empty if you do not want to store Accuracy.&lt;/comment>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="db_useRules" modifiedBy="peter">&#xd;
      &lt;comment>UPDATE: (not used yet)&#xd;
Use rules when copying cell values (TRUE or FALSE)&lt;/comment>&#xd;
      &lt;default>false&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599814161622" name="time_elementEnd" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[ADAPT (optional if aip_numValues is set):
Put last element of prediction period here (e.g. 2019-10 if you want the last predicted element to be 2019-10).
If you do not put sth. here, elementEnd will be calculated from: time_elementStart + aip_numValues
RELATED: time_elementStart; aip_numValues
WAS empty]]&gt;&lt;/comment>&#xd;
      &lt;default>2020-05&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599814149102" name="time_elementStart" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[UPDATE/MAKRO TARGET:
Put first element of prediction period here (e.g. 2018-11 if you want to start with prediction at November 2018-11 using all previous data froo 2018-10 backwards)
RELATED: time_elementEnd; aip_numValues]]&gt;&lt;/comment>&#xd;
      &lt;default>2019-06&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="time_dateSeparator" modifiedBy="peter">&#xd;
      &lt;comment>UPDATE:&#xd;
e.g. 2019-02 -&amp;gt; date separator would be -&#xd;
if no separator exists, keep empty&lt;/comment>&#xd;
      &lt;default>-&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="intern_dateFormat" modifiedBy="peter">&#xd;
      &lt;comment>INTERN:&#xd;
Date format of Integrator project for sorting, date calculation etc.&lt;/comment>&#xd;
      &lt;default>yyyyMM&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="time_dateFormatSourceMonthly" modifiedBy="peter">&#xd;
      &lt;comment>UPDATE:&#xd;
time format of custom time dimension until MONTH&#xd;
&#xd;
NOTE: if you want to use daily data, please set variable time_dateDailySeparator&lt;/comment>&#xd;
      &lt;default>yyyy-MM&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="time_leadingZero" modifiedBy="peter">&#xd;
      &lt;comment>UPDATE:&#xd;
If there is no leading zero keep variable EMPTY.&lt;/comment>&#xd;
      &lt;default>0&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="sys_targetCube" modifiedBy="peter">&#xd;
      &lt;comment>UPDATE:&#xd;
Cube to use in database. In most cases this will be the same as source cube.&lt;/comment>&#xd;
      &lt;default>targetCube&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599787201785" name="time_dateDailySeparator" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[UPDATE (if you want to use daily data):
e.g. 2019-02-17 -> date separator daily would be (..) (for 2 day digits)
if you do not want to use daily data, leave it $]]&gt;&lt;/comment>&#xd;
      &lt;default>$&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="time_dateFormatSourceDaily" modifiedBy="peter">&#xd;
      &lt;comment>UPDATE:&#xd;
time format of custom time dimension until MONTH&#xd;
&#xd;
NOTE: if you want to use daily data, please set variable time_dateDailySeparator&lt;/comment>&#xd;
      &lt;default>yyyy-MM-dd&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="intern_extractSourceAccept_1" modifiedBy="peter">&#xd;
      &lt;comment />&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="intern_extractSourceAccept_2" modifiedBy="peter">&#xd;
      &lt;comment />&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="intern_extractTargetAccept_2" modifiedBy="peter">&#xd;
      &lt;comment />&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="intern_extractTargetAccept_1" modifiedBy="peter">&#xd;
      &lt;comment />&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="intern_extractCopyAccept_1" modifiedBy="peter">&#xd;
      &lt;comment />&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="intern_extractCopyAccept_2" modifiedBy="peter">&#xd;
      &lt;comment />&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="intern_accuracyDim" modifiedBy="peter">&#xd;
      &lt;comment>INTERN:&#xd;
Name of Accuracy dimension&lt;/comment>&#xd;
      &lt;default>Accuracy&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="intern_lastTokenRefresh" modified="1599657357196" modifiedBy="peter" />&#xd;
    &lt;variable modified="1599657357196" name="intern_tokenRefreshDuration" modifiedBy="peter">&#xd;
      &lt;comment>INTERN&#xd;
Token refresh after x minutes, x seconds to avoid that token expires or that too many token calls per minutes are sent&lt;/comment>&#xd;
      &lt;default>10&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="intern_inputSum" modifiedBy="peter">&#xd;
      &lt;comment>INTERN&#xd;
Sum of input values for zero checking&lt;/comment>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="sys_AIssistedURL" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[ADAPT
IP to AI Engine
E.g. could be Virtual Private Network (10.xx.xx.xx) or global (predictive-aissistedplanning.cloud.jedox.com)]]&gt;&lt;/comment>&#xd;
      &lt;script>&lt;![CDATA[String a = API.getProjectName();
String[] str;
str = a.split('~');
proj = str[0].substring(0,str[0].length()-11);
val = API.getConfigSetting("System.aissisted_url", proj);
return val;]]&gt;&lt;/script>&#xd;
      &lt;default>predictive-aissistedplanning.cloud.jedox.com&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="sys_AIssistedAPIKEY" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[ADAPT:
Enter your API key for the Jedox AIssisted(R) Planning Service here or in the global settings section.]]&gt;&lt;/comment>&#xd;
      &lt;script>&lt;![CDATA[String a = API.getProjectName();
String[] str;
str = a.split('~');
proj = str[0].substring(0,str[0].length()-11);
val = API.getConfigSetting("System.aissisted_apikey", proj);
return val;]]&gt;&lt;/script>&#xd;
      &lt;default>API-KEY&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599814341703" name="ext_numValues" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[SET FROM EXTERNAL
number of values to be forecasted (e.g. 12 if you want the next 12 month to be predicted)]]&gt;&lt;/comment>&#xd;
      &lt;default>12&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="intern_maxSeries" modifiedBy="peter">&#xd;
      &lt;comment />&#xd;
      &lt;default>10&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="intern_chunkStart" modified="1599657357196" modifiedBy="peter" />&#xd;
    &lt;variable modified="1599657357196" name="intern_chunkStop" modifiedBy="peter">&#xd;
      &lt;comment />&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="intern_rowStart" modifiedBy="peter">&#xd;
      &lt;comment />&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="intern_rowStop" modifiedBy="peter">&#xd;
      &lt;comment />&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599787201785" name="time_currentFormat" modifiedBy="peter">&#xd;
      &lt;comment />&#xd;
      &lt;default>yyyy-MM&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="db_dimension1" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[ADAPT:
dimension variables define dimensions for extracts]]&gt;&lt;/comment>&#xd;
      &lt;default>Dim1&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="db_elementDim1" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[MAKRO TARGET:
To be filled from report call to integrator job.
Element variables define filter criteria for extract]]&gt;&lt;/comment>&#xd;
      &lt;default>elem1&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="db_elementMode1" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;comment>MAKRO TARGET:&#xd;
To be filled from report call to integrator job.&#xd;
Element variables define filter criteria for extract&lt;/comment>&#xd;
      &lt;default>onlyNodes&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="db_dimension2" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[ADAPT:
dimension variables define dimensions for extracts]]&gt;&lt;/comment>&#xd;
      &lt;default>Dim2&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="db_elementDim2" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[MAKRO TARGET:
To be filled from report call to integrator job.
Element variables define filter criteria for extract]]&gt;&lt;/comment>&#xd;
      &lt;default>elem2&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="db_elementMode2" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;comment>MAKRO TARGET:&#xd;
To be filled from report call to integrator job.&#xd;
Element variables define filter criteria for extract&lt;/comment>&#xd;
      &lt;default>onlyNodes&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="db_dimension3" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[ADAPT:
dimension variables define dimensions for extracts]]&gt;&lt;/comment>&#xd;
      &lt;default>Dim3&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="db_elementDim3" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[MAKRO TARGET:
To be filled from report call to integrator job.
Element variables define filter criteria for extract]]&gt;&lt;/comment>&#xd;
      &lt;default>elem3&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="db_elementMode3" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;comment>MAKRO TARGET:&#xd;
To be filled from report call to integrator job.&#xd;
Element variables define filter criteria for extract&lt;/comment>&#xd;
      &lt;default>onlyNodes&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="db_dimension4" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[ADAPT:
dimension variables define dimensions for extracts]]&gt;&lt;/comment>&#xd;
      &lt;default>Dim4&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="db_elementDim4" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[MAKRO TARGET:
To be filled from report call to integrator job.
Element variables define filter criteria for extract]]&gt;&lt;/comment>&#xd;
      &lt;default>elem4&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="db_elementMode4" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;comment>MAKRO TARGET:&#xd;
To be filled from report call to integrator job.&#xd;
Element variables define filter criteria for extract&lt;/comment>&#xd;
      &lt;default>onlyNodes&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="db_dimension5" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[ADAPT:
dimension variables define dimensions for extracts]]&gt;&lt;/comment>&#xd;
      &lt;default>Dim5&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="db_elementDim5" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[MAKRO TARGET:
To be filled from report call to integrator job.
Element variables define filter criteria for extract]]&gt;&lt;/comment>&#xd;
      &lt;default>elem5&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="db_elementMode5" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;comment>MAKRO TARGET:&#xd;
To be filled from report call to integrator job.&#xd;
Element variables define filter criteria for extract&lt;/comment>&#xd;
      &lt;default>onlyNodes&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="db_dimension6" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[ADAPT:
dimension variables define dimensions for extracts]]&gt;&lt;/comment>&#xd;
      &lt;default>Dim6&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="db_elementDim6" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[MAKRO TARGET:
To be filled from report call to integrator job.
Element variables define filter criteria for extract]]&gt;&lt;/comment>&#xd;
      &lt;default>elem6&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="db_elementMode6" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;comment>MAKRO TARGET:&#xd;
To be filled from report call to integrator job.&#xd;
Element variables define filter criteria for extract&lt;/comment>&#xd;
      &lt;default>onlyNodes&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="db_dimension7" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[ADAPT:
dimension variables define dimensions for extracts]]&gt;&lt;/comment>&#xd;
      &lt;default>Dim7&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="db_elementDim7" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[MAKRO TARGET:
To be filled from report call to integrator job.
Element variables define filter criteria for extract]]&gt;&lt;/comment>&#xd;
      &lt;default>elem7&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="db_elementMode7" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;comment>MAKRO TARGET:&#xd;
To be filled from report call to integrator job.&#xd;
Element variables define filter criteria for extract&lt;/comment>&#xd;
      &lt;default>onlyNodes&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="db_dimension8" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[ADAPT:
dimension variables define dimensions for extracts]]&gt;&lt;/comment>&#xd;
      &lt;default>Dim8&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="db_elementDim8" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[MAKRO TARGET:
To be filled from report call to integrator job.
Element variables define filter criteria for extract]]&gt;&lt;/comment>&#xd;
      &lt;default>elem8&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="db_elementMode8" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;comment>MAKRO TARGET:&#xd;
To be filled from report call to integrator job.&#xd;
Element variables define filter criteria for extract&lt;/comment>&#xd;
      &lt;default>onlyNodes&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="db_dimension9" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[ADAPT:
dimension variables define dimensions for extracts]]&gt;&lt;/comment>&#xd;
      &lt;default>Dim9&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="db_elementDim9" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[MAKRO TARGET:
To be filled from report call to integrator job.
Element variables define filter criteria for extract]]&gt;&lt;/comment>&#xd;
      &lt;default>elem9&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="db_elementMode9" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;comment>MAKRO TARGET:&#xd;
To be filled from report call to integrator job.&#xd;
Element variables define filter criteria for extract&lt;/comment>&#xd;
      &lt;default>onlyNodes&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="db_dimension10" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[ADAPT:
dimension variables define dimensions for extracts]]&gt;&lt;/comment>&#xd;
      &lt;default>Dim10&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="db_elementDim10" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[MAKRO TARGET:
To be filled from report call to integrator job.
Element variables define filter criteria for extract]]&gt;&lt;/comment>&#xd;
      &lt;default>elem10&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="db_elementMode10" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;comment>MAKRO TARGET:&#xd;
To be filled from report call to integrator job.&#xd;
Element variables define filter criteria for extract&lt;/comment>&#xd;
      &lt;default>onlyNodes&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="db_dimension11" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[ADAPT:
dimension variables define dimensions for extracts]]&gt;&lt;/comment>&#xd;
      &lt;default>Dim11&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="db_elementDim11" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[MAKRO TARGET:
To be filled from report call to integrator job.
Element variables define filter criteria for extract]]&gt;&lt;/comment>&#xd;
      &lt;default>elem11&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="db_elementMode11" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;comment>MAKRO TARGET:&#xd;
To be filled from report call to integrator job.&#xd;
Element variables define filter criteria for extract&lt;/comment>&#xd;
      &lt;default>onlyNodes&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="db_dimension12" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[ADAPT:
dimension variables define dimensions for extracts]]&gt;&lt;/comment>&#xd;
      &lt;default>Dim12&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="db_elementDim12" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[MAKRO TARGET:
To be filled from report call to integrator job.
Element variables define filter criteria for extract]]&gt;&lt;/comment>&#xd;
      &lt;default&gt;elem12&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="db_elementMode12" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;comment>MAKRO TARGET:&#xd;
To be filled from report call to integrator job.&#xd;
Element variables define filter criteria for extract&lt;/comment>&#xd;
      &lt;default>onlyNodes&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="db_dimension13" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[ADAPT:
dimension variables define dimensions for extracts]]&gt;&lt;/comment>&#xd;
      &lt;default>Dim13&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="db_elementDim13" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[MAKRO TARGET:
To be filled from report call to integrator job.
Element variables define filter criteria for extract]]&gt;&lt;/comment>&#xd;
      &lt;default>elem13&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="db_elementMode13" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;comment>MAKRO TARGET:&#xd;
To be filled from report call to integrator job.&#xd;
Element variables define filter criteria for extract&lt;/comment>&#xd;
      &lt;default>onlyNodes&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="db_dimension14" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[ADAPT:
dimension variables define dimensions for extracts]]&gt;&lt;/comment>&#xd;
      &lt;default>Dim14&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="db_elementDim14" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[MAKRO TARGET:
To be filled from report call to integrator job.
Element variables define filter criteria for extract]]&gt;&lt;/comment>&#xd;
      &lt;default>elem14&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="db_elementMode14" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;comment>MAKRO TARGET:&#xd;
To be filled from report call to integrator job.&#xd;
Element variables define filter criteria for extract&lt;/comment>&#xd;
      &lt;default>onlyNodes&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="db_dimension15" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[ADAPT:
dimension variables define dimensions for extracts]]&gt;&lt;/comment>&#xd;
      &lt;default>Dim15&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="db_elementDim15" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[MAKRO TARGET:
To be filled from report call to integrator job.
Element variables define filter criteria for extract]]&gt;&lt;/comment>&#xd;
      &lt;default>elem15&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="db_elementMode15" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;comment>MAKRO TARGET:&#xd;
To be filled from report call to integrator job.&#xd;
Element variables define filter criteria for extract&lt;/comment>&#xd;
      &lt;default>onlyNodes&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="db_dimension16" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[ADAPT:
dimension variables define dimensions for extracts]]&gt;&lt;/comment>&#xd;
      &lt;default>Dim16&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="db_elementDim16" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[MAKRO TARGET:
To be filled from report call to integrator job.
Element variables define filter criteria for extract]]&gt;&lt;/comment>&#xd;
      &lt;default>elem16&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="db_elementMode16" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;comment>MAKRO TARGET:&#xd;
To be filled from report call to integrator job.&#xd;
Element variables define filter criteria for extract&lt;/comment>&#xd;
      &lt;default>onlyNodes&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="db_dimension17" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[ADAPT:
dimension variables define dimensions for extracts]]&gt;&lt;/comment>&#xd;
      &lt;default>Dim17&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="db_elementDim17" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[MAKRO TARGET:
To be filled from report call to integrator job.
Element variables define filter criteria for extract]]&gt;&lt;/comment>&#xd;
      &lt;default>elem17&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="db_elementMode17" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;comment>MAKRO TARGET:&#xd;
To be filled from report call to integrator job.&#xd;
Element variables define filter criteria for extract&lt;/comment>&#xd;
      &lt;default>onlyNodes&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="db_dimension18" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;comment>ADAPT:&#xd;
dimension variables define dimensions for extracts&lt;/comment>&#xd;
      &lt;default>Dim18&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="db_elementDim18" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;comment>MAKRO TARGET:&#xd;
To be filled from report call to integrator job.&#xd;
Element variables define filter criteria for extract&lt;/comment>&#xd;
      &lt;default>Element18&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="db_elementMode18" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;comment>MAKRO TARGET:&#xd;
To be filled from report call to integrator job.&#xd;
Element variables define filter criteria for extract&lt;/comment>&#xd;
      &lt;default>onlyNodes&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="db_dimension19" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;comment>ADAPT:&#xd;
dimension variables define dimensions for extracts&lt;/comment>&#xd;
      &lt;default>Dim19&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="db_elementDim19" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;comment>MAKRO TARGET:&#xd;
To be filled from report call to integrator job.&#xd;
Element variables define filter criteria for extract&lt;/comment>&#xd;
      &lt;default>Element19&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="db_elementMode19" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;comment>MAKRO TARGET:&#xd;
To be filled from report call to integrator job.&#xd;
Element variables define filter criteria for extract&lt;/comment>&#xd;
      &lt;default>onlyNodes&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="db_dimension20" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;comment>ADAPT:&#xd;
dimension variables define dimensions for extracts&lt;/comment>&#xd;
      &lt;default>Dim20&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="db_elementDim20" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;comment>MAKRO TARGET:&#xd;
To be filled from report call to integrator job.&#xd;
Element variables define filter criteria for extract&lt;/comment>&#xd;
      &lt;default>Element20&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="db_elementMode20" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;comment>MAKRO TARGET:&#xd;
To be filled from report call to integrator job.&#xd;
Element variables define filter criteria for extract&lt;/comment>&#xd;
      &lt;default>onlyNodes&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="db_dimension21" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;comment>ADAPT:&#xd;
dimension variables define dimensions for extracts&lt;/comment>&#xd;
      &lt;default>Dim21&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="db_elementDim21" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;comment>MAKRO TARGET:&#xd;
To be filled from report call to integrator job.&#xd;
Element variables define filter criteria for extract&lt;/comment>&#xd;
      &lt;default>Element21&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="db_elementMode21" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;comment>MAKRO TARGET:&#xd;
To be filled from report call to integrator job.&#xd;
Element variables define filter criteria for extract&lt;/comment>&#xd;
      &lt;default>onlyNodes&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="db_dimension22" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;comment>ADAPT:&#xd;
dimension variables define dimensions for extracts&lt;/comment>&#xd;
      &lt;default>Dim22&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="db_elementDim22" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;comment>MAKRO TARGET:&#xd;
To be filled from report call to integrator job.&#xd;
Element variables define filter criteria for extract&lt;/comment>&#xd;
      &lt;default>Element22&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="db_elementMode22" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;comment>MAKRO TARGET:&#xd;
To be filled from report call to integrator job.&#xd;
Element variables define filter criteria for extract&lt;/comment>&#xd;
      &lt;default>onlyNodes&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="db_dimension23" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;comment>ADAPT:&#xd;
dimension variables define dimensions for extracts&lt;/comment>&#xd;
      &lt;default>Dim23&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="db_elementDim23" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;comment>MAKRO TARGET:&#xd;
To be filled from report call to integrator job.&#xd;
Element variables define filter criteria for extract&lt;/comment>&#xd;
      &lt;default>Element23&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="db_elementMode23" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;comment>MAKRO TARGET:&#xd;
To be filled from report call to integrator job.&#xd;
Element variables define filter criteria for extract&lt;/comment>&#xd;
      &lt;default>onlyNodes&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="db_dimension24" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;comment>ADAPT:&#xd;
dimension variables define dimensions for extracts&lt;/comment>&#xd;
      &lt;default>Dim24&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="db_elementDim24" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;comment>MAKRO TARGET:&#xd;
To be filled from report call to integrator job.&#xd;
Element variables define filter criteria for extract&lt;/comment>&#xd;
      &lt;default>Element24&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="db_elementMode24" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;comment>MAKRO TARGET:&#xd;
To be filled from report call to integrator job.&#xd;
Element variables define filter criteria for extract&lt;/comment>&#xd;
      &lt;default>onlyNodes&lt;/default>&#xd;
    &lt;/variable&gt;&#xd;
    &lt;variable name="db_dimension25" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;comment>ADAPT:&#xd;
dimension variables define dimensions for extracts&lt;/comment>&#xd;
      &lt;default>Dim25&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="db_elementDim25" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;comment>MAKRO TARGET:&#xd;
To be filled from report call to integrator job.&#xd;
Element variables define filter criteria for extract&lt;/comment>&#xd;
      &lt;default>Element25&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="db_elementMode25" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;comment>MAKRO TARGET:&#xd;
To be filled from report call to integrator job.&#xd;
Element variables define filter criteria for extract&lt;/comment>&#xd;
      &lt;default>onlyNodes&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="db_dimension26" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;comment>ADAPT:&#xd;
dimension variables define dimensions for extracts&lt;/comment>&#xd;
      &lt;default>Dim26&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="db_elementDim26" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;comment>MAKRO TARGET:&#xd;
To be filled from report call to integrator job.&#xd;
Element variables define filter criteria for extract&lt;/comment>&#xd;
      &lt;default>Element26&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="db_elementMode26" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;comment>MAKRO TARGET:&#xd;
To be filled from report call to integrator job.&#xd;
Element variables define filter criteria for extract&lt;/comment>&#xd;
      &lt;default>onlyNodes&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="db_dimension27" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;comment>ADAPT:&#xd;
dimension variables define dimensions for extracts&lt;/comment>&#xd;
      &lt;default>Dim27&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="db_elementDim27" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;comment>MAKRO TARGET:&#xd;
To be filled from report call to integrator job.&#xd;
Element variables define filter criteria for extract&lt;/comment>&#xd;
      &lt;default>Element27&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="db_elementMode27" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;comment>MAKRO TARGET:&#xd;
To be filled from report call to integrator job.&#xd;
Element variables define filter criteria for extract&lt;/comment>&#xd;
      &lt;default>onlyNodes&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="sys_aiConfigCube" modifiedBy="peter">&#xd;
      &lt;comment />&#xd;
      &lt;default>AIConfigCube&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="sys_configParameters" modifiedBy="peter">&#xd;
      &lt;comment />&#xd;
      &lt;default>AIParameters&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="sys_configSettings" modifiedBy="peter">&#xd;
      &lt;comment />&#xd;
      &lt;default>AISettings&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="sys_configSettingsValue" modifiedBy="peter">&#xd;
      &lt;comment />&#xd;
      &lt;default>~&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="sys_configCubes" modifiedBy="peter">&#xd;
      &lt;comment />&#xd;
      &lt;default>AICubes&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="sys_prefix" modifiedBy="peter">&#xd;
      &lt;comment />&#xd;
      &lt;default>TS&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="sys_AIssistedPort" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[Port of AIssisted Planning engine]]&gt;&lt;/comment>&#xd;
      &lt;script>&lt;![CDATA[String a = API.getProjectName();
String[] str;
str = a.split('~');
proj = str[0].substring(0,str[0].length()-11);
val = API.getConfigSetting("System.aissisted_port", proj);
return val;]]&gt;&lt;/script>&#xd;
      &lt;default>12800&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="intern_rowCount" modified="1599657357196" modifiedBy="peter" />&#xd;
    &lt;variable modified="1599657357196" name="intern_inputRange" modifiedBy="peter">&#xd;
      &lt;comment />&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="intern_rowStopInput" modified="1599657357196" modifiedBy="peter" />&#xd;
    &lt;variable name="intern_rowStartInput" modified="1599657357196" modifiedBy="peter" />&#xd;
    &lt;variable modified="1599657357196" name="intern_TSinterpolate" modifiedBy="peter">&#xd;
      &lt;comment />&#xd;
      &lt;default>True&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="aip_zeroRatio" modifiedBy="peter">&#xd;
      &lt;comment />&#xd;
      &lt;default>0.5&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="aip_numTestSetValues" modifiedBy="peter">&#xd;
      &lt;comment />&#xd;
      &lt;default>0&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="intern_seriesStart" modified="1599657357196" modifiedBy="peter" />&#xd;
    &lt;variable name="intern_seriesStop" modified="1599657357196" modifiedBy="peter" />&#xd;
    &lt;variable name="intern_usedDateFormat" modified="1599657357196" modifiedBy="peter" />&#xd;
    &lt;variable modified="1599657357196" name="intern_outputRange" modifiedBy="peter">&#xd;
      &lt;comment />&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599814307452" name="ext_period" modifiedBy="peter">&#xd;
      &lt;comment />&#xd;
      &lt;default>12&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="intern_copyByWeekday" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[0 - default behaviour (months are copied by month, days are copied by month)
1 - days are copied by weekday]]&gt;&lt;/comment>&#xd;
      &lt;default>0&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="intern_copyDaysFormat" modifiedBy="peter">&#xd;
      &lt;comment />&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="intern_dateCopyFormat" modified="1599657357196" modifiedBy="peter" />&#xd;
    &lt;variable modified="1599657357196" name="intern_copyDaysMonthlySort" modifiedBy="peter">&#xd;
      &lt;comment />&#xd;
      &lt;default>yyyyMM&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="aip_algInterpolation" modifiedBy="peter">&#xd;
      &lt;comment>Group 0 = 0 to 5, &#xd;
Group 1 = 0,1, &#xd;
Group 2 = 0,1,2&lt;/comment>&#xd;
      &lt;default>0&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="aip_algGroup" modifiedBy="peter">&#xd;
      &lt;comment>Simple 0 &#xd;
Seasonal 1 &#xd;
Advanced 2&lt;/comment>&#xd;
      &lt;default>0&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="aip_outlierType" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[IO Innovational outlier detection 
AO Additive outlier detection
LS To detect level shifts in the time series 
TC To detect temporary changes 
SLS To consider seasonal level shifts while detecting outliers. 
TSO Basic time series outlier detection 
CD Cooks’s distance for outlier detection using linear modelling 
EV Extreme value detection]]&gt;&lt;/comment>&#xd;
      &lt;default>SLS&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="aip_algSubType" modifiedBy="peter">&#xd;
      &lt;comment>Group 0 Alg 4/5 SubType = 0,1,2 &#xd;
Group 1 Alg 0/1 SubType = 0,1,2 &#xd;
Group 2 Alg 0 SubType = 0,1&lt;/comment>&#xd;
      &lt;default>0&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="aip_interpolation" modifiedBy="peter">&#xd;
      &lt;comment>0 = default replacement using linear approximation, &#xd;
1 = user defined interpolation for replacement, &#xd;
2 = no replacement&lt;/comment>&#xd;
      &lt;default>0&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="aip_outputTypeOutlier" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[ADAPT:
Type of output:
0: position of outlying values and suggested replacements values, 
1: position of outlying values and input with outliers replaced
2: position of outlying values and suggested replacements values.
3: position of outlying values and suggested replacements values, zero is not an outlier]]&gt;&lt;/comment>&#xd;
      &lt;default>3&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="aip_failSafe" modifiedBy="peter">&#xd;
      &lt;comment />&#xd;
      &lt;default>0&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="sys_useOutlierFlag" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[UPDATE:
0 = no outlier detection (default)
1 = execute outlier detection]]&gt;&lt;/comment>&#xd;
      &lt;default>1&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599657357196" name="intern_orderFactor" modifiedBy="peter">&#xd;
      &lt;comment />&#xd;
      &lt;default>1&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599814184352" name="time_inputEndDate" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[UPDATE:
First year in database (or first year that should be used for prediction)]]&gt;&lt;/comment>&#xd;
      &lt;default>2019-05&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable name="intern_extractTargetAccept_3" modified="1599657357196" modifiedBy="peter" />&#xd;
    &lt;variable name="intern_extractCopyAccept_3" modified="1599657357196" modifiedBy="peter" />&#xd;
    &lt;variable name="intern_extractSourceAccept_3" modified="1599657357196" modifiedBy="peter" />&#xd;
    &lt;variable modified="1599783288518" name="intern_extractTargetDeny_1" modifiedBy="peter">&#xd;
      &lt;comment />&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599783569780" name="intern_extractSourceDeny_1" modifiedBy="peter">&#xd;
      &lt;comment />&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599783649839" name="intern_extractSourceDeny_3" modifiedBy="peter">&#xd;
      &lt;comment />&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1599783816650" name="intern_extractCopyDeny_1" modifiedBy="peter">&#xd;
      &lt;comment />&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1603722801174" name="time_usePreviousMonth" modifiedBy="peter">&#xd;
      &lt;comment />&#xd;
      &lt;default>0&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1603725744510" name="intern_extractTargetDeny_3" modifiedBy="peter">&#xd;
      &lt;comment />&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1603725944047" name="intern_extractCopyDeny_3" modifiedBy="peter">&#xd;
      &lt;comment />&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1606300317005" name="service_api" modifiedBy="peter">&#xd;
      &lt;comment />&#xd;
      &lt;default>ai-r/api&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1606300317005" name="service_protocol" modifiedBy="peter">&#xd;
      &lt;comment />&#xd;
      &lt;default>https&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1606300317005" name="service_combinedURL" modifiedBy="peter">&#xd;
      &lt;comment />&#xd;
      &lt;default>jedox&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1606310505896" name="service_version" modifiedBy="peter">&#xd;
      &lt;comment />&#xd;
      &lt;default>v1.3.0&lt;/default&gt;&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1606310479684" name="service_function" modifiedBy="peter">&#xd;
      &lt;comment />&#xd;
      &lt;default>predictiveForecast&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1606300317005" name="service_pod" modifiedBy="peter">&#xd;
      &lt;comment />&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1606300493438" name="service_function_outlier" modifiedBy="peter">&#xd;
      &lt;comment />&#xd;
      &lt;default>outlierJedox&lt;/default>&#xd;
    &lt;/variable>&#xd;
    &lt;variable modified="1606300516656" name="service_version_outlier" modifiedBy="peter">&#xd;
      &lt;comment />&#xd;
      &lt;default>v1.3.1&lt;/default>&#xd;
    &lt;/variable>&#xd;
  &lt;/variables>&#xd;
  &lt;connections>&#xd;
    &lt;connection modified="1599657357196" name="CON_jedoxGlobal" type="JedoxOlap" modifiedBy="peter">&#xd;
      &lt;global nameref="localhost" />&#xd;
      &lt;database>${sys_database}&lt;/database>&#xd;
      &lt;ssl>trust&lt;/ssl>&#xd;
    &lt;/connection>&#xd;
    &lt;connection modified="1599657357196" name="AIP_getToken" type="Rest" modifiedBy="peter">&#xd;
      &lt;comment>Authenticate on AAD Server with AIssisted Planning user &amp;amp; password.&#xd;
Enter credentials in variables or AIssisted Planning Model settings.&lt;/comment>&#xd;
      &lt;resource>https://login.microsoftonline.com/aissistedplanning.onmicrosoft.com/oauth2/token&lt;/resource>&#xd;
      &lt;httpMethod>POST&lt;/httpMethod>&#xd;
      &lt;headers>&#xd;
        &lt;header name="Content-Type">application/x-www-form-urlencoded&lt;/header>&#xd;
      &lt;/headers>&#xd;
      &lt;parameters>&#xd;
        &lt;parameter name="grant_type">password&lt;/parameter>&#xd;
        &lt;parameter name="client_id">89b28630-088f-46a9-85eb-14a919c2f94a&lt;/parameter>&#xd;
        &lt;parameter name="username">${sys_AIssistedUser}&lt;/parameter>&#xd;
        &lt;parameter name="password">${sys_AIssistedPass}&lt;/parameter>&#xd;
        &lt;parameter name="resource">7bb350cb-5757-4c85-b098-0f9fd5c7e4e4&lt;/parameter>&#xd;
      &lt;/parameters>&#xd;
      &lt;ssl>verify&lt;/ssl>&#xd;
    &lt;/connection>&#xd;
    &lt;connection modified="1606314341992" name="AIP_functionCall" type="Rest" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[REST Call to Jedox AIssistedPlanning Web Service
FUNCTION: forecastValuesJedox/vX.X.X
ADAPT: You have to enter all web service inputs here

Documentation:
The time series forecasting web service uses several time series forecasting algorithms. These are simple linear modelling, seasonal naive forecasting, random walk with drift for forecasting, Holt Winters method, exponential smoothing and Autoregressive integrating moving averages (ARIMA). The Linear modelling method fits a full linear model and then makes prediction. Seasonal naive model is a basic time series model with consideration for seasonality of data. Holt winters method requires seasonal data with the number of inputs at least a multiple of period + 3 for quarterly data and period+5 for monthly data. Exponential smoothing, on the other hand, can also be used for non-seasonal data. The Random walk model uses Seasonal and Trend decomposition using Loess (STL) decomposition for time series analysis and forecast using random walk with drift (long-term trend assumed constant). This method requires a series length of >2*period (period - 12 monthly data, 4 quarterly data, 52 weekly data, 365 daily data). In case the choice of algorithm is not clear, automatic selection can also be performed. The web service also calculates accuracy and lower/upper bounds for the forecasts.]]&gt;&lt;/comment>&#xd;
      &lt;resource>${service_protocol}://${service_combinedURL}/${service_api}/${service_function}/${service_version}&lt;/resource>&#xd;
      &lt;httpMethod>POST&lt;/httpMethod>&#xd;
      &lt;timeout>0&lt;/timeout>&#xd;
      &lt;ignoreCookiesPolicy>false&lt;/ignoreCookiesPolicy>&#xd;
      &lt;headers>&#xd;
        &lt;header name="Authorization">Bearer ${intern_bearer}&lt;/header>&#xd;
        &lt;header name="Content-Type">application/json&lt;/header>&#xd;
      &lt;/headers>&#xd;
      &lt;ssl>verify&lt;/ssl>&#xd;
      &lt;requestBody>&lt;![CDATA[{
  "InputValues": "${aip_inputValues}",
  "NumberOfPredictions": ${aip_numValues},
  "AlgorithmType": "${aip_predictionType}",
  "Period": ${aip_period},
  "OutputType": ${aip_outputType},
  "NumInputs": ${aip_numSeries},
  "AccuracyThreshold": ${aip_accThreshold},
  "UseInterpolation":"${intern_TSinterpolate}",
  "PercentageOfZeros":${aip_zeroRatio},
  "NumberOfTestValues":${aip_numTestSetValues},
  "user":"${sys_AIssistedUser}",
  "apiKey":"${sys_AIssistedAPIKEY}"
}]]&gt;&lt;/requestBody>&#xd;
    &lt;/connection>&#xd;
    &lt;connection modified="1606300458846" name="AIP_functionCall_outlier" type="Rest" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[REST Call to Jedox AIssistedPlanning Web Service
FUNCTION: outlierJedox/vX.X.X
ADAPT: You have to enter all web service inputs here]]&gt;&lt;/comment>&#xd;
      &lt;resource>${service_protocol}://${service_combinedURL}/${service_api}/${service_function_outlier}/${service_version_outlier}&lt;/resource>&#xd;
      &lt;httpMethod>POST&lt;/httpMethod>&#xd;
      &lt;timeout>0&lt;/timeout>&#xd;
      &lt;ignoreCookiesPolicy>false&lt;/ignoreCookiesPolicy>&#xd;
      &lt;headers>&#xd;
        &lt;header name="Authorization">Bearer ${intern_bearer}&lt;/header>&#xd;
        &lt;header name="Content-Type">application/json&lt;/header>&#xd;
      &lt;/headers>&#xd;
      &lt;ssl>verify&lt;/ssl>&#xd;
      &lt;requestBody>&lt;![CDATA[{
  "InputValues":"${aip_inputValues}",
  "NumInputs":${aip_numSeries},
  "AlgorithmType":"${aip_outlierType}",
  "Period":${aip_period},
  "UseInterpolation":${aip_interpolation},
  "AlgGroup":${aip_algGroup},
  "AlgInterpolate":${aip_algInterpolation},
  "AlgSubType":${aip_algSubType},
  "OutputType":${aip_outputTypeOutlier},
  "FailSafe": ${aip_failSafe},
  "user":"${sys_AIssistedUser}",
  "apiKey":"${sys_AIssistedAPIKEY}"
}]]&gt;&lt;/requestBody>&#xd;
    &lt;/connection>&#xd;
    &lt;connection modified="1606314379678" name="AIP_functionCall_pod" type="Rest" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[REST Call to Jedox AIssistedPlanning Web Service
FUNCTION: forecastValuesJedox/vX.X.X
ADAPT: You have to enter all web service inputs here

Documentation:
The time series forecasting web service uses several time series forecasting algorithms. These are simple linear modelling, seasonal naive forecasting, random walk with drift for forecasting, Holt Winters method, exponential smoothing and Autoregressive integrating moving averages (ARIMA). The Linear modelling method fits a full linear model and then makes prediction. Seasonal naive model is a basic time series model with consideration for seasonality of data. Holt winters method requires seasonal data with the number of inputs at least a multiple of period + 3 for quarterly data and period+5 for monthly data. Exponential smoothing, on the other hand, can also be used for non-seasonal data. The Random walk model uses Seasonal and Trend decomposition using Loess (STL) decomposition for time series analysis and forecast using random walk with drift (long-term trend assumed constant). This method requires a series length of >2*period (period - 12 monthly data, 4 quarterly data, 52 weekly data, 365 daily data). In case the choice of algorithm is not clear, automatic selection can also be performed. The web service also calculates accuracy and lower/upper bounds for the forecasts.]]&gt;&lt;/comment>&#xd;
      &lt;resource>${service_protocol}://${service_combinedURL}/${service_api}/${service_function}/${service_version}&lt;/resource>&#xd;
      &lt;httpMethod>POST&lt;/httpMethod>&#xd;
      &lt;timeout>0&lt;/timeout>&#xd;
      &lt;ignoreCookiesPolicy>false&lt;/ignoreCookiesPolicy>&#xd;
      &lt;headers>&#xd;
        &lt;header name="Authorization">Bearer ${intern_bearer}&lt;/header>&#xd;
        &lt;header name="Content-Type">application/json&lt;/header>&#xd;
      &lt;/headers>&#xd;
      &lt;ssl>off&lt;/ssl>&#xd;
      &lt;requestBody>&lt;![CDATA[{
  "InputValues": "${aip_inputValues}",
  "NumberOfPredictions": ${aip_numValues},
  "AlgorithmType": "${aip_predictionType}",
  "Period": ${aip_period},
  "OutputType": ${aip_outputType},
  "NumInputs": ${aip_numSeries},
  "AccuracyThreshold": ${aip_accThreshold},
  "UseInterpolation":"${intern_TSinterpolate}",
  "PercentageOfZeros":${aip_zeroRatio},
  "NumberOfTestValues":${aip_numTestSetValues}
}]]&gt;&lt;/requestBody>&#xd;
    &lt;/connection>&#xd;
    &lt;connection modified="1606310756345" name="AIP_functionCall_outlier_pod" type="Rest" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[REST Call to Jedox AIssistedPlanning Web Service
FUNCTION: outlierJedox/vX.X.X
ADAPT: You have to enter all web service inputs here]]&gt;&lt;/comment>&#xd;
      &lt;resource>${service_protocol}://${service_combinedURL}/${service_api}/${service_function_outlier}/${service_version_outlier}&lt;/resource>&#xd;
      &lt;httpMethod>POST&lt;/httpMethod>&#xd;
      &lt;timeout>0&lt;/timeout>&#xd;
      &lt;ignoreCookiesPolicy>false&lt;/ignoreCookiesPolicy>&#xd;
      &lt;headers>&#xd;
        &lt;header name="Authorization">Bearer ${intern_bearer}&lt;/header>&#xd;
        &lt;header name="Content-Type">application/json&lt;/header>&#xd;
      &lt;/headers>&#xd;
      &lt;ssl>off&lt;/ssl>&#xd;
      &lt;requestBody>&lt;![CDATA[{
  "InputValues":"${aip_inputValues}",
  "NumInputs":${aip_numSeries},
  "AlgorithmType":"${aip_outlierType}",
  "Period":${aip_period},
  "UseInterpolation":${aip_interpolation},
  "AlgGroup":${aip_algGroup},
  "AlgInterpolate":${aip_algInterpolation},
  "AlgSubType":${aip_algSubType},
  "OutputType":${aip_outputTypeOutlier},
  "FailSafe": ${aip_failSafe}
}]]&gt;&lt;/requestBody>&#xd;
    &lt;/connection>&#xd;
  &lt;/connections>&#xd;
  &lt;extracts>&#xd;
    &lt;extract modified="1599657357196" modifiedBy="peter" name="AIP_extractToken" type="Json">&#xd;
      &lt;comment>token for authetication&lt;/comment>&#xd;
      &lt;connection nameref="AIP_getToken" />&#xd;
      &lt;query>&#xd;
        &lt;level>$&lt;/level>&#xd;
        &lt;fields>&#xd;
          &lt;field>token_type&lt;/field>&#xd;
          &lt;field>access_token&lt;/field>&#xd;
        &lt;/fields>&#xd;
      &lt;/query>&#xd;
    &lt;/extract>&#xd;
    &lt;extract modified="1606301882223" name="AIP_extractResult" type="Json" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[Results from Jedox AIssisted Planning Web Service]]&gt;&lt;/comment>&#xd;
      &lt;connection nameref="AIP_functionCall${service_pod}" />&#xd;
      &lt;alias_map>&#xd;
        &lt;alias name="predict_values">1&lt;/alias>&#xd;
        &lt;alias name="accuracy_values">2&lt;/alias>&#xd;
        &lt;alias name="lowerBound_values">3&lt;/alias>&#xd;
        &lt;alias name="upperBound_values">4&lt;/alias>&#xd;
        &lt;alias name="rmse_normalized">5&lt;/alias>&#xd;
        &lt;alias name="web_success">6&lt;/alias>&#xd;
        &lt;alias name="web_errorMessage">7&lt;/alias>&#xd;
        &lt;alias name="success">8&lt;/alias>&#xd;
        &lt;alias name="errorMessage">9&lt;/alias>&#xd;
      &lt;/alias_map>&#xd;
      &lt;query>&#xd;
        &lt;level>$&lt;/level>&#xd;
        &lt;fields>&#xd;
          &lt;field>outputParameters.values[0][0]&lt;/field>&#xd;
          &lt;field>outputParameters.values[0][1]&lt;/field>&#xd;
          &lt;field>outputParameters.values[0][2]&lt;/field>&#xd;
          &lt;field>outputParameters.values[0][3]&lt;/field>&#xd;
          &lt;field>outputParameters.values[0][4]&lt;/field>&#xd;
          &lt;field>success&lt;/field>&#xd;
          &lt;field>errorMessage&lt;/field>&#xd;
          &lt;field>outputParameters.values[1]&lt;/field>&#xd;
          &lt;field>outputParameters.values[2]&lt;/field>&#xd;
        &lt;/fields>&#xd;
      &lt;/query>&#xd;
      &lt;cache>true&lt;/cache>&#xd;
    &lt;/extract>&#xd;
    &lt;extract modified="1599657357196" name="CT_addVersions" type="ConstantTable" modifiedBy="peter">&#xd;
      &lt;data>&#xd;
        &lt;header>&#xd;
          &lt;value>Version&lt;/value>&#xd;
        &lt;/header>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_elementTargetVersion}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_elementTargetVersion}_lower&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_elementTargetVersion}_upper&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>Interpolation&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>Outlier&lt;/value>&#xd;
        &lt;/row>&#xd;
      &lt;/data>&#xd;
    &lt;/extract>&#xd;
    &lt;extract modified="1599657357196" name="CT_addAcuracyDim" type="ConstantTable" modifiedBy="peter">&#xd;
      &lt;data>&#xd;
        &lt;header>&#xd;
          &lt;value>Accuracy&lt;/value>&#xd;
          &lt;value>:nodetype&lt;/value>&#xd;
        &lt;/header>&#xd;
        &lt;row>&#xd;
          &lt;value>Linear Model&lt;/value>&#xd;
          &lt;value>S&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>Holt Winters&lt;/value>&#xd;
          &lt;value>S&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>Seasonal Naive&lt;/value>&#xd;
          &lt;value>S&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>Exponential Smoothening&lt;/value>&#xd;
          &lt;value>S&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>ARIMA&lt;/value>&#xd;
          &lt;value>S&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>Random Walk with Drift&lt;/value>&#xd;
          &lt;value>S&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>STL Model&lt;/value>&#xd;
          &lt;value>S&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>STLF&lt;/value>&#xd;
          &lt;value>S&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>Neural Network TAR&lt;/value>&#xd;
          &lt;value>S&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>TBATS&lt;/value>&#xd;
          &lt;value>S&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>Croston's Method&lt;/value>&#xd;
          &lt;value>S&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>Extrapolation&lt;/value>&#xd;
          &lt;value>S&lt;/value>&#xd;
        &lt;/row>&#xd;
      &lt;/data>&#xd;
    &lt;/extract>&#xd;
    &lt;extract modified="1599657357196" name="SAVE_variablesAlgorithm" type="ConstantTable" modifiedBy="peter">&#xd;
      &lt;comment>Saves the variables for export/import to another integrator project.&#xd;
right click and "copy with dependancies", then paste into new project, click "yws" when asked to overwrite existing values.&lt;/comment>&#xd;
      &lt;data>&#xd;
        &lt;header>&#xd;
          &lt;value>Column1&lt;/value>&#xd;
          &lt;value>Column2&lt;/value>&#xd;
        &lt;/header>&#xd;
        &lt;row>&#xd;
          &lt;value>${aip_accThreshold}&lt;/value>&#xd;
          &lt;value>${aip_period}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${aip_outputType}&lt;/value>&#xd;
          &lt;value>${aip_predictionType}&lt;/value>&#xd;
        &lt;/row>&#xd;
      &lt;/data>&#xd;
    &lt;/extract>&#xd;
    &lt;extract modified="1599657357196" name="CT_dummy" type="ConstantTable" modifiedBy="peter">&#xd;
      &lt;comment>Dummy Constant Table&lt;/comment>&#xd;
      &lt;data>&#xd;
        &lt;header>&#xd;
          &lt;value>Column1&lt;/value>&#xd;
          &lt;value>Column2&lt;/value>&#xd;
        &lt;/header>&#xd;
        &lt;row>&#xd;
          &lt;value>dummy&lt;/value>&#xd;
          &lt;value>dummy&lt;/value>&#xd;
        &lt;/row>&#xd;
      &lt;/data>&#xd;
    &lt;/extract>&#xd;
    &lt;extract modified="1599785241188" name="OUTPUT_copyValues" type="CubeSlice" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[Target data
ADAPT for own dimensions 
(Should be #aip_numValues * #aip_numLoops paths)
(In normal case: should be same as input, adapt only target version and time (#numValues in the future))]]&gt;&lt;/comment>&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;query mode="exclude" randomPaths="false">&#xd;
        &lt;dimensions>&#xd;
          &lt;dimension name="${db_dimensionVersion}">&#xd;
            &lt;condition operator="like" type="accept">&lt;![CDATA[^${db_elementTargetVersion}$|^${db_elementTargetVersion}_lower$|^${db_elementTargetVersion}_upper$]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimensionTime}">&#xd;
            &lt;condition operator="like" type="accept">&lt;![CDATA[${intern_extractCopyAccept_1}|${intern_extractCopyAccept_2}|${intern_extractCopyAccept_3}]]&gt;&lt;/condition>&#xd;
            &lt;condition operator="like" type="deny">&lt;![CDATA[${intern_extractCopyDeny_1}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimensionMeasure}">&#xd;
            &lt;condition operator="like" type="accept">&lt;![CDATA[${db_elementMeasure}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension1}">&#xd;
            &lt;condition mode="${db_elementMode1}" operator="like" type="accept">&lt;![CDATA[${db_elementDim1}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension2}">&#xd;
            &lt;condition mode="${db_elementMode2}" operator="like" type="accept">&lt;![CDATA[${db_elementDim2}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension3}">&#xd;
            &lt;condition mode="${db_elementMode3}" operator="like" type="accept">&lt;![CDATA[${db_elementDim3}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension4}">&#xd;
            &lt;condition mode="${db_elementMode4}" operator="like" type="accept">&lt;![CDATA[${db_elementDim4}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension5}">&#xd;
            &lt;condition mode="${db_elementMode5}" operator="like" type="accept">&lt;![CDATA[${db_elementDim5}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension6}">&#xd;
            &lt;condition mode="${db_elementMode6}" operator="like" type="accept">&lt;![CDATA[${db_elementDim6}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension7}">&#xd;
            &lt;condition mode="${db_elementMode7}" operator="like" type="accept">&lt;![CDATA[${db_elementDim7}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension8}">&#xd;
            &lt;condition mode="${db_elementMode8}" operator="like" type="accept">&lt;![CDATA[${db_elementDim8}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension9}">&#xd;
            &lt;condition mode="${db_elementMode9}" operator="like" type="accept">&lt;![CDATA[${db_elementDim9}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension10}">&#xd;
            &lt;condition mode="${db_elementMode10}" operator="like" type="accept">&lt;![CDATA[${db_elementDim10}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension11}">&#xd;
            &lt;condition mode="${db_elementMode11}" operator="like" type="accept">&lt;![CDATA[${db_elementDim11}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension12}">&#xd;
            &lt;condition mode="${db_elementMode12}" operator="like" type="accept">&lt;![CDATA[${db_elementDim12}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension13}">&#xd;
            &lt;condition mode="${db_elementMode13}" operator="like" type="accept">&lt;![CDATA[${db_elementDim13}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension14}">&#xd;
            &lt;condition mode="${db_elementMode14}" operator="like" type="accept">&lt;![CDATA[${db_elementDim14}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension15}">&#xd;
            &lt;condition mode="${db_elementMode15}" operator="like" type="accept">&lt;![CDATA[${db_elementDim15}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension16}">&#xd;
            &lt;condition mode="${db_elementMode16}" operator="like" type="accept">&lt;![CDATA[${db_elementDim16}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension17}">&#xd;
            &lt;condition mode="${db_elementMode17}" operator="like" type="accept">&lt;![CDATA[${db_elementDim17}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension18}">&#xd;
            &lt;condition mode="${db_elementMode18}" operator="like" type="accept">&lt;![CDATA[${db_elementDim18}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension19}">&#xd;
            &lt;condition mode="${db_elementMode19}" operator="like" type="accept">&lt;![CDATA[${db_elementDim19}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension20}">&#xd;
            &lt;condition mode="${db_elementMode20}" operator="like" type="accept">&lt;![CDATA[${db_elementDim20}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension21}">&#xd;
            &lt;condition mode="${db_elementMode21}" operator="like" type="accept">&lt;![CDATA[${db_elementDim21}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension22}">&#xd;
            &lt;condition mode="${db_elementMode22}" operator="like" type="accept">&lt;![CDATA[${db_elementDim22}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension23}">&#xd;
            &lt;condition mode="${db_elementMode23}" operator="like" type="accept">&lt;![CDATA[${db_elementDim23}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension24}">&#xd;
            &lt;condition mode="${db_elementMode24}" operator="like" type="accept">&lt;![CDATA[${db_elementDim24}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension25}">&#xd;
            &lt;condition mode="${db_elementMode25}" operator="like" type="accept">&lt;![CDATA[${db_elementDim25}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension26}">&#xd;
            &lt;condition mode="${db_elementMode26}" operator="like" type="accept">&lt;![CDATA[${db_elementDim26}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension27}">&#xd;
            &lt;condition mode="${db_elementMode27}" operator="like" type="accept">&lt;![CDATA[${db_elementDim27}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
        &lt;/dimensions>&#xd;
        &lt;cube name="${sys_sourceCube}" />&#xd;
      &lt;/query>&#xd;
    &lt;/extract>&#xd;
    &lt;extract modified="1599657357196" name="SAVE_variablesDatabase" type="ConstantTable" modifiedBy="peter">&#xd;
      &lt;comment>Saves the variables for export/import to another integrator project.&#xd;
right click and "copy with dependancies", then paste into new project, click "yes" when asked to overwrite existing values.&lt;/comment>&#xd;
      &lt;data>&#xd;
        &lt;header>&#xd;
          &lt;value>Column1&lt;/value>&#xd;
        &lt;/header>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_dimensionMeasure}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_dimensionVersion}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_dimensionTime}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_elementMeasure}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_elementTargetVersion}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${sys_accuracyFlag}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${sys_database}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_elementVersion}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${sys_sourceCube}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${sys_connection}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${sys_AIssistedPass}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${sys_AIssistedUser}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${sys_targetCube}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_dimension1}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_dimension2}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_dimension3}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_dimension4}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_dimension5}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_dimension6}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_dimension7}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_dimension8}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_dimension9}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_dimension10}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_dimension11}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_dimension12}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_dimension13}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_dimension14}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_dimension15}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_dimension16}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_dimension17}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_dimension18}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_dimension19}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_dimension20}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_dimension21}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_dimension22}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_dimension23}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_dimension24}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_dimension25}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_dimension26}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_dimension27}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_elementDim1}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_elementDim2}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_elementDim3}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_elementDim4}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_elementDim5}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_elementDim6}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_elementDim7}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row&gt;&#xd;
          &lt;value>${db_elementDim8}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_elementDim9}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_elementDim10}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_elementDim11}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_elementDim12}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_elementDim13}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_elementDim14}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_elementDim15}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_elementDim16}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_elementDim17}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_elementDim18}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_elementDim19}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_elementDim20}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_elementDim21}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_elementDim22}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_elementDim23}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_elementDim24}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_elementDim25}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_elementDim26}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${db_elementDim27}&lt;/value>&#xd;
        &lt;/row>&#xd;
      &lt;/data>&#xd;
    &lt;/extract>&#xd;
    &lt;extract modified="1599785150218" name="OUTPUT_targetWithValues" type="Cube" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[Input data
ADAPT for own dimensions]]&gt;&lt;/comment>&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;query celltype="both" drillthrough="false" onlyBasisAsDefault="false" useRules="true" zeroSuppressionType="includeEmptyDefaultMapping">&#xd;
        &lt;dimensions>&#xd;
          &lt;dimension name="${db_dimensionVersion}">&#xd;
            &lt;condition operator="like" type="accept">&lt;![CDATA[^${db_elementTargetVersion}$|^${db_elementTargetVersion}_lower$|^${db_elementTargetVersion}_upper$]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimensionTime}">&#xd;
            &lt;condition operator="like" type="accept">&lt;![CDATA[${intern_extractTargetAccept_1}|${intern_extractTargetAccept_2}|${intern_extractTargetAccept_3}]]&gt;&lt;/condition>&#xd;
            &lt;condition operator="like" type="deny">&lt;![CDATA[${intern_extractTargetDeny_1}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimensionMeasure}">&#xd;
            &lt;condition operator="like" type="accept">&lt;![CDATA[${db_elementMeasure}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension1}">&#xd;
            &lt;condition mode="${db_elementMode1}" operator="like" type="accept">&lt;![CDATA[${db_elementDim1}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension2}">&#xd;
            &lt;condition mode="${db_elementMode2}" operator="like" type="accept">&lt;![CDATA[${db_elementDim2}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension3}">&#xd;
            &lt;condition mode="${db_elementMode3}" operator="like" type="accept">&lt;![CDATA[${db_elementDim3}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension4}">&#xd;
            &lt;condition mode="${db_elementMode4}" operator="like" type="accept">&lt;![CDATA[${db_elementDim4}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension5}">&#xd;
            &lt;condition mode="${db_elementMode5}" operator="like" type="accept">&lt;![CDATA[${db_elementDim5}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension6}">&#xd;
            &lt;condition mode="${db_elementMode6}" operator="like" type="accept">&lt;![CDATA[${db_elementDim6}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension7}">&#xd;
            &lt;condition mode="${db_elementMode7}" operator="like" type="accept">&lt;![CDATA[${db_elementDim7}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension8}">&#xd;
            &lt;condition mode="${db_elementMode8}" operator="like" type="accept">&lt;![CDATA[${db_elementDim8}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension9}">&#xd;
            &lt;condition mode="${db_elementMode9}" operator="like" type="accept">&lt;![CDATA[${db_elementDim9}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension10}">&#xd;
            &lt;condition mode="${db_elementMode10}" operator="like" type="accept">&lt;![CDATA[${db_elementDim10}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension11}">&#xd;
            &lt;condition mode="${db_elementMode11}" operator="like" type="accept">&lt;![CDATA[${db_elementDim11}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension12}">&#xd;
            &lt;condition mode="${db_elementMode12}" operator="like" type="accept">&lt;![CDATA[${db_elementDim12}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension13}">&#xd;
            &lt;condition mode="${db_elementMode13}" operator="like" type="accept">&lt;![CDATA[${db_elementDim13}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension14}">&#xd;
            &lt;condition mode="${db_elementMode14}" operator="like" type="accept">&lt;![CDATA[${db_elementDim14}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension15}">&#xd;
            &lt;condition mode="${db_elementMode15}" operator="like" type="accept">&lt;![CDATA[${db_elementDim15}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension16}">&#xd;
            &lt;condition mode="${db_elementMode16}" operator="like" type="accept">&lt;![CDATA[${db_elementDim16}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension17}">&#xd;
            &lt;condition mode="${db_elementMode17}" operator="like" type="accept">&lt;![CDATA[${db_elementDim17}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension18}">&#xd;
            &lt;condition mode="${db_elementMode18}" operator="like" type="accept">&lt;![CDATA[${db_elementDim18}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension19}">&#xd;
            &lt;condition mode="${db_elementMode19}" operator="like" type="accept">&lt;![CDATA[${db_elementDim19}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension20}">&#xd;
            &lt;condition mode="${db_elementMode20}" operator="like" type="accept">&lt;![CDATA[${db_elementDim20}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension21}">&#xd;
            &lt;condition mode="${db_elementMode21}" operator="like" type="accept">&lt;![CDATA[${db_elementDim21}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension22}">&#xd;
            &lt;condition mode="${db_elementMode22}" operator="like" type="accept">&lt;![CDATA[${db_elementDim22}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension23}">&#xd;
            &lt;condition mode="${db_elementMode23}" operator="like" type="accept">&lt;![CDATA[${db_elementDim23}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension24}">&#xd;
            &lt;condition mode="${db_elementMode24}" operator="like" type="accept">&lt;![CDATA[${db_elementDim24}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension25}">&#xd;
            &lt;condition mode="${db_elementMode25}" operator="like" type="accept">&lt;![CDATA[${db_elementDim25}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension26}">&#xd;
            &lt;condition mode="${db_elementMode26}" operator="like" type="accept">&lt;![CDATA[${db_elementDim26}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension27}">&#xd;
            &lt;condition mode="${db_elementMode27}" operator="like" type="accept">&lt;![CDATA[${db_elementDim27}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
        &lt;/dimensions>&#xd;
        &lt;cube name="${sys_sourceCube}" />&#xd;
      &lt;/query>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/extract>&#xd;
    &lt;extract modified="1599657357196" name="CT_inputCheck" type="ConstantTable" modifiedBy="peter">&#xd;
      &lt;data>&#xd;
        &lt;header>&#xd;
          &lt;value>inputValues&lt;/value>&#xd;
        &lt;/header>&#xd;
        &lt;row>&#xd;
          &lt;value>${intern_inputSum}&lt;/value>&#xd;
        &lt;/row>&#xd;
        &lt;row>&#xd;
          &lt;value>${sys_useOutlierFlag}&lt;/value>&#xd;
        &lt;/row>&#xd;
      &lt;/data>&#xd;
    &lt;/extract>&#xd;
    &lt;extract modified="1606995772109" name="INPUT_reportVariables" type="Cube" modifiedBy="peter">&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;query drillthrough="false" onlyBasisAsDefault="true" useRules="false" zeroSuppressionType="includeEmpty">&#xd;
        &lt;dimensions>&#xd;
          &lt;dimension name="${sys_configCubes}">&#xd;
            &lt;condition operator="equal" type="accept">&lt;![CDATA[${sys_sourceCube}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${sys_configSettings}">&#xd;
            &lt;condition operator="equal" type="accept">&lt;![CDATA[${sys_configSettingsValue}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${sys_configParameters}">&#xd;
            &lt;condition mode="onlyBases" operator="like" type="accept">&lt;![CDATA[^${sys_prefix}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
        &lt;/dimensions>&#xd;
        &lt;cube name="${sys_aiConfigCube}" />&#xd;
      &lt;/query>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/extract>&#xd;
    &lt;extract modified="1599784932110" name="INPUT_sourceValues" type="Cube" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[Input data
ADAPT for own dimensions]]&gt;&lt;/comment>&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;query celltype="both" drillthrough="false" onlyBasisAsDefault="false" useRules="true" zeroSuppressionType="includeEmptyDefaultMapping">&#xd;
        &lt;dimensions>&#xd;
          &lt;dimension name="${db_dimensionVersion}">&#xd;
            &lt;condition operator="equal" type="accept">&lt;![CDATA[${db_elementVersion}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimensionTime}">&#xd;
            &lt;condition operator="like" type="accept">&lt;![CDATA[${intern_extractSourceAccept_1}|${intern_extractSourceAccept_2}|${intern_extractSourceAccept_3}]]&gt;&lt;/condition>&#xd;
            &lt;condition operator="like" type="deny">&lt;![CDATA[${intern_extractSourceDeny_1}|${intern_extractSourceDeny_3}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimensionMeasure}">&#xd;
            &lt;condition operator="like" type="accept">&lt;![CDATA[${db_elementMeasure}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension1}">&#xd;
            &lt;condition mode="${db_elementMode1}" operator="like" type="accept">&lt;![CDATA[${db_elementDim1}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension2}">&#xd;
            &lt;condition mode="${db_elementMode2}" operator="like" type="accept">&lt;![CDATA[${db_elementDim2}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension3}">&#xd;
            &lt;condition mode="${db_elementMode3}" operator="like" type="accept">&lt;![CDATA[${db_elementDim3}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension4}">&#xd;
            &lt;condition mode="${db_elementMode4}" operator="like" type="accept">&lt;![CDATA[${db_elementDim4}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension5}">&#xd;
            &lt;condition mode="${db_elementMode5}" operator="like" type="accept">&lt;![CDATA[${db_elementDim5}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension6}">&#xd;
            &lt;condition mode="${db_elementMode6}" operator="like" type="accept">&lt;![CDATA[${db_elementDim6}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension7}">&#xd;
            &lt;condition mode="${db_elementMode7}" operator="like" type="accept">&lt;![CDATA[${db_elementDim7}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension8}">&#xd;
            &lt;condition mode="${db_elementMode8}" operator="like" type="accept">&lt;![CDATA[${db_elementDim8}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension9}">&#xd;
            &lt;condition mode="${db_elementMode9}" operator="like" type="accept">&lt;![CDATA[${db_elementDim9}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension10}">&#xd;
            &lt;condition mode="${db_elementMode10}" operator="like" type="accept">&lt;![CDATA[${db_elementDim10}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension11}">&#xd;
            &lt;condition mode="${db_elementMode11}" operator="like" type="accept">&lt;![CDATA[${db_elementDim11}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension12}">&#xd;
            &lt;condition mode="${db_elementMode12}" operator="like" type="accept">&lt;![CDATA[${db_elementDim12}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension13}">&#xd;
            &lt;condition mode="${db_elementMode13}" operator="like" type="accept">&lt;![CDATA[${db_elementDim13}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension14}">&#xd;
            &lt;condition mode="${db_elementMode14}" operator="like" type="accept">&lt;![CDATA[${db_elementDim14}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension15}">&#xd;
            &lt;condition mode="${db_elementMode15}" operator="like" type="accept">&lt;![CDATA[${db_elementDim15}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension16}">&#xd;
            &lt;condition mode="${db_elementMode16}" operator="like" type="accept">&lt;![CDATA[${db_elementDim16}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension17}">&#xd;
            &lt;condition mode="${db_elementMode17}" operator="like" type="accept">&lt;![CDATA[${db_elementDim17}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension18}">&#xd;
            &lt;condition mode="${db_elementMode18}" operator="like" type="accept">&lt;![CDATA[${db_elementDim18}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension19}">&#xd;
            &lt;condition mode="${db_elementMode19}" operator="like" type="accept">&lt;![CDATA[${db_elementDim19}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension20}">&#xd;
            &lt;condition mode="${db_elementMode20}" operator="like" type="accept">&lt;![CDATA[${db_elementDim20}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension21}">&#xd;
            &lt;condition mode="${db_elementMode21}" operator="like" type="accept">&lt;![CDATA[${db_elementDim21}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension22}">&#xd;
            &lt;condition mode="${db_elementMode22}" operator="like" type="accept">&lt;![CDATA[${db_elementDim22}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension23}">&#xd;
            &lt;condition mode="${db_elementMode23}" operator="like" type="accept">&lt;![CDATA[${db_elementDim23}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension24}">&#xd;
            &lt;condition mode="${db_elementMode24}" operator="like" type="accept">&lt;![CDATA[${db_elementDim24}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension25}">&#xd;
            &lt;condition mode="${db_elementMode25}" operator="like" type="accept">&lt;![CDATA[${db_elementDim25}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension26}">&#xd;
            &lt;condition mode="${db_elementMode26}" operator="like" type="accept">&lt;![CDATA[${db_elementDim26}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension27}">&#xd;
            &lt;condition mode="${db_elementMode27}" operator="like" type="accept">&lt;![CDATA[${db_elementDim27}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
        &lt;/dimensions>&#xd;
        &lt;cube name="${sys_sourceCube}" />&#xd;
      &lt;/query>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/extract>&#xd;
    &lt;extract modified="1599657357196" name="INPUT_accuracyTarget" type="CubeSlice" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[Target data
ADAPT for own dimensions 
(Should be #aip_numValues * #aip_numLoops paths)
(In normal case: should be same as input, adapt only target version and time (#numValues in the future))]]&gt;&lt;/comment>&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;query mode="exclude" randomPaths="false">&#xd;
        &lt;dimensions>&#xd;
          &lt;dimension name="${db_dimensionVersion}">&#xd;
            &lt;condition operator="equal" type="accept">&lt;![CDATA[${db_elementTargetVersion}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimensionMeasure}">&#xd;
            &lt;condition operator="like" type="accept">&lt;![CDATA[${db_elementMeasure}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimensionTime}">&#xd;
            &lt;condition operator="equal" type="accept">&lt;![CDATA[${time_elementStart}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension1}">&#xd;
            &lt;condition mode="${db_elementMode1}" operator="like" type="accept">&lt;![CDATA[${db_elementDim1}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension2}">&#xd;
            &lt;condition mode="${db_elementMode2}" operator="like" type="accept">&lt;![CDATA[${db_elementDim2}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension3}">&#xd;
            &lt;condition mode="${db_elementMode3}" operator="like" type="accept">&lt;![CDATA[${db_elementDim3}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension4}">&#xd;
            &lt;condition mode="${db_elementMode4}" operator="like" type="accept">&lt;![CDATA[${db_elementDim4}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension5}">&#xd;
            &lt;condition mode="${db_elementMode5}" operator="like" type="accept">&lt;![CDATA[${db_elementDim5}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension6}">&#xd;
            &lt;condition mode="${db_elementMode6}" operator="like" type="accept">&lt;![CDATA[${db_elementDim6}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension7}">&#xd;
            &lt;condition mode="${db_elementMode7}" operator="like" type="accept">&lt;![CDATA[${db_elementDim7}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension8}">&#xd;
            &lt;condition mode="${db_elementMode8}" operator="like" type="accept">&lt;![CDATA[${db_elementDim8}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension9}">&#xd;
            &lt;condition mode="${db_elementMode9}" operator="like" type="accept">&lt;![CDATA[${db_elementDim9}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension10}">&#xd;
            &lt;condition mode="${db_elementMode10}" operator="like" type="accept">&lt;![CDATA[${db_elementDim10}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension11}">&#xd;
            &lt;condition mode="${db_elementMode11}" operator="like" type="accept">&lt;![CDATA[${db_elementDim11}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension12}">&#xd;
            &lt;condition mode="${db_elementMode12}" operator="like" type="accept">&lt;![CDATA[${db_elementDim12}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension13}">&#xd;
            &lt;condition mode="${db_elementMode13}" operator="like" type="accept">&lt;![CDATA[${db_elementDim13}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension14}">&#xd;
            &lt;condition mode="${db_elementMode14}" operator="like" type="accept">&lt;![CDATA[${db_elementDim14}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension15}">&#xd;
            &lt;condition mode="${db_elementMode15}" operator="like" type="accept">&lt;![CDATA[${db_elementDim15}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension16}">&#xd;
            &lt;condition mode="${db_elementMode16}" operator="like" type="accept">&lt;![CDATA[${db_elementDim16}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension17}">&#xd;
            &lt;condition mode="${db_elementMode17}" operator="like" type="accept">&lt;![CDATA[${db_elementDim17}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension18}">&#xd;
            &lt;condition mode="${db_elementMode18}" operator="like" type="accept">&lt;![CDATA[${db_elementDim18}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension19}">&#xd;
            &lt;condition mode="${db_elementMode19}" operator="like" type="accept">&lt;![CDATA[${db_elementDim19}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension20}">&#xd;
            &lt;condition mode="${db_elementMode20}" operator="like" type="accept">&lt;![CDATA[${db_elementDim20}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension21}">&#xd;
            &lt;condition mode="${db_elementMode21}" operator="like" type="accept">&lt;![CDATA[${db_elementDim21}]]&gt;&lt;/condition&gt;&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension22}">&#xd;
            &lt;condition mode="${db_elementMode22}" operator="like" type="accept">&lt;![CDATA[${db_elementDim22}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension23}">&#xd;
            &lt;condition mode="${db_elementMode23}" operator="like" type="accept">&lt;![CDATA[${db_elementDim23}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension24}">&#xd;
            &lt;condition mode="${db_elementMode24}" operator="like" type="accept">&lt;![CDATA[${db_elementDim24}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension25}">&#xd;
            &lt;condition mode="${db_elementMode25}" operator="like" type="accept">&lt;![CDATA[${db_elementDim25}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension26}">&#xd;
            &lt;condition mode="${db_elementMode26}" operator="like" type="accept">&lt;![CDATA[${db_elementDim26}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension27}">&#xd;
            &lt;condition mode="${db_elementMode27}" operator="like" type="accept">&lt;![CDATA[${db_elementDim27}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
        &lt;/dimensions>&#xd;
        &lt;cube name="${sys_sourceCube}" />&#xd;
      &lt;/query>&#xd;
    &lt;/extract>&#xd;
    &lt;extract type="Dimension" name="INPUT_dim1" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;query>&#xd;
        &lt;dimension name="${db_dimension1}">&#xd;
          &lt;condition operator="like" type="accept" mode="${db_elementMode1}">${db_elementDim1}&lt;/condition>&#xd;
        &lt;/dimension>&#xd;
      &lt;/query>&#xd;
    &lt;/extract>&#xd;
    &lt;extract type="Dimension" name="INPUT_dim2" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;query>&#xd;
        &lt;dimension name="${db_dimension2}">&#xd;
          &lt;condition operator="like" type="accept" mode="${db_elementMode2}">${db_elementDim2}&lt;/condition>&#xd;
        &lt;/dimension>&#xd;
      &lt;/query>&#xd;
    &lt;/extract>&#xd;
    &lt;extract type="Dimension" name="INPUT_dim3" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;query>&#xd;
        &lt;dimension name="${db_dimension3}">&#xd;
          &lt;condition operator="like" type="accept" mode="${db_elementMode3}">${db_elementDim3}&lt;/condition>&#xd;
        &lt;/dimension>&#xd;
      &lt;/query>&#xd;
    &lt;/extract>&#xd;
    &lt;extract type="Dimension" name="INPUT_dim4" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;query>&#xd;
        &lt;dimension name="${db_dimension4}">&#xd;
          &lt;condition operator="like" type="accept" mode="${db_elementMode4}">${db_elementDim4}&lt;/condition>&#xd;
        &lt;/dimension>&#xd;
      &lt;/query>&#xd;
    &lt;/extract>&#xd;
    &lt;extract type="Dimension" name="INPUT_dim5" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;query>&#xd;
        &lt;dimension name="${db_dimension5}">&#xd;
          &lt;condition operator="like" type="accept" mode="${db_elementMode5}">${db_elementDim5}&lt;/condition>&#xd;
        &lt;/dimension>&#xd;
      &lt;/query>&#xd;
    &lt;/extract>&#xd;
    &lt;extract type="Dimension" name="INPUT_dim6" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;query>&#xd;
        &lt;dimension name="${db_dimension6}">&#xd;
          &lt;condition operator="like" type="accept" mode="${db_elementMode6}">${db_elementDim6}&lt;/condition>&#xd;
        &lt;/dimension>&#xd;
      &lt;/query>&#xd;
    &lt;/extract>&#xd;
    &lt;extract type="Dimension" name="INPUT_dim7" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;query>&#xd;
        &lt;dimension name="${db_dimension7}">&#xd;
          &lt;condition operator="like" type="accept" mode="${db_elementMode7}">${db_elementDim7}&lt;/condition>&#xd;
        &lt;/dimension>&#xd;
      &lt;/query>&#xd;
    &lt;/extract>&#xd;
    &lt;extract type="Dimension" name="INPUT_dim8" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;query>&#xd;
        &lt;dimension name="${db_dimension8}">&#xd;
          &lt;condition operator="like" type="accept" mode="${db_elementMode8}">${db_elementDim8}&lt;/condition>&#xd;
        &lt;/dimension>&#xd;
      &lt;/query>&#xd;
    &lt;/extract>&#xd;
    &lt;extract type="Dimension" name="INPUT_dim9" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;query>&#xd;
        &lt;dimension name="${db_dimension9}">&#xd;
          &lt;condition operator="like" type="accept" mode="${db_elementMode9}">${db_elementDim9}&lt;/condition>&#xd;
        &lt;/dimension>&#xd;
      &lt;/query>&#xd;
    &lt;/extract>&#xd;
    &lt;extract type="Dimension" name="INPUT_dim10" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;query>&#xd;
        &lt;dimension name="${db_dimension10}">&#xd;
          &lt;condition operator="like" type="accept" mode="${db_elementMode10}">${db_elementDim10}&lt;/condition>&#xd;
        &lt;/dimension>&#xd;
      &lt;/query>&#xd;
    &lt;/extract>&#xd;
    &lt;extract type="Dimension" name="INPUT_dim11" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;query>&#xd;
        &lt;dimension name="${db_dimension11}">&#xd;
          &lt;condition operator="like" type="accept" mode="${db_elementMode11}">${db_elementDim11}&lt;/condition>&#xd;
        &lt;/dimension>&#xd;
      &lt;/query>&#xd;
    &lt;/extract>&#xd;
    &lt;extract type="Dimension" name="INPUT_dim12" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;query>&#xd;
        &lt;dimension name="${db_dimension12}">&#xd;
          &lt;condition operator="like" type="accept" mode="${db_elementMode12}">${db_elementDim12}&lt;/condition>&#xd;
        &lt;/dimension>&#xd;
      &lt;/query>&#xd;
    &lt;/extract>&#xd;
    &lt;extract type="Dimension" name="INPUT_dim13" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;query>&#xd;
        &lt;dimension name="${db_dimension13}">&#xd;
          &lt;condition operator="like" type="accept" mode="${db_elementMode13}">${db_elementDim13}&lt;/condition>&#xd;
        &lt;/dimension>&#xd;
      &lt;/query>&#xd;
    &lt;/extract>&#xd;
    &lt;extract type="Dimension" name="INPUT_dim14" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;query>&#xd;
        &lt;dimension name="${db_dimension14}">&#xd;
          &lt;condition operator="like" type="accept" mode="${db_elementMode14}">${db_elementDim14}&lt;/condition>&#xd;
        &lt;/dimension>&#xd;
      &lt;/query>&#xd;
    &lt;/extract>&#xd;
    &lt;extract type="Dimension" name="INPUT_dim15" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;query>&#xd;
        &lt;dimension name="${db_dimension15}">&#xd;
          &lt;condition operator="like" type="accept" mode="${db_elementMode15}">${db_elementDim15}&lt;/condition>&#xd;
        &lt;/dimension>&#xd;
      &lt;/query>&#xd;
    &lt;/extract>&#xd;
    &lt;extract type="Dimension" name="INPUT_dim16" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;query>&#xd;
        &lt;dimension name="${db_dimension16}">&#xd;
          &lt;condition operator="like" type="accept" mode="${db_elementMode16}">${db_elementDim16}&lt;/condition>&#xd;
        &lt;/dimension>&#xd;
      &lt;/query>&#xd;
    &lt;/extract>&#xd;
    &lt;extract type="Dimension" name="INPUT_dim17" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;query>&#xd;
        &lt;dimension name="${db_dimension17}">&#xd;
          &lt;condition operator="like" type="accept" mode="${db_elementMode17}">${db_elementDim17}&lt;/condition>&#xd;
        &lt;/dimension>&#xd;
      &lt;/query>&#xd;
    &lt;/extract>&#xd;
    &lt;extract type="Dimension" name="INPUT_dim18" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;query>&#xd;
        &lt;dimension name="${db_dimension18}">&#xd;
          &lt;condition operator="like" type="accept" mode="${db_elementMode18}">${db_elementDim18}&lt;/condition>&#xd;
        &lt;/dimension>&#xd;
      &lt;/query>&#xd;
    &lt;/extract>&#xd;
    &lt;extract type="Dimension" name="INPUT_dim19" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;query>&#xd;
        &lt;dimension name="${db_dimension19}">&#xd;
          &lt;condition operator="like" type="accept" mode="${db_elementMode19}">${db_elementDim19}&lt;/condition>&#xd;
        &lt;/dimension>&#xd;
      &lt;/query>&#xd;
    &lt;/extract>&#xd;
    &lt;extract type="Dimension" name="INPUT_dim20" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;query>&#xd;
        &lt;dimension name="${db_dimension20}">&#xd;
          &lt;condition operator="like" type="accept" mode="${db_elementMode20}">${db_elementDim20}&lt;/condition>&#xd;
        &lt;/dimension>&#xd;
      &lt;/query>&#xd;
    &lt;/extract>&#xd;
    &lt;extract type="Dimension" name="INPUT_dim21" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;query>&#xd;
        &lt;dimension name="${db_dimension21}">&#xd;
          &lt;condition operator="like" type="accept" mode="${db_elementMode21}">${db_elementDim21}&lt;/condition>&#xd;
        &lt;/dimension>&#xd;
      &lt;/query>&#xd;
    &lt;/extract>&#xd;
    &lt;extract type="Dimension" name="INPUT_dim22" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;query>&#xd;
        &lt;dimension name="${db_dimension22}">&#xd;
          &lt;condition operator="like" type="accept" mode="${db_elementMode22}">${db_elementDim22}&lt;/condition>&#xd;
        &lt;/dimension>&#xd;
      &lt;/query>&#xd;
    &lt;/extract>&#xd;
    &lt;extract type="Dimension" name="INPUT_dim23" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;query>&#xd;
        &lt;dimension name="${db_dimension23}">&#xd;
          &lt;condition operator="like" type="accept" mode="${db_elementMode23}">${db_elementDim23}&lt;/condition>&#xd;
        &lt;/dimension>&#xd;
      &lt;/query>&#xd;
    &lt;/extract>&#xd;
    &lt;extract type="Dimension" name="INPUT_dim24" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;query>&#xd;
        &lt;dimension name="${db_dimension24}">&#xd;
          &lt;condition operator="like" type="accept" mode="${db_elementMode24}">${db_elementDim24}&lt;/condition>&#xd;
        &lt;/dimension>&#xd;
      &lt;/query>&#xd;
    &lt;/extract>&#xd;
    &lt;extract type="Dimension" name="INPUT_dim25" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;query>&#xd;
        &lt;dimension name="${db_dimension25}">&#xd;
          &lt;condition operator="like" type="accept" mode="${db_elementMode25}">${db_elementDim25}&lt;/condition>&#xd;
        &lt;/dimension>&#xd;
      &lt;/query>&#xd;
    &lt;/extract>&#xd;
    &lt;extract type="Dimension" name="INPUT_dim26" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;query>&#xd;
        &lt;dimension name="${db_dimension26}">&#xd;
          &lt;condition operator="like" type="accept" mode="${db_elementMode26}">${db_elementDim26}&lt;/condition>&#xd;
        &lt;/dimension>&#xd;
      &lt;/query>&#xd;
    &lt;/extract>&#xd;
    &lt;extract type="Dimension" name="INPUT_dim27" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;query>&#xd;
        &lt;dimension name="${db_dimension27}">&#xd;
          &lt;condition operator="like" type="accept" mode="${db_elementMode27}">${db_elementDim27}&lt;/condition>&#xd;
        &lt;/dimension>&#xd;
      &lt;/query>&#xd;
    &lt;/extract>&#xd;
    &lt;extract modified="1599657357196" name="INPUT_clearAccuracy" type="Cube" modifiedBy="peter">&#xd;
      &lt;comment>Accuracy data for clearing&#xd;
ADAPT for own dimensions&lt;/comment>&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;query celltype="only_string" drillthrough="false" onlyBasisAsDefault="false" useRules="false" zeroSuppressionType="excludeEmpty">&#xd;
        &lt;cube name="Accuracy_${sys_sourceCube}" />&#xd;
      &lt;/query>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/extract>&#xd;
    &lt;extract modified="1599657357196" name="INPUT_targetValues_clearJob" type="CubeSlice" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[Target data
ADAPT for own dimensions 
(Should be #aip_numValues * #aip_numLoops paths)
(In normal case: should be same as input, adapt only target version and time (#numValues in the future))]]&gt;&lt;/comment>&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;query mode="exclude" randomPaths="false">&#xd;
        &lt;dimensions>&#xd;
          &lt;dimension name="${db_dimensionVersion}">&#xd;
            &lt;condition operator="like" type="accept">&lt;![CDATA[^${db_elementTargetVersion}$|^${db_elementTargetVersion}_lower$|^${db_elementTargetVersion}_upper$]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimensionMeasure}">&#xd;
            &lt;condition operator="like" type="accept">&lt;![CDATA[${db_elementMeasure}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension1}">&#xd;
            &lt;condition mode="${db_elementMode1}" operator="like" type="accept">&lt;![CDATA[${db_elementDim1}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension2}">&#xd;
            &lt;condition mode="${db_elementMode2}" operator="like" type="accept">&lt;![CDATA[${db_elementDim2}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension3}">&#xd;
            &lt;condition mode="${db_elementMode3}" operator="like" type="accept">&lt;![CDATA[${db_elementDim3}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension4}">&#xd;
            &lt;condition mode="${db_elementMode4}" operator="like" type="accept">&lt;![CDATA[${db_elementDim4}]]&gt;&lt;/condition&gt;&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension5}">&#xd;
            &lt;condition mode="${db_elementMode5}" operator="like" type="accept">&lt;![CDATA[${db_elementDim5}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension6}">&#xd;
            &lt;condition mode="${db_elementMode6}" operator="like" type="accept">&lt;![CDATA[${db_elementDim6}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension7}">&#xd;
            &lt;condition mode="${db_elementMode7}" operator="like" type="accept">&lt;![CDATA[${db_elementDim7}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension8}">&#xd;
            &lt;condition mode="${db_elementMode8}" operator="like" type="accept">&lt;![CDATA[${db_elementDim8}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension9}">&#xd;
            &lt;condition mode="${db_elementMode9}" operator="like" type="accept">&lt;![CDATA[${db_elementDim9}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension10}">&#xd;
            &lt;condition mode="${db_elementMode10}" operator="like" type="accept">&lt;![CDATA[${db_elementDim10}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension11}">&#xd;
            &lt;condition mode="${db_elementMode11}" operator="like" type="accept">&lt;![CDATA[${db_elementDim11}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension12}">&#xd;
            &lt;condition mode="${db_elementMode12}" operator="like" type="accept">&lt;![CDATA[${db_elementDim12}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension13}">&#xd;
            &lt;condition mode="${db_elementMode13}" operator="like" type="accept">&lt;![CDATA[${db_elementDim13}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension14}">&#xd;
            &lt;condition mode="${db_elementMode14}" operator="like" type="accept">&lt;![CDATA[${db_elementDim14}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension15}">&#xd;
            &lt;condition mode="${db_elementMode15}" operator="like" type="accept">&lt;![CDATA[${db_elementDim15}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension16}">&#xd;
            &lt;condition mode="${db_elementMode16}" operator="like" type="accept">&lt;![CDATA[${db_elementDim16}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension17}">&#xd;
            &lt;condition mode="${db_elementMode17}" operator="like" type="accept">&lt;![CDATA[${db_elementDim17}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension18}">&#xd;
            &lt;condition mode="${db_elementMode18}" operator="like" type="accept">&lt;![CDATA[${db_elementDim18}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension19}">&#xd;
            &lt;condition mode="${db_elementMode19}" operator="like" type="accept">&lt;![CDATA[${db_elementDim19}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension20}">&#xd;
            &lt;condition mode="${db_elementMode20}" operator="like" type="accept">&lt;![CDATA[${db_elementDim20}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension21}">&#xd;
            &lt;condition mode="${db_elementMode21}" operator="like" type="accept">&lt;![CDATA[${db_elementDim21}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension22}">&#xd;
            &lt;condition mode="${db_elementMode22}" operator="like" type="accept">&lt;![CDATA[${db_elementDim22}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension23}">&#xd;
            &lt;condition mode="${db_elementMode23}" operator="like" type="accept">&lt;![CDATA[${db_elementDim23}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension24}">&#xd;
            &lt;condition mode="${db_elementMode24}" operator="like" type="accept">&lt;![CDATA[${db_elementDim24}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension25}">&#xd;
            &lt;condition mode="${db_elementMode25}" operator="like" type="accept">&lt;![CDATA[${db_elementDim25}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension26}">&#xd;
            &lt;condition mode="${db_elementMode26}" operator="like" type="accept">&lt;![CDATA[${db_elementDim26}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension27}">&#xd;
            &lt;condition mode="${db_elementMode27}" operator="like" type="accept">&lt;![CDATA[${db_elementDim27}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
        &lt;/dimensions>&#xd;
        &lt;cube name="${sys_sourceCube}" />&#xd;
      &lt;/query>&#xd;
    &lt;/extract>&#xd;
    &lt;extract modified="1599657357196" name="CT_accuracyFlag" type="ConstantTable" modifiedBy="peter">&#xd;
      &lt;data>&#xd;
        &lt;header>&#xd;
          &lt;value>flag&lt;/value>&#xd;
        &lt;/header>&#xd;
        &lt;row>&#xd;
          &lt;value>${sys_accuracyFlag}&lt;/value>&#xd;
        &lt;/row>&#xd;
      &lt;/data>&#xd;
    &lt;/extract>&#xd;
    &lt;extract modified="1599785338230" name="OUTPUT_rowCount" type="CubeSlice" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[Target data
ADAPT for own dimensions 
(Should be #aip_numValues * #aip_numLoops paths)
(In normal case: should be same as input, adapt only target version and time (#numValues in the future))]]&gt;&lt;/comment>&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;query mode="exclude" randomPaths="false">&#xd;
        &lt;dimensions>&#xd;
          &lt;dimension name="${db_dimensionVersion}">&#xd;
            &lt;condition operator="equal" type="accept">&lt;![CDATA[${db_elementTargetVersion}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimensionTime}">&#xd;
            &lt;condition operator="like" type="accept">&lt;![CDATA[${intern_extractTargetAccept_1}|${intern_extractTargetAccept_2}|${intern_extractTargetAccept_3}]]&gt;&lt;/condition>&#xd;
            &lt;condition operator="like" type="deny">&lt;![CDATA[${intern_extractTargetDeny_1}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimensionMeasure}">&#xd;
            &lt;condition operator="like" type="accept">&lt;![CDATA[${db_elementMeasure}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension1}">&#xd;
            &lt;condition mode="${db_elementMode1}" operator="like" type="accept">&lt;![CDATA[${db_elementDim1}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension2}">&#xd;
            &lt;condition mode="${db_elementMode2}" operator="like" type="accept">&lt;![CDATA[${db_elementDim2}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension3}">&#xd;
            &lt;condition mode="${db_elementMode3}" operator="like" type="accept">&lt;![CDATA[${db_elementDim3}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension4}">&#xd;
            &lt;condition mode="${db_elementMode4}" operator="like" type="accept">&lt;![CDATA[${db_elementDim4}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension5}">&#xd;
            &lt;condition mode="${db_elementMode5}" operator="like" type="accept">&lt;![CDATA[${db_elementDim5}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension6}">&#xd;
            &lt;condition mode="${db_elementMode6}" operator="like" type="accept">&lt;![CDATA[${db_elementDim6}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension7}">&#xd;
            &lt;condition mode="${db_elementMode7}" operator="like" type="accept">&lt;![CDATA[${db_elementDim7}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension8}">&#xd;
            &lt;condition mode="${db_elementMode8}" operator="like" type="accept">&lt;![CDATA[${db_elementDim8}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension9}">&#xd;
            &lt;condition mode="${db_elementMode9}" operator="like" type="accept">&lt;![CDATA[${db_elementDim9}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension10}">&#xd;
            &lt;condition mode="${db_elementMode10}" operator="like" type="accept">&lt;![CDATA[${db_elementDim10}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension11}">&#xd;
            &lt;condition mode="${db_elementMode11}" operator="like" type="accept">&lt;![CDATA[${db_elementDim11}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension12}">&#xd;
            &lt;condition mode="${db_elementMode12}" operator="like" type="accept">&lt;![CDATA[${db_elementDim12}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension13}">&#xd;
            &lt;condition mode="${db_elementMode13}" operator="like" type="accept">&lt;![CDATA[${db_elementDim13}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension14}">&#xd;
            &lt;condition mode="${db_elementMode14}" operator="like" type="accept">&lt;![CDATA[${db_elementDim14}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension15}">&#xd;
            &lt;condition mode="${db_elementMode15}" operator="like" type="accept">&lt;![CDATA[${db_elementDim15}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension16}">&#xd;
            &lt;condition mode="${db_elementMode16}" operator="like" type="accept">&lt;![CDATA[${db_elementDim16}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension17}">&#xd;
            &lt;condition mode="${db_elementMode17}" operator="like" type="accept">&lt;![CDATA[${db_elementDim17}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension18}">&#xd;
            &lt;condition mode="${db_elementMode18}" operator="like" type="accept">&lt;![CDATA[${db_elementDim18}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension19}">&#xd;
            &lt;condition mode="${db_elementMode19}" operator="like" type="accept">&lt;![CDATA[${db_elementDim19}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension20}">&#xd;
            &lt;condition mode="${db_elementMode20}" operator="like" type="accept">&lt;![CDATA[${db_elementDim20}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension21}">&#xd;
            &lt;condition mode="${db_elementMode21}" operator="like" type="accept">&lt;![CDATA[${db_elementDim21}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension22}">&#xd;
            &lt;condition mode="${db_elementMode22}" operator="like" type="accept">&lt;![CDATA[${db_elementDim22}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension23}">&#xd;
            &lt;condition mode="${db_elementMode23}" operator="like" type="accept">&lt;![CDATA[${db_elementDim23}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension24}">&#xd;
            &lt;condition mode="${db_elementMode24}" operator="like" type="accept">&lt;![CDATA[${db_elementDim24}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension25}">&#xd;
            &lt;condition mode="${db_elementMode25}" operator="like" type="accept">&lt;![CDATA[${db_elementDim25}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension26}">&#xd;
            &lt;condition mode="${db_elementMode26}" operator="like" type="accept">&lt;![CDATA[${db_elementDim26}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension27}">&#xd;
            &lt;condition mode="${db_elementMode27}" operator="like" type="accept">&lt;![CDATA[${db_elementDim27}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
        &lt;/dimensions>&#xd;
        &lt;cube name="${sys_sourceCube}" />&#xd;
      &lt;/query>&#xd;
    &lt;/extract>&#xd;
    &lt;extract modified="1599785450327" name="OUTPUT_targetValues" type="CubeSlice" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[Target data
ADAPT for own dimensions 
(Should be #aip_numValues * #aip_numLoops paths)
(In normal case: should be same as input, adapt only target version and time (#numValues in the future))]]&gt;&lt;/comment>&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;query mode="exclude" randomPaths="false">&#xd;
        &lt;dimensions>&#xd;
          &lt;dimension name="${db_dimensionVersion}">&#xd;
            &lt;condition operator="like" type="accept">&lt;![CDATA[^${db_elementTargetVersion}$|^${db_elementTargetVersion}_lower$|^${db_elementTargetVersion}_upper$]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimensionTime}">&#xd;
            &lt;condition operator="like" type="accept">&lt;![CDATA[${intern_extractTargetAccept_1}|${intern_extractTargetAccept_2}|${intern_extractTargetAccept_3}]]&gt;&lt;/condition>&#xd;
            &lt;condition operator="like" type="deny">&lt;![CDATA[${intern_extractTargetDeny_1}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimensionMeasure}">&#xd;
            &lt;condition operator="like" type="accept">&lt;![CDATA[${db_elementMeasure}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension1}">&#xd;
            &lt;condition mode="${db_elementMode1}" operator="like" type="accept">&lt;![CDATA[${db_elementDim1}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension2}">&#xd;
            &lt;condition mode="${db_elementMode2}" operator="like" type="accept">&lt;![CDATA[${db_elementDim2}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension3}">&#xd;
            &lt;condition mode="${db_elementMode3}" operator="like" type="accept">&lt;![CDATA[${db_elementDim3}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension4}">&#xd;
            &lt;condition mode="${db_elementMode4}" operator="like" type="accept">&lt;![CDATA[${db_elementDim4}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension5}">&#xd;
            &lt;condition mode="${db_elementMode5}" operator="like" type="accept">&lt;![CDATA[${db_elementDim5}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension6}">&#xd;
            &lt;condition mode="${db_elementMode6}" operator="like" type="accept">&lt;![CDATA[${db_elementDim6}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension7}">&#xd;
            &lt;condition mode="${db_elementMode7}" operator="like" type="accept">&lt;![CDATA[${db_elementDim7}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension8}">&#xd;
            &lt;condition mode="${db_elementMode8}" operator="like" type="accept">&lt;![CDATA[${db_elementDim8}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension9}">&#xd;
            &lt;condition mode="${db_elementMode9}" operator="like" type="accept">&lt;![CDATA[${db_elementDim9}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension10}">&#xd;
            &lt;condition mode="${db_elementMode10}" operator="like" type="accept">&lt;![CDATA[${db_elementDim10}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension11}">&#xd;
            &lt;condition mode="${db_elementMode11}" operator="like" type="accept">&lt;![CDATA[${db_elementDim11}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension12}">&#xd;
            &lt;condition mode="${db_elementMode12}" operator="like" type="accept">&lt;![CDATA[${db_elementDim12}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension13}">&#xd;
            &lt;condition mode="${db_elementMode13}" operator="like" type="accept">&lt;![CDATA[${db_elementDim13}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension14}">&#xd;
            &lt;condition mode="${db_elementMode14}" operator="like" type="accept">&lt;![CDATA[${db_elementDim14}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension15}">&#xd;
            &lt;condition mode="${db_elementMode15}" operator="like" type="accept">&lt;![CDATA[${db_elementDim15}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension16}">&#xd;
            &lt;condition mode="${db_elementMode16}" operator="like" type="accept">&lt;![CDATA[${db_elementDim16}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension17}">&#xd;
            &lt;condition mode="${db_elementMode17}" operator="like" type="accept">&lt;![CDATA[${db_elementDim17}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension18}">&#xd;
            &lt;condition mode="${db_elementMode18}" operator="like" type="accept">&lt;![CDATA[${db_elementDim18}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension19}">&#xd;
            &lt;condition mode="${db_elementMode19}" operator="like" type="accept">&lt;![CDATA[${db_elementDim19}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension20}">&#xd;
            &lt;condition mode="${db_elementMode20}" operator="like" type="accept">&lt;![CDATA[${db_elementDim20}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension21}">&#xd;
            &lt;condition mode="${db_elementMode21}" operator="like" type="accept">&lt;![CDATA[${db_elementDim21}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension22}">&#xd;
            &lt;condition mode="${db_elementMode22}" operator="like" type="accept">&lt;![CDATA[${db_elementDim22}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension23}">&#xd;
            &lt;condition mode="${db_elementMode23}" operator="like" type="accept">&lt;![CDATA[${db_elementDim23}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension24}">&#xd;
            &lt;condition mode="${db_elementMode24}" operator="like" type="accept">&lt;![CDATA[${db_elementDim24}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension25}">&#xd;
            &lt;condition mode="${db_elementMode25}" operator="like" type="accept">&lt;![CDATA[${db_elementDim25}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension26}">&#xd;
            &lt;condition mode="${db_elementMode26}" operator="like" type="accept">&lt;![CDATA[${db_elementDim26}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension27}">&#xd;
            &lt;condition mode="${db_elementMode27}" operator="like" type="accept">&lt;![CDATA[${db_elementDim27}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
        &lt;/dimensions>&#xd;
        &lt;cube name="${sys_sourceCube}" />&#xd;
      &lt;/query>&#xd;
    &lt;/extract>&#xd;
    &lt;extract modified="1599785054379" name="INPUT_sourceValues_outlier" type="Cube" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[Input data
ADAPT for own dimensions]]&gt;&lt;/comment>&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;query celltype="both" drillthrough="false" onlyBasisAsDefault="false" useRules="true" zeroSuppressionType="includeEmptyDefaultMapping">&#xd;
        &lt;dimensions>&#xd;
          &lt;dimension name="${db_dimensionVersion}">&#xd;
            &lt;condition operator="equal" type="accept">&lt;![CDATA[Outlier]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimensionTime}">&#xd;
            &lt;condition operator="like" type="accept">&lt;![CDATA[${intern_extractSourceAccept_1}|${intern_extractSourceAccept_2}|${intern_extractSourceAccept_3}]]&gt;&lt;/condition>&#xd;
            &lt;condition operator="like" type="deny">&lt;![CDATA[${intern_extractSourceDeny_1}|${intern_extractSourceDeny_3}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimensionMeasure}">&#xd;
            &lt;condition operator="like" type="accept">&lt;![CDATA[${db_elementMeasure}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension1}">&#xd;
            &lt;condition mode="${db_elementMode1}" operator="like" type="accept">&lt;![CDATA[${db_elementDim1}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension2}">&#xd;
            &lt;condition mode="${db_elementMode2}" operator="like" type="accept">&lt;![CDATA[${db_elementDim2}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension3}">&#xd;
            &lt;condition mode="${db_elementMode3}" operator="like" type="accept">&lt;![CDATA[${db_elementDim3}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension4}">&#xd;
            &lt;condition mode="${db_elementMode4}" operator="like" type="accept">&lt;![CDATA[${db_elementDim4}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension5}">&#xd;
            &lt;condition mode="${db_elementMode5}" operator="like" type="accept">&lt;![CDATA[${db_elementDim5}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension6}">&#xd;
            &lt;condition mode="${db_elementMode6}" operator="like" type="accept">&lt;![CDATA[${db_elementDim6}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension7}">&#xd;
            &lt;condition mode="${db_elementMode7}" operator="like" type="accept">&lt;![CDATA[${db_elementDim7}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension8}">&#xd;
            &lt;condition mode="${db_elementMode8}" operator="like" type="accept">&lt;![CDATA[${db_elementDim8}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension9}">&#xd;
            &lt;condition mode="${db_elementMode9}" operator="like" type="accept">&lt;![CDATA[${db_elementDim9}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension10}">&#xd;
            &lt;condition mode="${db_elementMode10}" operator="like" type="accept">&lt;![CDATA[${db_elementDim10}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension11}">&#xd;
            &lt;condition mode="${db_elementMode11}" operator="like" type="accept">&lt;![CDATA[${db_elementDim11}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension12}">&#xd;
            &lt;condition mode="${db_elementMode12}" operator="like" type="accept">&lt;![CDATA[${db_elementDim12}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension13}">&#xd;
            &lt;condition mode="${db_elementMode13}" operator="like" type="accept">&lt;![CDATA[${db_elementDim13}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension14}">&#xd;
            &lt;condition mode="${db_elementMode14}" operator="like" type="accept">&lt;![CDATA[${db_elementDim14}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension15}">&#xd;
            &lt;condition mode="${db_elementMode15}" operator="like" type="accept">&lt;![CDATA[${db_elementDim15}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension16}">&#xd;
            &lt;condition mode="${db_elementMode16}" operator="like" type="accept">&lt;![CDATA[${db_elementDim16}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension17}">&#xd;
            &lt;condition mode="${db_elementMode17}" operator="like" type="accept">&lt;![CDATA[${db_elementDim17}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension18}">&#xd;
            &lt;condition mode="${db_elementMode18}" operator="like" type="accept">&lt;![CDATA[${db_elementDim18}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension19}">&#xd;
            &lt;condition mode="${db_elementMode19}" operator="like" type="accept">&lt;![CDATA[${db_elementDim19}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension20}">&#xd;
            &lt;condition mode="${db_elementMode20}" operator="like" type="accept">&lt;![CDATA[${db_elementDim20}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension21}">&#xd;
            &lt;condition mode="${db_elementMode21}" operator="like" type="accept">&lt;![CDATA[${db_elementDim21}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension22}">&#xd;
            &lt;condition mode="${db_elementMode22}" operator="like" type="accept">&lt;![CDATA[${db_elementDim22}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension23}">&#xd;
            &lt;condition mode="${db_elementMode23}" operator="like" type="accept">&lt;![CDATA[${db_elementDim23}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension24}">&#xd;
            &lt;condition mode="${db_elementMode24}" operator="like" type="accept">&lt;![CDATA[${db_elementDim24}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension25}">&#xd;
            &lt;condition mode="${db_elementMode25}" operator="like" type="accept">&lt;![CDATA[${db_elementDim25}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension26}">&#xd;
            &lt;condition mode="${db_elementMode26}" operator="like" type="accept">&lt;![CDATA[${db_elementDim26}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
          &lt;dimension name="${db_dimension27}">&#xd;
            &lt;condition mode="${db_elementMode27}" operator="like" type="accept">&lt;![CDATA[${db_elementDim27}]]&gt;&lt;/condition>&#xd;
          &lt;/dimension>&#xd;
        &lt;/dimensions>&#xd;
        &lt;cube name="${sys_sourceCube}" />&#xd;
      &lt;/query>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/extract>&#xd;
    &lt;extract modified="1606301906248" name="AIP_extractResult_outlier" type="Json" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[Results from Jedox AIssisted Planning Web Service]]&gt;&lt;/comment>&#xd;
      &lt;connection nameref="AIP_functionCall_outlier${service_pod}" />&#xd;
      &lt;alias_map>&#xd;
        &lt;alias name="web_success">1&lt;/alias>&#xd;
        &lt;alias name="web_errorMessage">2&lt;/alias>&#xd;
        &lt;alias name="values">3&lt;/alias>&#xd;
        &lt;alias name="position">4&lt;/alias>&#xd;
        &lt;alias name="success">5&lt;/alias>&#xd;
        &lt;alias name="errorMessage">6&lt;/alias>&#xd;
      &lt;/alias_map>&#xd;
      &lt;query>&#xd;
        &lt;level>$&lt;/level>&#xd;
        &lt;fields>&#xd;
          &lt;field>success&lt;/field>&#xd;
          &lt;field>errorMessage&lt;/field>&#xd;
          &lt;field>outputParameters.values[0][0]&lt;/field>&#xd;
          &lt;field>outputParameters.values[0][1]&lt;/field>&#xd;
          &lt;field>outputParameters.values[1]&lt;/field>&#xd;
          &lt;field>outputParameters.values[2]&lt;/field>&#xd;
        &lt;/fields>&#xd;
      &lt;/query>&#xd;
      &lt;cache>true&lt;/cache>&#xd;
    &lt;/extract>&#xd;
    &lt;extract modified="1606300317005" name="VAR_service" type="ConstantTable" modifiedBy="peter">&#xd;
      &lt;data>&#xd;
        &lt;header>&#xd;
          &lt;value>Column1&lt;/value>&#xd;
          &lt;value>Column2&lt;/value>&#xd;
        &lt;/header>&#xd;
        &lt;row>&#xd;
          &lt;value>${service_protocol}://${service_combinedURL}/${service_api}/${service_function}/${service_version}&lt;/value>&#xd;
          &lt;value>${service_pod}&lt;/value>&#xd;
        &lt;/row>&#xd;
      &lt;/data>&#xd;
    &lt;/extract>&#xd;
  &lt;/extracts>&#xd;
  &lt;transforms>&#xd;
    &lt;transform modified="1599657357196" name="FT_indexTarget" type="FieldTransform" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[Add row numbers for table join.
ADAPT: If using the extended dimension version change the Data Source to "PM_SP_SORT_cube_target_extended"]]&gt;&lt;/comment>&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="TV_sortTargetVersions" />&#xd;
      &lt;/sources>&#xd;
      &lt;functions>&#xd;
        &lt;function name="§§§row§§§" type="RowNumber">&#xd;
          &lt;parameters />&#xd;
        &lt;/function>&#xd;
      &lt;/functions>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="FT_indexOutput" type="FieldTransform" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[add rownumbers for table join]]&gt;&lt;/comment>&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="FN_output" />&#xd;
      &lt;/sources>&#xd;
      &lt;functions>&#xd;
        &lt;function name="§§§row§§§" type="RowNumber">&#xd;
          &lt;parameters />&#xd;
        &lt;/function>&#xd;
      &lt;/functions>&#xd;
      &lt;target>&#xd;
        &lt;coordinates>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="values" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="§§§row§§§" />&#xd;
          &lt;/coordinate>&#xd;
        &lt;/coordinates>&#xd;
      &lt;/target>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="TJ_mergeOutput" type="TableJoin" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[Join target dimensions and result values.]]&gt;&lt;/comment>&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="FT_indexTarget" />&#xd;
        &lt;source nameref="FT_indexOutput" />&#xd;
      &lt;/sources>&#xd;
      &lt;joins persist="false">&#xd;
        &lt;join allColumns="false" unique="false"&gt;&#xd;
          &lt;left nameref="FT_indexTarget">&#xd;
            &lt;key nameref="§§§row§§§" />&#xd;
          &lt;/left>&#xd;
          &lt;right nameref="FT_indexOutput">&#xd;
            &lt;key nameref="§§§row§§§" />&#xd;
          &lt;/right>&#xd;
          &lt;conditions>&#xd;
            &lt;condition type="eq" />&#xd;
          &lt;/conditions>&#xd;
        &lt;/join>&#xd;
      &lt;/joins>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1610982842497" name="FT_processForecast" type="FieldTransform" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[Arrange dimensions in correct format for writing results to the cube.
ADAPT for own dimensions]]&gt;&lt;/comment>&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="TV_filterZeros" />&#xd;
      &lt;/sources>&#xd;
      &lt;target>&#xd;
        &lt;coordinates exclude="^§§§row§§§$|^#Value$|^date_sort$" include="." />&#xd;
      &lt;/target>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" modifiedBy="peter" name="FT_trimOutputUpperLower" type="FieldTransform">&#xd;
      &lt;comment>Trim result values.&lt;/comment>&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="AIP_extractResult" />&#xd;
      &lt;/sources>&#xd;
      &lt;functions>&#xd;
        &lt;function name="split1" type="Split">&#xd;
          &lt;inputs>&#xd;
            &lt;input nameref="predict_values" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;occurence>1&lt;/occurence>&#xd;
            &lt;separator>[&lt;/separator>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="prediction" type="Split">&#xd;
          &lt;inputs>&#xd;
            &lt;input nameref="split1" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;occurence>1&lt;/occurence>&#xd;
            &lt;separator>]&lt;/separator>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="acc_split" type="Split">&#xd;
          &lt;inputs>&#xd;
            &lt;input nameref="accuracy_values" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;occurence>1&lt;/occurence>&#xd;
            &lt;separator>[&lt;/separator>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="accuracy" type="Split">&#xd;
          &lt;inputs>&#xd;
            &lt;input nameref="acc_split" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;occurence>1&lt;/occurence>&#xd;
            &lt;separator>]&lt;/separator>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="low_split" type="Split">&#xd;
          &lt;inputs>&#xd;
            &lt;input nameref="lowerBound_values" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;occurence>1&lt;/occurence>&#xd;
            &lt;separator>[&lt;/separator>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="lowerBound" type="Split">&#xd;
          &lt;inputs>&#xd;
            &lt;input nameref="low_split" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;occurence>1&lt;/occurence>&#xd;
            &lt;separator>]&lt;/separator>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="upp_split" type="Split">&#xd;
          &lt;inputs>&#xd;
            &lt;input nameref="upperBound_values" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;occurence>1&lt;/occurence>&#xd;
            &lt;separator>[&lt;/separator>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="upperBound" type="Split">&#xd;
          &lt;inputs>&#xd;
            &lt;input nameref="upp_split" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;occurence>1&lt;/occurence>&#xd;
            &lt;separator>]&lt;/separator>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="values" type="Concatenation">&#xd;
          &lt;inputs>&#xd;
            &lt;input nameref="prediction" />&#xd;
            &lt;input nameref="lowerBound" />&#xd;
            &lt;input nameref="upperBound" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;delimiter>,&lt;/delimiter>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
      &lt;/functions>&#xd;
      &lt;target>&#xd;
        &lt;coordinates>&#xd;
          &lt;coordinate name="values">&#xd;
            &lt;input nameref="values" />&#xd;
          &lt;/coordinate>&#xd;
        &lt;/coordinates>&#xd;
      &lt;/target>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="TV_sortInput" type="TableView" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[Inputs have to be sorted (time, measures...)
ADAPT for own dimensions
${intern_rowStop}
${intern_rowStart}]]&gt;&lt;/comment>&#xd;
      &lt;start>${intern_rowStartInput}&lt;/start>&#xd;
      &lt;end>${intern_rowStopInput}&lt;/end>&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="FT_dateTransformInput" />&#xd;
      &lt;/sources>&#xd;
      &lt;sorter>&#xd;
        &lt;input nameref="${db_dimensionVersion}" order="asc" />&#xd;
        &lt;input nameref="${db_dimensionMeasure}" order="asc" />&#xd;
        &lt;input nameref="${db_dimension1}" order="asc" />&#xd;
        &lt;input nameref="${db_dimension2}" order="asc" />&#xd;
        &lt;input nameref="${db_dimension3}" order="asc" />&#xd;
        &lt;input nameref="${db_dimension4}" />&#xd;
        &lt;input nameref="${db_dimension5}" />&#xd;
        &lt;input nameref="${db_dimension6}" />&#xd;
        &lt;input nameref="${db_dimension7}" />&#xd;
        &lt;input nameref="${db_dimension8}" />&#xd;
        &lt;input nameref="${db_dimension9}" />&#xd;
        &lt;input nameref="${db_dimension10}" />&#xd;
        &lt;input nameref="${db_dimension11}" />&#xd;
        &lt;input nameref="${db_dimension12}" />&#xd;
        &lt;input nameref="${db_dimension13}" />&#xd;
        &lt;input nameref="${db_dimension14}" />&#xd;
        &lt;input nameref="${db_dimension15}" />&#xd;
        &lt;input nameref="${db_dimension16}" />&#xd;
        &lt;input nameref="${db_dimension17}" />&#xd;
        &lt;input nameref="${db_dimension18}" />&#xd;
        &lt;input nameref="${db_dimension19}" />&#xd;
        &lt;input nameref="${db_dimension20}" />&#xd;
        &lt;input nameref="${db_dimension21}" />&#xd;
        &lt;input nameref="${db_dimension22}" />&#xd;
        &lt;input nameref="${db_dimension23}" />&#xd;
        &lt;input nameref="${db_dimension24}" />&#xd;
        &lt;input nameref="${db_dimension25}" />&#xd;
        &lt;input nameref="${db_dimension26}" />&#xd;
        &lt;input nameref="${db_dimension27}" />&#xd;
        &lt;input nameref="date_sort" order="asc" />&#xd;
      &lt;/sorter>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="TV_sortTarget" type="TableView" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[Paths for output have to be sorted in the same way as the input (time, measure....)
ADAPT for own dimensions]]&gt;&lt;/comment>&#xd;
      &lt;start>${intern_rowStart}&lt;/start>&#xd;
      &lt;end>${intern_rowStop}&lt;/end>&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="FT_dateTransformTarget" />&#xd;
      &lt;/sources>&#xd;
      &lt;sorter>&#xd;
        &lt;input nameref="${db_dimensionMeasure}" />&#xd;
        &lt;input nameref="${db_dimension1}" />&#xd;
        &lt;input nameref="${db_dimension2}" />&#xd;
        &lt;input nameref="${db_dimension3}" />&#xd;
        &lt;input nameref="${db_dimension4}" />&#xd;
        &lt;input nameref="${db_dimension5}" />&#xd;
        &lt;input nameref="${db_dimension6}" />&#xd;
        &lt;input nameref="${db_dimension7}" />&#xd;
        &lt;input nameref="${db_dimension8}" />&#xd;
        &lt;input nameref="${db_dimension9}" />&#xd;
        &lt;input nameref="${db_dimension10}" />&#xd;
        &lt;input nameref="${db_dimension11}" />&#xd;
        &lt;input nameref="${db_dimension12}" />&#xd;
        &lt;input nameref="${db_dimension13}" />&#xd;
        &lt;input nameref="${db_dimension14}" />&#xd;
        &lt;input nameref="${db_dimension15}" />&#xd;
        &lt;input nameref="${db_dimension16}" />&#xd;
        &lt;input nameref="${db_dimension17}" />&#xd;
        &lt;input nameref="${db_dimension18}" />&#xd;
        &lt;input nameref="${db_dimension19}" />&#xd;
        &lt;input nameref="${db_dimension20}" />&#xd;
        &lt;input nameref="${db_dimension21}" />&#xd;
        &lt;input nameref="${db_dimension22}" />&#xd;
        &lt;input nameref="${db_dimension23}" />&#xd;
        &lt;input nameref="${db_dimension24}" />&#xd;
        &lt;input nameref="${db_dimension25}" />&#xd;
        &lt;input nameref="${db_dimension26}" />&#xd;
        &lt;input nameref="${db_dimension27}" />&#xd;
        &lt;input nameref="${db_dimensionVersion}" />&#xd;
        &lt;input nameref="date_sort" />&#xd;
      &lt;/sorter>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" modifiedBy="peter" name="FN_output" type="FieldNormalization">&#xd;
      &lt;comment>Transform Comma separated values from Web service result into a column where each value is in a separate row.&lt;/comment>&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="FT_trimOutputUpperLower" />&#xd;
      &lt;/sources>&#xd;
      &lt;splitColumnName>values&lt;/splitColumnName>&#xd;
      &lt;delimiter>,&lt;/delimiter>&#xd;
      &lt;ignoreEmpty>false&lt;/ignoreEmpty>&#xd;
      &lt;ignoreDuplicates>false&lt;/ignoreDuplicates>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="TA_input" type="TableAggregation" modifiedBy="peter">&#xd;
      &lt;comment>Convert a column with a value in each row into a single string with comma separated values (this format is required for the web service).&#xd;
ADAPT: If using the extended dimension version change the Data Source to "PM_SP_SORT_cube_input_extended"&lt;/comment>&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="TV_sortInput" />&#xd;
      &lt;/sources>&#xd;
      &lt;target>&#xd;
        &lt;coordinates keepSourceOrder="true" />&#xd;
        &lt;measures>&#xd;
          &lt;measure aggregate="group_concat" name="aip_inputValues">&#xd;
            &lt;input nameref="#Value" />&#xd;
          &lt;/measure>&#xd;
          &lt;measure aggregate="sum" name="sum">&#xd;
            &lt;input nameref="#Value" />&#xd;
          &lt;/measure>&#xd;
        &lt;/measures>&#xd;
      &lt;/target>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="FT_variablesStaticTokenInput" type="FieldTransform" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[Input for Loop job containing variables.
Calculates all the time related variables automatically.]]&gt;&lt;/comment>&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="AIP_extractToken" />&#xd;
      &lt;/sources>&#xd;
      &lt;functions>&#xd;
        &lt;function name="format_date" type="DateFormat">&#xd;
          &lt;inputs>&#xd;
            &lt;input constant="${time_elementStart}" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;targetformat>${intern_dateFormat}&lt;/targetformat>&#xd;
            &lt;sourceformat>${time_dateFormatSourceMonthly}&lt;/sourceformat>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_firstTrgYear" type="DateFormat">&#xd;
          &lt;inputs>&#xd;
            &lt;input nameref="format_date" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;targetformat>yyyy&lt;/targetformat>&#xd;
            &lt;sourceformat>${intern_dateFormat}&lt;/sourceformat>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_firstDbYear" type="DateFormat">&#xd;
          &lt;inputs>&#xd;
            &lt;input constant="${time_inputStartDate}" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;targetformat>yyyy&lt;/targetformat>&#xd;
            &lt;sourceformat>${time_currentFormat}&lt;/sourceformat>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_numPeriods" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input nameref="intern_firstTrgYear" type="int" />&#xd;
            &lt;input nameref="intern_firstDbYear" type="int" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>false&lt;/buffered>&#xd;
            &lt;type>int&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[dif = intern_firstTrgYear-intern_firstDbYear;
if (dif > 0)
	return dif;
else
	return 1;]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_firstMonth" type="DateFormat">&#xd;
          &lt;inputs>&#xd;
            &lt;input constant="${time_inputStartDate}" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;targetformat>MM&lt;/targetformat>&#xd;
            &lt;sourceformat>${time_currentFormat}&lt;/sourceformat>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_firstTargetMonth" type="DateFormat">&#xd;
          &lt;inputs>&#xd;
            &lt;input constant="${time_elementStart}" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;targetformat>MM&lt;/targetformat>&#xd;
            &lt;sourceformat>${time_dateFormatSourceMonthly}&lt;/sourceformat>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_periodEnd" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="strVal" constant="${ext_numValues}" type="String" />&#xd;
            &lt;input alias="elemEnd" constant="${time_elementEnd}" type="String" />&#xd;
            &lt;input alias="date" nameref="format_date" type="String" />&#xd;
            &lt;input alias="internFormat" constant="${intern_dateFormat}" type="String" />&#xd;
            &lt;input alias="usedFormat" constant="${time_dateFormatSourceMonthly}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[import groovy.time.TimeCategory;

Date e;
if(elemEnd=="")
{

  Date d = Date.parse(internFormat, date);

  use(TimeCategory) {

  e = d + (strVal.toInteger()-1).months; 

  }

}

else {

 e = Date.parse(usedFormat, elemEnd);
}

return e.format(internFormat);]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_lastTrgYear" type="DateFormat">&#xd;
          &lt;inputs>&#xd;
            &lt;input nameref="intern_periodEnd" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;targetformat>yyyy&lt;/targetformat>&#xd;
            &lt;sourceformat>${intern_dateFormat}&lt;/sourceformat>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_srcYearRange" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input nameref="intern_numPeriods" type="int" />&#xd;
            &lt;input alias="intern_firstMonth" nameref="intern_firstTargetMonth" type="String" />&#xd;
            &lt;input nameref="intern_firstTrgYear" type="String" />&#xd;
            &lt;input alias="firstDbYear" nameref="intern_firstDbYear" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[srcYearRng = "(" + firstDbYear;
int firstDBYear = firstDbYear.toInteger();
for(i=1;i&lt;intern_numPeriods;i++){

 srcYearRng =  srcYearRng+"|"+(firstDBYear+i);

}
if(intern_firstMonth == "01")

{

  srcYearRng = srcYearRng + ")";

}

else

{

  srcYearRng = srcYearRng +"|"+ intern_firstTrgYear + ")";

}

return srcYearRng;]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_lastTargetMonth" type="DateFormat">&#xd;
          &lt;inputs>&#xd;
            &lt;input nameref="intern_periodEnd" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;targetformat>MM&lt;/targetformat>&#xd;
            &lt;sourceformat>${intern_dateFormat}&lt;/sourceformat>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="rng_blockSrcBeginning" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="intern_firstMonth" nameref="intern_firstMonth" type="int" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if(intern_firstMonth==1)

  return "§";

nval = 12+12-intern_firstMonth+1; // full year plus rest of year

rolling = "(";

for (i = 1; i &lt;intern_firstMonth; i++)

{

  if(i&lt;2)

  rolling += "${time_leadingZero}"+"1";

  else if(i&lt;10)

  rolling = rolling+"|"+"${time_leadingZero}"+i;

  else

  rolling = rolling+"|"+i;

}

rolling +=")";

return rolling;]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="rng_blockSrcEnd" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="intern_firstMonth" nameref="intern_firstTargetMonth" type="int" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[nval = 12+12-intern_firstMonth+1; // full year plus rest of year

rolling = "(";

//first month

first = intern_firstMonth;

if(first > 12)

  return "§";

if(first &lt;2)

  rolling += "${time_leadingZero}"+"1";

  else if(first &lt;10)

  rolling = rolling+"${time_leadingZero}"+first;

  else

  rolling = rolling+""+first;

for (i = intern_firstMonth+1; i &lt;=12; i++)

{

  if(i&lt;2)

  rolling += "${time_leadingZero}1";

  else if(i&lt;10)

  rolling = rolling+"|${time_leadingZero}"+i;

  else

  rolling = rolling+"|"+i;

}

rolling +=")";

return rolling;]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="rng_blockTrgBeginning" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="lastTrgMonth" nameref="intern_lastTargetMonth" type="int" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[nval = 12+12-lastTrgMonth+1; // full year plus rest of year
rolling = "(";

//first month

first = lastTrgMonth+1;

if(first > 12)

  return "§";

if(first &lt;2)

  rolling += "${time_leadingZero}"+"1";

  else if(first &lt;10)

  rolling = rolling+"${time_leadingZero}"+first;

  else

  rolling = rolling+""+first;

for (i = lastTrgMonth+2; i &lt;=12; i++)

{

  if(i&lt;2)

  rolling += "${time_leadingZero}1";

  else if(i&lt;10)

  rolling = rolling+"|${time_leadingZero}"+i;

  else

  rolling = rolling+"|"+i;

}

rolling +=")";

return rolling;]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="rng_blockTrgEnd" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="intern_firstMonth" nameref="intern_firstTargetMonth" type="int" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if(intern_firstMonth==1)

  return "§";

nval = 12+12-intern_firstMonth+1; // full year plus rest of year

rolling = "(";

for (i = 1; i &lt;intern_firstMonth; i++)

{

  if(i&lt;2)

  rolling += "${time_leadingZero}"+"1";

  else if(i&lt;10)

  rolling = rolling+"|"+"${time_leadingZero}"+i;

  else

  rolling = rolling+"|"+i;

}

rolling +=")";

return rolling;]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_trgtYearRange" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input nameref="intern_firstTrgYear" type="int" />&#xd;
            &lt;input nameref="intern_lastTrgYear" type="int" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[range = intern_lastTrgYear-intern_firstTrgYear;
trgtRng = "("+intern_firstTrgYear;
for(i=1;i&lt;=range;i++)
{
  trgtRng+= "|"+(intern_firstTrgYear+i) ;
}

return trgtRng+")";]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_numValues" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="firstYear" nameref="intern_firstTrgYear" type="int" />&#xd;
            &lt;input alias="lastYear" nameref="intern_lastTrgYear" type="int" />&#xd;
            &lt;input alias="firstMonth" nameref="intern_firstTargetMonth" type="int" />&#xd;
            &lt;input alias="lastMonth" nameref="intern_lastTargetMonth" type="int" />&#xd;
            &lt;input alias="daily" constant="${time_dateDailySeparator}" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>int&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[points = 0;

if(firstYear==lastYear){

  points = 1 + lastMonth-firstMonth;

} else{

  points = 1+(lastMonth + ((lastYear-firstYear)*12)) - firstMonth;

}
if(daily != "\$"){

  points = points * 31;

}
return points;]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_extractSourceAccept" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="year" nameref="intern_srcYearRange" type="String" />&#xd;
            &lt;input alias="sep" constant="${time_dateSeparator}" type="String" />&#xd;
            &lt;input alias="day" constant="${time_dateDailySeparator}" type="String" />&#xd;
            &lt;input alias="month" constant="${time_yearRegExpAccept}" type="String" />&#xd;
            &lt;input alias="format" constant="${time_dateFormatSourceMonthly}" type="String" />&#xd;
            &lt;input alias="dailyFormat" constant="${time_dateFormatSourceDaily}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[// which position is year, which month, which days
arr = format.split("\\" + sep);
if (day == "\$") {
  if (arr[0].toUpperCase().contains("M")){
  return "^" + month + sep + year + day
}
  else {
  return "^" + year + sep + month + day
  }
}
else{
df = dailyFormat.split("\\" + sep);
def resultArr = new String[3];
  for (i = 0; i &lt; 3; i++){
    if (df[i].toUpperCase().contains("M")) {
    resultArr[i] = month
    }
    else if (df[i].toUpperCase().contains("D")) {
    resultArr[i] = "[0-3][0-9]"  
    }
    else {
    resultArr[i] = year
    } 
  }
return resultArr.join(sep);  
}]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_extractSourceDeny" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="year1" nameref="intern_srcYearRange" />&#xd;
            &lt;input alias="sep" constant="${time_dateSeparator}" />&#xd;
            &lt;input alias="month1" constant="${time_yearRegExpDeny}" />&#xd;
            &lt;input alias="year2" nameref="intern_firstTrgYear" />&#xd;
            &lt;input alias="month2" nameref="rng_blockSrcEnd" />&#xd;
            &lt;input alias="year3" nameref="intern_firstDbYear" />&#xd;
            &lt;input alias="month3" nameref="rng_blockSrcBeginning" />&#xd;
            &lt;input alias="day" constant="${time_dateDailySeparator}" />&#xd;
            &lt;input alias="dailyFormat" constant="${time_dateFormatSourceDaily}" />&#xd;
            &lt;input alias="format" constant="${time_dateFormatSourceMonthly}" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[arr = format.split("\\" + sep);

if (day == "\$") {
  if (arr[0].toUpperCase().contains("M")){
  //Don't need to care for days for s1.
  s1 = month1 + sep + year1;
  s2 = month2 + sep + year2 + day;
  s3 = month3 + sep + year3 + day;
  }
  else {
  s1 = year1 + sep + month1; 
  s2 = year2 + sep + month2 + day;
  s3 = year3 + sep + month3 + day;
  }
}
else{
df = dailyFormat.split("\\" + sep);
s1 = new String[3];
s2 = new String[3];
s3 = new String[3];

  for (i = 0; i &lt; 3; i++){
    if (df[i].toUpperCase().contains("M")) {
    s1[i] = month1;
    s2[i] = month2;
    s3[i] = month3;
    }
    else if (df[i].toUpperCase().contains("D")) {
    s2[i] = day;
    s3[i] = day;    
    }
    else if (df[i].toUpperCase().contains("Y")){
    s1[i] = year1;
    s2[i] = year2;
    s3[i] = year3;
    } 
  }
  s1 = s1 - null;
  s1 = s1.join(sep);
  s2 = s2.join(sep);
  s3 = s3.join(sep);
  
}
return s1 + "|" + s2 +"|"+ s3 ;

//////////////////////////////////////]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_extractTargetAccept" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="year" nameref="intern_trgtYearRange" type="String" />&#xd;
            &lt;input alias="sep" constant="${time_dateSeparator}" type="String" />&#xd;
            &lt;input alias="day" constant="${time_dateDailySeparator}" type="String" />&#xd;
            &lt;input alias="month" constant="${time_yearRegExpAccept}" type="String" />&#xd;
            &lt;input alias="format" constant="${time_dateFormatSourceMonthly}" type="String" />&#xd;
            &lt;input alias="dailyFormat" constant="${time_dateFormatSourceDaily}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[// which position is year, which month, which days
arr = format.split("\\" + sep);
if (day == "\$") {
  if (arr[0].toUpperCase().contains("M")){
  return "^" + month + sep + year + day
}
  else {
  return "^" + year + sep + month + day 
  }
}
else{
df = dailyFormat.split("\\" + sep);
def resultArr = new String[3];
  for (i = 0; i &lt; 3; i++){
    if (df[i].toUpperCase().contains("M")) {
    resultArr[i] = month
    }
    else if (df[i].toUpperCase().contains("D")) {
    resultArr[i] =  "[0-3][0-9]"       
    }
    else {
    resultArr[i] = year
    } 
  }
return resultArr.join(sep);  
}]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_extractTargetDeny" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="year1" nameref="intern_trgtYearRange" />&#xd;
            &lt;input alias="sep" constant="${time_dateSeparator}" />&#xd;
            &lt;input alias="month1" constant="${time_yearRegExpDeny}" />&#xd;
            &lt;input alias="year2" nameref="intern_firstTrgYear" />&#xd;
            &lt;input alias="month2" nameref="rng_blockTrgEnd" />&#xd;
            &lt;input alias="year3" nameref="intern_lastTrgYear" />&#xd;
            &lt;input alias="month3" nameref="rng_blockTrgBeginning" />&#xd;
            &lt;input alias="day" constant="${time_dateDailySeparator}" />&#xd;
            &lt;input alias="dailyFormat" constant="${time_dateFormatSourceDaily}" />&#xd;
            &lt;input alias="format" constant="${time_dateFormatSourceMonthly}" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[arr = format.split("\\" + sep);

if (day == "\$") {
  if (arr[0].toUpperCase().contains("M")){
  //Don't need to care for days for s1.
  s1 = month1 + sep + year1;
  s2 = month2 + sep + year2 + day;
  s3 = month3 + sep + year3 + day;
  }
  else {
  s1 = year1 + sep + month1; 
  s2 = year2 + sep + month2 + day;
  s3 = year3 + sep + month3 + day;
  }
}
else{
df = dailyFormat.split("\\" + sep);
s1 = new String[3];
s2 = new String[3];
s3 = new String[3];

  for (i = 0; i &lt; 3; i++){
    if (df[i].toUpperCase().contains("M")) {
    s1[i] = month1;
    s2[i] = month2;
    s3[i] = month3;
    }
    else if (df[i].toUpperCase().contains("D")) {
    s2[i] = day;
    s3[i] = day;    
    }
    else if (df[i].toUpperCase().contains("Y")){
    s1[i] = year1;
    s2[i] = year2;
    s3[i] = year3;
    } 
  }
  s1 = s1 - null;
  s1 = s1.join(sep);
  s2 = s2.join(sep);
  s3 = s3.join(sep);
  
}
return s1 + "|" + s2 +"|"+ s3 ;

//////////////////////////////////////]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_extractCopyAccept" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="year" nameref="intern_trgtYearRange" type="String" />&#xd;
            &lt;input alias="sep" constant="${time_dateSeparator}" type="String" />&#xd;
            &lt;input alias="month" constant="${time_yearRegExpAccept}" type="String" />&#xd;
            &lt;input alias="format" constant="${time_dateFormatSourceMonthly}" type="String" />&#xd;
            &lt;input alias="dailyFormat" constant="${time_dateFormatSourceDaily}" type="String" />&#xd;
            &lt;input alias="targetAccept" nameref="intern_extractTargetAccept" type="String" />&#xd;
            &lt;input alias="copyByWeekday" constant="${intern_copyByWeekday}" type="int" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[if(copyByWeekday == 1)
	return targetAccept;
else {
// which position is year, which month, which days
arr = format.split("\\" + sep);
  if (arr[0].toUpperCase().contains("M")){
  return "^" + month + sep + year + "\$";
}
  else {
  return "^" + year + sep + month + "\$"; 
  }
}
return "";]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_extractCopyDeny" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="year1" nameref="intern_trgtYearRange" />&#xd;
            &lt;input alias="sep" constant="${time_dateSeparator}" />&#xd;
            &lt;input alias="month1" constant="${time_yearRegExpDeny}" />&#xd;
            &lt;input alias="year2" nameref="intern_firstTrgYear" />&#xd;
            &lt;input alias="month2" nameref="rng_blockTrgEnd" />&#xd;
            &lt;input alias="year3" nameref="intern_lastTrgYear" />&#xd;
            &lt;input alias="month3" nameref="rng_blockTrgBeginning" />&#xd;
            &lt;input alias="day" constant="$" />&#xd;
            &lt;input alias="format" constant="${time_dateFormatSourceMonthly}" />&#xd;
            &lt;input alias="targetDeny" nameref="intern_extractTargetDeny" type="String" />&#xd;
            &lt;input alias="copyByWeekday" constant="${intern_copyByWeekday}" type="int" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[if(copyByWeekday == 1)
	return targetDeny;
else {
	arr = format.split("\\" + sep);

	if (arr[0].toUpperCase().contains("M")){
	//Don't need to care for days for s1.
	  s1 = month1 + sep + year1;
	  s2 = month2 + sep + year2 + day;
	  s3 = month3 + sep + year3 + day;
	}
	else {
	  s1 = year1 + sep + month1; 
	  s2 = year2 + sep + month2 + day;
	  s3 = year3 + sep + month3 + day;
	}

	return s1 + "|" + s2 +"|"+ s3 ;
}
return "";]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_dateFormat" type="Switch">&#xd;
          &lt;inputs>&#xd;
            &lt;input constant="${time_dateDailySeparator}" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;default>&#xd;
              &lt;result constant="yyyyMM" />&#xd;
            &lt;/default>&#xd;
            &lt;switchs>&#xd;
              &lt;switch>&#xd;
                &lt;condition operator="equal" type="accept" value="$" />&#xd;
                &lt;result constant="yyyyMM" />&#xd;
              &lt;/switch>&#xd;
              &lt;switch>&#xd;
                &lt;condition operator="equal" type="accept" value="(..)" />&#xd;
                &lt;result constant="yyyyMMdd" />&#xd;
              &lt;/switch>&#xd;
            &lt;/switchs>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_inputRange" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="date1" constant="${time_elementStart}" type="String" />&#xd;
            &lt;input alias="date2" constant="${time_inputStartDate}" type="String" />&#xd;
            &lt;input alias="internFormat" constant="${time_dateFormatSourceMonthly}" type="String" />&#xd;
            &lt;input alias="daily" constant="${time_dateDailySeparator}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>int&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[import groovy.time.TimeCategory;

Date d1 = Date.parse(internFormat, date1);
Date d2 = Date.parse(internFormat, date2);

if(daily == "\$") {
	years = ((int)d1.year-(int)d2.year)*12;
	months = (int)d1.month-(int)d2.month;
	return years + months;
}
else
	return d1-d2;]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="period" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="a" constant="${ext_period}" type="float" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>int&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[return a;]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_dateCopyFormat" type="Switch">&#xd;
          &lt;inputs>&#xd;
            &lt;input constant="${intern_copyByWeekday}" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;default>&#xd;
              &lt;result constant="${intern_copyDaysMonthlySort}" />&#xd;
            &lt;/default>&#xd;
            &lt;switchs>&#xd;
              &lt;switch>&#xd;
                &lt;condition operator="equal" type="accept" value="1" />&#xd;
                &lt;result constant="${intern_dateFormat}" />&#xd;
              &lt;/switch>&#xd;
            &lt;/switchs>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_copyDaysFormat" type="Switch">&#xd;
          &lt;inputs>&#xd;
            &lt;input constant="${intern_copyByWeekday}" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;default>&#xd;
              &lt;result constant="${time_dateFormatSourceMonthly}" />&#xd;
            &lt;/default>&#xd;
            &lt;switchs>&#xd;
              &lt;switch>&#xd;
                &lt;condition operator="equal" type="accept" value="1" />&#xd;
                &lt;result constant="${time_currentFormat}" />&#xd;
              &lt;/switch>&#xd;
            &lt;/switchs>&#xd;
          &lt;/parameters&gt;&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_maxSeries" type="Switch">&#xd;
          &lt;inputs>&#xd;
            &lt;input constant="${time_dateDailySeparator}" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;switchs>&#xd;
              &lt;switch>&#xd;
                &lt;condition operator="like" type="accept" value="(..)" />&#xd;
                &lt;result constant="2" />&#xd;
              &lt;/switch>&#xd;
            &lt;/switchs>&#xd;
            &lt;default>&#xd;
              &lt;result constant="${intern_maxSeries}" />&#xd;
            &lt;/default>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
      &lt;/functions>&#xd;
      &lt;target>&#xd;
        &lt;coordinates>&#xd;
          &lt;coordinate name="intern_bearer">&#xd;
            &lt;input nameref="access_token" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate name="aip_numPeriods">&#xd;
            &lt;input nameref="intern_numPeriods" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate name="time_elementEnd">&#xd;
            &lt;input nameref="intern_periodEnd" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_extractSourceAccept" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_extractSourceDeny" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_extractTargetAccept" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_extractTargetDeny" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_extractCopyAccept" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_extractCopyDeny" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_dateFormat" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_inputRange" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate name="aip_period">&#xd;
            &lt;input nameref="period" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_dateCopyFormat" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_copyDaysFormat" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_maxSeries" />&#xd;
          &lt;/coordinate>&#xd;
        &lt;/coordinates>&#xd;
      &lt;/target>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="FT_splitAccuracy" type="FieldTransform" modifiedBy="peter">&#xd;
      &lt;comment>Only needed if you want to store accuracy&lt;/comment>&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="AIP_extractResult" />&#xd;
      &lt;/sources>&#xd;
      &lt;functions>&#xd;
        &lt;function name="split1" type="Split">&#xd;
          &lt;inputs>&#xd;
            &lt;input nameref="accuracy_values" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;occurence>1&lt;/occurence>&#xd;
            &lt;separator>[&lt;/separator>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="values" type="Split">&#xd;
          &lt;inputs>&#xd;
            &lt;input nameref="split1" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;occurence>1&lt;/occurence>&#xd;
            &lt;separator>]&lt;/separator>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
      &lt;/functions>&#xd;
      &lt;target>&#xd;
        &lt;coordinates>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="values" />&#xd;
          &lt;/coordinate>&#xd;
        &lt;/coordinates>&#xd;
      &lt;/target>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="TLE_DIM_addAccuracy" type="TreeLE" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="CT_addAcuracyDim" />&#xd;
      &lt;/sources>&#xd;
      &lt;target>&#xd;
        &lt;element>&#xd;
          &lt;input nameref="Accuracy" />&#xd;
        &lt;/element>&#xd;
        &lt;level>&#xd;
          &lt;input constant="1" />&#xd;
        &lt;/level>&#xd;
        &lt;weight>&#xd;
          &lt;input constant="1" />&#xd;
        &lt;/weight>&#xd;
        &lt;type>&#xd;
          &lt;input nameref=":nodetype" />&#xd;
        &lt;/type>&#xd;
      &lt;/target>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="FT_processCopy" type="FieldTransform" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[Arrange dimensions in correct format for writing results to the cube.
ADAPT for own dimensions]]&gt;&lt;/comment>&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="TV_sortCopy" />&#xd;
      &lt;/sources>&#xd;
      &lt;functions>&#xd;
        &lt;function name="sourceMonth" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="dateOfPrediction" nameref="${db_dimensionTime}" type="Date" />&#xd;
            &lt;input alias="startDate" constant="${time_elementStart}" type="Date" />&#xd;
            &lt;input alias="formatMonthly" constant="${time_dateFormatSourceMonthly}" type="String" />&#xd;
            &lt;input alias="formatCurrent" constant="${time_currentFormat}" type="String" />&#xd;
            &lt;input alias="daily" constant="${time_dateDailySeparator}" type="String" />&#xd;
            &lt;input alias="copyByWeekday" constant="${intern_copyByWeekday}" type="int" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[import groovy.time.TimeCategory;

use (groovy.time.TimeCategory) {
Date date;
if(copyByWeekday > 0) 
	date = Date.parse(formatCurrent, dateOfPrediction);
else
  date = Date.parse(formatMonthly, dateOfPrediction);
Date sDate = Date.parse(formatMonthly,startDate);

Date prevYear = sDate-1.year;

yDiff = date.format("yyyy").toInteger()-prevYear.format("yyyy").toInteger();

def diffMonths = { Date start, Date end ->
    int diffYears = (start[Calendar.YEAR] - end[Calendar.YEAR]) * 12 
    int diffMonths = start[Calendar.MONTH] - end[Calendar.MONTH] 
    return diffYears + diffMonths
}
  
int yDiff = diffMonths(date,prevYear)/12;
//monthly
if(daily == "\$"){

// year from -365 days
Date resDate = date.minus(365*yDiff);
res = resDate.format(formatCurrent);
return res;
}
// daily
else {
  	// daily copy
    if(copyByWeekday > 0)  {
	  Date resDate = date.minus(364*yDiff);
	  res = resDate.format(formatCurrent);
	  return res;
	}
  // monthly copy
  else {
	Date resDate = date.minus(365*yDiff);
	res = resDate.format(formatMonthly);
	return res;
  }
}
return "";
}]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
      &lt;/functions>&#xd;
      &lt;target>&#xd;
        &lt;coordinates exclude="^#Value$|date_sort" include=".">&#xd;
          &lt;coordinate name="sourceMonth">&#xd;
            &lt;input nameref="sourceMonth" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate name="sourceVersion">&#xd;
            &lt;input constant="${db_elementVersion}" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate name="targetVersion">&#xd;
            &lt;input nameref="${db_dimensionVersion}" />&#xd;
          &lt;/coordinate>&#xd;
        &lt;/coordinates>&#xd;
      &lt;/target>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="FT_dateTransformInput" type="FieldTransform" modifiedBy="peter">&#xd;
      &lt;comment>Adds date column which can be sorted for input&lt;/comment>&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="INPUT_sourceValues" />&#xd;
      &lt;/sources>&#xd;
      &lt;functions>&#xd;
        &lt;function name="date_sort" type="DateFormat">&#xd;
          &lt;inputs>&#xd;
            &lt;input nameref="${db_dimensionTime}" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;sourceformat>${time_currentFormat}&lt;/sourceformat>&#xd;
            &lt;targetformat>${intern_dateFormat}&lt;/targetformat>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
      &lt;/functions>&#xd;
      &lt;target>&#xd;
        &lt;coordinates include="." />&#xd;
      &lt;/target>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="FT_dateTransformTarget" type="FieldTransform" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[Adds date column which can be sorted for target]]&gt;&lt;/comment>&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="OUTPUT_targetWithValues" />&#xd;
      &lt;/sources>&#xd;
      &lt;functions>&#xd;
        &lt;function name="date_sort" type="DateFormat">&#xd;
          &lt;inputs>&#xd;
            &lt;input nameref="${db_dimensionTime}" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;targetformat>${intern_dateFormat}&lt;/targetformat>&#xd;
            &lt;sourceformat>${time_currentFormat}&lt;/sourceformat>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
      &lt;/functions>&#xd;
      &lt;target>&#xd;
        &lt;coordinates exclude="date_current|date_daily" include="." />&#xd;
      &lt;/target>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1610982735635" name="TV_filterZeros" type="TableView" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="TJ_mergeOutput" />&#xd;
      &lt;/sources>&#xd;
      &lt;filter>&#xd;
        &lt;input nameref="#Value">&#xd;
          &lt;condition operator="inRange" type="deny" value="[-0.001,0.001]" />&#xd;
        &lt;/input>&#xd;
      &lt;/filter>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="FT_switchControlResult" type="FieldTransform" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="AIP_extractResult" />&#xd;
      &lt;/sources>&#xd;
      &lt;functions>&#xd;
        &lt;function name="success" type="Split">&#xd;
          &lt;inputs>&#xd;
            &lt;input nameref="success" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;occurence>2&lt;/occurence>&#xd;
            &lt;separator>"&lt;/separator>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="switchInput" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input nameref="success" type="String" />&#xd;
            &lt;input nameref="web_success" type="boolean" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>int&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if(web_success == false || success != "True")

	return 0;

else if( "${sys_accuracyFlag}" == "" || "${sys_accuracyFlag}" == "0" )

  	return 2;

else

  return 1;]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="errorMessage" type="Split">&#xd;
          &lt;inputs>&#xd;
            &lt;input nameref="errorMessage" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;occurence>2&lt;/occurence>&#xd;
            &lt;separator>"&lt;/separator>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="combinedErrorMessage" type="Concatenation">&#xd;
          &lt;inputs>&#xd;
            &lt;input nameref="success" />&#xd;
            &lt;input nameref="web_errorMessage" />&#xd;
            &lt;input nameref="errorMessage" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;delimiter>§&lt;/delimiter>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
      &lt;/functions>&#xd;
      &lt;target>&#xd;
        &lt;coordinates>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="predict_values" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="accuracy_values" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="lowerBound_values" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="upperBound_values" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="success" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="combinedErrorMessage" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="switchInput" />&#xd;
          &lt;/coordinate>&#xd;
        &lt;/coordinates>&#xd;
      &lt;/target>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1610459049183" name="FT_roundValues" type="FieldTransform" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="TJ_mergeOutput" />&#xd;
      &lt;/sources>&#xd;
      &lt;functions>&#xd;
        &lt;function name="values1" type="NumberFormat">&#xd;
          &lt;inputs>&#xd;
            &lt;input nameref="values" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;pattern>0.0000&lt;/pattern>&#xd;
            &lt;moveSign>left&lt;/moveSign>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="values2" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="fff" nameref="values1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[sign = fff.substring(0,1);
res = sign =~ /d/;
if (res)
	return res[0];
else
  return "-"+fff.substring(1);]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
      &lt;/functions>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="TD_macroVariables" type="TableDenormalization" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="INPUT_reportVariables" />&#xd;
      &lt;/sources>&#xd;
      &lt;target>&#xd;
        &lt;coordinates keepSourceOrder="false" />&#xd;
        &lt;measures aggregate="first" denormalize="${sys_configParameters}" source="FT_macroVariables" valuename="#Value" />&#xd;
      &lt;/target>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="FT_macroVariables" type="FieldTransform" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="INPUT_reportVariables" />&#xd;
      &lt;/sources>&#xd;
      &lt;target>&#xd;
        &lt;coordinates include="${sys_configParameters}" />&#xd;
      &lt;/target>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="TA_countInput" type="TableAggregation" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="INPUT_accuracyTarget" />&#xd;
      &lt;/sources>&#xd;
      &lt;target>&#xd;
        &lt;coordinates keepSourceOrder="false" />&#xd;
        &lt;measures>&#xd;
          &lt;measure aggregate="count" name="Count" type="text">&#xd;
            &lt;input nameref="${db_dimensionMeasure}" />&#xd;
          &lt;/measure>&#xd;
        &lt;/measures>&#xd;
      &lt;/target>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1606303073104" name="FT_macroVariablesDimLoop" type="FieldTransform" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="TD_macroVariables" />&#xd;
      &lt;/sources>&#xd;
      &lt;functions>&#xd;
        &lt;function name="service_pod" type="Switch">&#xd;
          &lt;inputs>&#xd;
            &lt;input constant="${sys_AIssistedURL}" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;switchs>&#xd;
              &lt;switch>&#xd;
                &lt;condition operator="equal" type="accept" value="jedox" />&#xd;
                &lt;result constant="_pod" />&#xd;
              &lt;/switch>&#xd;
            &lt;/switchs>&#xd;
            &lt;default>&#xd;
              &lt;result constant="" />&#xd;
            &lt;/default>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="dim1" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimName1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[return d]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="dim2" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimName2" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimName1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="dim3" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimName3" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimName1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="dim4" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimName4" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimName1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="dim5" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimName5" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimName1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="dim6" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimName6" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimName1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="dim7" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimName7" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimName1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="dim8" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimName8" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimName1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="dim9" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimName9" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimName1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="dim10" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimName10" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimName1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="dim11" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimName11" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimName1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="dim12" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimName12" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimName1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="dim13" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimName13" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimName1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="dim14" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimName14" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimName1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="dim15" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimName15" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimName1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="dim16" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimName16" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimName1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="dim17" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimName17" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimName1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="dim18" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimName18" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimName1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="dim19" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimName19" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimName1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="dim20" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimName20" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimName1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="dim21" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimName21" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimName1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="dim22" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimName22" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimName1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="dim23" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimName23" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimName1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="dim24" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimName24" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimName1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="dim25" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimName25" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimName1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="dim26" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimName26" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimName1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="dim27" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimName27" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimName1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="elem1" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimValueRegexed1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[return d1]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="elem2" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimValueRegexed2" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimValueRegexed1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="elem3" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimValueRegexed3" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimValueRegexed1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="elem4" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimValueRegexed4" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimValueRegexed1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="elem5" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimValueRegexed5" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimValueRegexed1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="elem6" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimValueRegexed6" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimValueRegexed1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="elem7" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimValueRegexed7" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimValueRegexed1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="elem8" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimValueRegexed8" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimValueRegexed1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="elem9" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimValueRegexed9" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimValueRegexed1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="elem10" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimValueRegexed10" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimValueRegexed1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="elem11" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimValueRegexed11" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimValueRegexed1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="elem12" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimValueRegexed12" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimValueRegexed1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="elem13" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimValueRegexed13" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimValueRegexed1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="elem14" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimValueRegexed14" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimValueRegexed1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="elem15" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimValueRegexed15" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimValueRegexed1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="elem16" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimValueRegexed16" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimValueRegexed1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="elem17" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimValueRegexed17" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimValueRegexed1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="elem18" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimValueRegexed18" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimValueRegexed1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="elem19" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimValueRegexed19" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimValueRegexed1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="elem20" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimValueRegexed20" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimValueRegexed1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="elem21" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimValueRegexed21" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimValueRegexed1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="elem22" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimValueRegexed22" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimValueRegexed1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="elem23" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimValueRegexed23" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimValueRegexed1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="elem24" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimValueRegexed24" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimValueRegexed1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="elem25" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimValueRegexed25" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimValueRegexed1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="elem26" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimValueRegexed26" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimValueRegexed1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="elem27" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimValueRegexed27" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimValueRegexed1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="mode1" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimMode1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[return d1]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="mode2" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimMode2" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimMode1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="mode3" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimMode3" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimMode1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="mode4" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimMode4" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimMode1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="mode5" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimMode5" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimMode1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="mode6" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimMode6" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimMode1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="mode7" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimMode7" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimMode1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="mode8" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimMode8" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimMode1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="mode9" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimMode9" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimMode1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="mode10" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimMode10" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimMode1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="mode11" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimMode11" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimMode1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="mode12" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimMode12" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimMode1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="mode13" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimMode13" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimMode1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="mode14" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimMode14" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimMode1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="mode15" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimMode15" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimMode1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="mode16" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimMode16" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimMode1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="mode17" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimMode17" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimMode1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="mode18" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimMode18" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimMode1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="mode19" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimMode19" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimMode1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="mode20" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimMode20" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimMode1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="mode21" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimMode21" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimMode1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="mode22" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimMode22" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimMode1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="mode23" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimMode23" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimMode1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="mode24" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimMode24" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimMode1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="mode25" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimMode25" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimMode1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="mode26" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimMode26" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimMode1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="mode27" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="d" nameref="${sys_prefix}OtherDimMode27" type="String" />&#xd;
            &lt;input alias="d1" nameref="${sys_prefix}OtherDimMode1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (d){

  return d

}else{

  return d1

}]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="inputEnd" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="inputEnd" nameref="${sys_prefix}TimeValueEnd" type="String" />&#xd;
            &lt;input alias="format" nameref="${sys_prefix}DateFormat" type="String" />&#xd;
            &lt;input alias="usePrev" nameref="${sys_prefix}UsePreviousMonth" type="int" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[import groovy.time.TimeCategory;

if(usePrev){
  cur = new Date();
  use(TimeCategory) {
  	cur = cur - 1.month;
  }
  return cur.format(format);
}
else
  return inputEnd;]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="outputStart" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="outputStart" nameref="${sys_prefix}PredictionDurationStart" type="String" />&#xd;
            &lt;input alias="format" nameref="${sys_prefix}DateFormat" type="String" />&#xd;
            &lt;input alias="usePrev" nameref="${sys_prefix}UsePreviousMonth" type="int" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[if(usePrev){
  cur = new Date();
  return cur.format(format);
}
else
  return outputStart;]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="outputEnd" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="outputEnd" nameref="${sys_prefix}PredictionDurationEnd" type="String" />&#xd;
            &lt;input alias="format" nameref="${sys_prefix}DateFormat" type="String" />&#xd;
            &lt;input alias="duration" nameref="${sys_prefix}PredictionDuration" type="String" />&#xd;
            &lt;input alias="usePrev" nameref="${sys_prefix}UsePreviousMonth" type="int" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[import groovy.time.TimeCategory;

if(usePrev){
  dur = duration.toInteger();
  cur = new Date();
  use(TimeCategory) {
  	cur = cur + dur.month;
	cur = cur - 1.month;
  }
  return cur.format(format);
}
else
  return outputEnd;]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
      &lt;/functions>&#xd;
      &lt;target>&#xd;
        &lt;coordinates exclude="${sys_prefix}OtherDim" include=".">&#xd;
          &lt;coordinate name="${sys_prefix}TimeValueEnd">&#xd;
            &lt;input nameref="inputEnd" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate name="${sys_prefix}PredictionDurationStart">&#xd;
            &lt;input nameref="outputStart" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate name="${sys_prefix}PredictionDurationEnd">&#xd;
            &lt;input nameref="outputEnd" />&#xd;
          &lt;/coordinate>&#xd;
        &lt;/coordinates>&#xd;
      &lt;/target>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="FT_accuracyAddIndex" type="FieldTransform" modifiedBy="peter">&#xd;
      &lt;comment>add rownumbers for table join&lt;/comment>&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="FN_accuracyValues" />&#xd;
      &lt;/sources>&#xd;
      &lt;functions>&#xd;
        &lt;function name="number" type="RowNumber">&#xd;
          &lt;parameters />&#xd;
        &lt;/function>&#xd;
      &lt;/functions>&#xd;
      &lt;target>&#xd;
        &lt;coordinates include=".">&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="number" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate name="#Value">&#xd;
            &lt;input nameref="values" />&#xd;
          &lt;/coordinate>&#xd;
        &lt;/coordinates>&#xd;
      &lt;/target>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="FN_accuracyValues" type="FieldNormalization" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="FT_splitAccuracy" />&#xd;
      &lt;/sources>&#xd;
      &lt;splitColumnName>values&lt;/splitColumnName>&#xd;
      &lt;delimiter>,&lt;/delimiter>&#xd;
      &lt;ignoreEmpty>false&lt;/ignoreEmpty>&#xd;
      &lt;ignoreDuplicates>false&lt;/ignoreDuplicates>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="TJ_mergeAccuracyAndDIms" type="TableJoin" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="FT_accuracyDimsAddIndex" />&#xd;
        &lt;source nameref="FT_accuracyAddIndex" />&#xd;
      &lt;/sources>&#xd;
      &lt;joins persist="false">&#xd;
        &lt;join allColumns="false" type="inner" unique="false">&#xd;
          &lt;left nameref="FT_accuracyDimsAddIndex">&#xd;
            &lt;key nameref="number" />&#xd;
          &lt;/left>&#xd;
          &lt;right nameref="FT_accuracyAddIndex">&#xd;
            &lt;key nameref="number" />&#xd;
          &lt;/right>&#xd;
          &lt;conditions>&#xd;
            &lt;condition type="eq" />&#xd;
          &lt;/conditions>&#xd;
        &lt;/join>&#xd;
      &lt;/joins>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="FT_accuracyDimsAddIndex" type="FieldTransform" modifiedBy="peter">&#xd;
      &lt;comment>add rownumbers for table join&lt;/comment>&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="TN_createAccuracy" />&#xd;
      &lt;/sources>&#xd;
      &lt;functions>&#xd;
        &lt;function name="number" type="RowNumber">&#xd;
          &lt;parameters />&#xd;
        &lt;/function>&#xd;
      &lt;/functions>&#xd;
      &lt;target>&#xd;
        &lt;coordinates include="." />&#xd;
      &lt;/target>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="FT_accuracy" type="FieldTransform" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[add rownumbers for table join]]&gt;&lt;/comment>&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="TJ_mergeAccuracyAndDIms" />&#xd;
      &lt;/sources>&#xd;
      &lt;target>&#xd;
        &lt;coordinates exclude="number|index|${db_dimensionTime}|#Values" include="." />&#xd;
      &lt;/target>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="TN_createAccuracy" type="TableNormalization" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[Normalization for accuracy
ADAPT for own dimensions]]&gt;&lt;/comment>&#xd;
      &lt;ignoreEmpty>false&lt;/ignoreEmpty>&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="INPUT_accuracyTarget" />&#xd;
      &lt;/sources>&#xd;
      &lt;target>&#xd;
        &lt;coordinates exclude="#Value$|${db_dimensionTime}" include="." keepSourceOrder="false" />&#xd;
        &lt;measures normalize="${intern_accuracyDim}" valuename="#Values">&#xd;
          &lt;measure name="Linear Model" type="text">&#xd;
            &lt;input constant="0" />&#xd;
          &lt;/measure>&#xd;
          &lt;measure name="Holt Winters" type="text">&#xd;
            &lt;input constant="0" />&#xd;
          &lt;/measure>&#xd;
          &lt;measure name="Seasonal Naive" type="text">&#xd;
            &lt;input constant="0" />&#xd;
          &lt;/measure>&#xd;
          &lt;measure name="Exponential Smoothening" type="text">&#xd;
            &lt;input constant="0" />&#xd;
          &lt;/measure>&#xd;
          &lt;measure name="ARIMA" type="text">&#xd;
            &lt;input constant="0" />&#xd;
          &lt;/measure>&#xd;
          &lt;measure name="Random Walk with Drift" type="text">&#xd;
            &lt;input constant="0" />&#xd;
          &lt;/measure>&#xd;
          &lt;measure name="STL Model" type="text">&#xd;
            &lt;input constant="0" />&#xd;
          &lt;/measure>&#xd;
          &lt;measure name="STLF" type="text">&#xd;
            &lt;input constant="0" />&#xd;
          &lt;/measure>&#xd;
          &lt;measure name="Neural Network TAR" type="text">&#xd;
            &lt;input constant="0" />&#xd;
          &lt;/measure>&#xd;
          &lt;measure name="TBATS" type="text">&#xd;
            &lt;input constant="0" />&#xd;
          &lt;/measure>&#xd;
          &lt;measure name="Croston's Method" type="text">&#xd;
            &lt;input constant="0" />&#xd;
          &lt;/measure>&#xd;
          &lt;measure name="Extrapolation" type="text">&#xd;
            &lt;input constant="0" />&#xd;
          &lt;/measure>&#xd;
        &lt;/measures>&#xd;
      &lt;/target>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="FT_computeChunks" type="FieldTransform" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="TA_countInput" />&#xd;
      &lt;/sources>&#xd;
      &lt;functions>&#xd;
        &lt;function name="Count_c" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input nameref="Count" type="int" />&#xd;
            &lt;input alias="factor" constant="${intern_orderFactor}" type="int" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
            &lt;script>&lt;![CDATA[return Count/factor;]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="chunkStart" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="c" nameref="Count_c" type="int" />&#xd;
            &lt;input alias="m" constant="${intern_maxSeries}" type="int" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[s = '';
for (int i=0;i &lt; c; i+=m){
  s = s + Integer.toString(i) + ',';
}
s =s.substring(0, s.length()-1)]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
      &lt;/functions>&#xd;
      &lt;target>&#xd;
        &lt;coordinates>&#xd;
          &lt;coordinate name="Count">&#xd;
            &lt;input nameref="Count_c" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="chunkStart" />&#xd;
          &lt;/coordinate>&#xd;
        &lt;/coordinates>&#xd;
      &lt;/target>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform&gt;&#xd;
    &lt;transform modified="1599657357196" name="FN_convertChunks" type="FieldNormalization" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="FT_computeChunks" />&#xd;
      &lt;/sources>&#xd;
      &lt;splitColumnName>chunkStart&lt;/splitColumnName>&#xd;
      &lt;delimiter>,&lt;/delimiter>&#xd;
      &lt;ignoreEmpty>false&lt;/ignoreEmpty>&#xd;
      &lt;ignoreDuplicates>false&lt;/ignoreDuplicates>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="FT_addChunkSize" type="FieldTransform" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="TJ_chunkSize" />&#xd;
      &lt;/sources>&#xd;
      &lt;functions>&#xd;
        &lt;function name="intern_seriesStart" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input nameref="chunkStart" type="int" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>int&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[return chunkStart + 1]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function&gt;&#xd;
        &lt;function name="aip_numSeries" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="c" nameref="Count" type="int" />&#xd;
            &lt;input alias="i" nameref="intern_seriesStart" type="int" />&#xd;
            &lt;input alias="m" constant="${intern_maxSeries}" type="int" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>int&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (i + m > c &amp;&amp; c % m != 0){

  return c % m

}else{

  return m

}]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_outputRange" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="outputRows" nameref="outputRows" type="int" />&#xd;
            &lt;input alias="numInputs" nameref="Count" type="int" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>int&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[return outputRows/numInputs;]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_seriesStop" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="i" nameref="chunkStart" type="int" />&#xd;
            &lt;input alias="a" nameref="aip_numSeries" type="int" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>int&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[return i + a]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_rowStart" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="i" nameref="chunkStart" type="int" />&#xd;
            &lt;input alias="p" nameref="intern_outputRange" type="int" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>int&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[return (p*3) * i + 1]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_rowStop" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="i" nameref="intern_rowStart" type="int" />&#xd;
            &lt;input alias="n" nameref="intern_outputRange" type="int" />&#xd;
            &lt;input alias="s" nameref="aip_numSeries" type="int" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;type>int&lt;/type>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
            &lt;script>&lt;![CDATA[return i-1 + s*n * 3;
//i * p * n * d;]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_rowStopInput" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="i" nameref="intern_seriesStop" type="int" />&#xd;
            &lt;input alias="d" constant="${intern_inputRange}" type="int" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>int&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[return i * d;
//i * p * n * d;]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_rowStartInput" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="i" nameref="chunkStart" type="int" />&#xd;
            &lt;input alias="p" constant="${intern_inputRange}" type="int" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>int&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[return i * p +1]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
      &lt;/functions>&#xd;
      &lt;target>&#xd;
        &lt;coordinates exclude="^chunkStart$" include="_">&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="aip_numSeries" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_seriesStart" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_seriesStop" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_rowStart" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_rowStop" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate name="intern_rowCount">&#xd;
            &lt;input nameref="Count" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_rowStartInput" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_rowStopInput" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate name="aip_numValues">&#xd;
            &lt;input nameref="intern_outputRange" />&#xd;
          &lt;/coordinate>&#xd;
        &lt;/coordinates>&#xd;
      &lt;/target>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="TV_filterChunk" type="TableView" modifiedBy="peter">&#xd;
      &lt;start>${intern_chunkStart}&lt;/start>&#xd;
      &lt;end>${intern_chunkStop}&lt;/end>&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="TN_createAccuracy" />&#xd;
      &lt;/sources>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform type="TableAggregation" name="TA_dim1" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="INPUT_dim1" format="ea" />&#xd;
      &lt;/sources>&#xd;
      &lt;target>&#xd;
        &lt;coordinates keepSourceOrder="false">&#xd;
          &lt;coordinate name="level1">&#xd;
            &lt;input nameref=":element" />&#xd;
          &lt;/coordinate>&#xd;
        &lt;/coordinates>&#xd;
      &lt;/target>&#xd;
    &lt;/transform>&#xd;
    &lt;transform type="TableAggregation" name="TA_dim2" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="INPUT_dim2" format="ea" />&#xd;
      &lt;/sources>&#xd;
      &lt;target>&#xd;
        &lt;coordinates keepSourceOrder="false">&#xd;
          &lt;coordinate name="level1">&#xd;
            &lt;input nameref=":element" />&#xd;
          &lt;/coordinate>&#xd;
        &lt;/coordinates>&#xd;
      &lt;/target>&#xd;
    &lt;/transform>&#xd;
    &lt;transform type="TableAggregation" name="TA_dim3" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="INPUT_dim3" format="ea" />&#xd;
      &lt;/sources>&#xd;
      &lt;target>&#xd;
        &lt;coordinates keepSourceOrder="false">&#xd;
          &lt;coordinate name="level1">&#xd;
            &lt;input nameref=":element" />&#xd;
          &lt;/coordinate>&#xd;
        &lt;/coordinates>&#xd;
      &lt;/target>&#xd;
    &lt;/transform>&#xd;
    &lt;transform type="TableAggregation" name="TA_dim4" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="INPUT_dim4" format="ea" />&#xd;
      &lt;/sources>&#xd;
      &lt;target>&#xd;
        &lt;coordinates keepSourceOrder="false">&#xd;
          &lt;coordinate name="level1">&#xd;
            &lt;input nameref=":element" />&#xd;
          &lt;/coordinate>&#xd;
        &lt;/coordinates>&#xd;
      &lt;/target>&#xd;
    &lt;/transform>&#xd;
    &lt;transform type="TableAggregation" name="TA_dim5" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="INPUT_dim5" format="ea" />&#xd;
      &lt;/sources>&#xd;
      &lt;target>&#xd;
        &lt;coordinates keepSourceOrder="false">&#xd;
          &lt;coordinate name="level1">&#xd;
            &lt;input nameref=":element" />&#xd;
          &lt;/coordinate>&#xd;
        &lt;/coordinates>&#xd;
      &lt;/target>&#xd;
    &lt;/transform>&#xd;
    &lt;transform type="TableAggregation" name="TA_dim6" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="INPUT_dim6" format="ea" />&#xd;
      &lt;/sources>&#xd;
      &lt;target>&#xd;
        &lt;coordinates keepSourceOrder="false">&#xd;
          &lt;coordinate name="level1">&#xd;
            &lt;input nameref=":element" />&#xd;
          &lt;/coordinate>&#xd;
        &lt;/coordinates>&#xd;
      &lt;/target>&#xd;
    &lt;/transform>&#xd;
    &lt;transform type="TableAggregation" name="TA_dim7" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="INPUT_dim7" format="ea" />&#xd;
      &lt;/sources>&#xd;
      &lt;target>&#xd;
        &lt;coordinates keepSourceOrder="false">&#xd;
          &lt;coordinate name="level1">&#xd;
            &lt;input nameref=":element" />&#xd;
          &lt;/coordinate>&#xd;
        &lt;/coordinates>&#xd;
      &lt;/target>&#xd;
    &lt;/transform>&#xd;
    &lt;transform type="TableAggregation" name="TA_dim8" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="INPUT_dim8" format="ea" />&#xd;
      &lt;/sources>&#xd;
      &lt;target>&#xd;
        &lt;coordinates keepSourceOrder="false">&#xd;
          &lt;coordinate name="level1">&#xd;
            &lt;input nameref=":element" />&#xd;
          &lt;/coordinate>&#xd;
        &lt;/coordinates>&#xd;
      &lt;/target>&#xd;
    &lt;/transform>&#xd;
    &lt;transform type="TableAggregation" name="TA_dim9" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="INPUT_dim9" format="ea" />&#xd;
      &lt;/sources>&#xd;
      &lt;target>&#xd;
        &lt;coordinates keepSourceOrder="false">&#xd;
          &lt;coordinate name="level1">&#xd;
            &lt;input nameref=":element" />&#xd;
          &lt;/coordinate>&#xd;
        &lt;/coordinates>&#xd;
      &lt;/target>&#xd;
    &lt;/transform>&#xd;
    &lt;transform type="TableAggregation" name="TA_dim10" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="INPUT_dim10" format="ea" />&#xd;
      &lt;/sources>&#xd;
      &lt;target>&#xd;
        &lt;coordinates keepSourceOrder="false">&#xd;
          &lt;coordinate name="level1">&#xd;
            &lt;input nameref=":element" />&#xd;
          &lt;/coordinate>&#xd;
        &lt;/coordinates>&#xd;
      &lt;/target>&#xd;
    &lt;/transform>&#xd;
    &lt;transform type="TableAggregation" name="TA_dim11" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="INPUT_dim11" format="ea" />&#xd;
      &lt;/sources>&#xd;
      &lt;target>&#xd;
        &lt;coordinates keepSourceOrder="false">&#xd;
          &lt;coordinate name="level1">&#xd;
            &lt;input nameref=":element" />&#xd;
          &lt;/coordinate>&#xd;
        &lt;/coordinates>&#xd;
      &lt;/target>&#xd;
    &lt;/transform>&#xd;
    &lt;transform type="TableAggregation" name="TA_dim12" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="INPUT_dim12" format="ea" />&#xd;
      &lt;/sources>&#xd;
      &lt;target>&#xd;
        &lt;coordinates keepSourceOrder="false">&#xd;
          &lt;coordinate name="level1">&#xd;
            &lt;input nameref=":element" />&#xd;
          &lt;/coordinate>&#xd;
        &lt;/coordinates>&#xd;
      &lt;/target>&#xd;
    &lt;/transform>&#xd;
    &lt;transform type="TableAggregation" name="TA_dim13" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="INPUT_dim13" format="ea" />&#xd;
      &lt;/sources>&#xd;
      &lt;target>&#xd;
        &lt;coordinates keepSourceOrder="false">&#xd;
          &lt;coordinate name="level1">&#xd;
            &lt;input nameref=":element" />&#xd;
          &lt;/coordinate>&#xd;
        &lt;/coordinates>&#xd;
      &lt;/target>&#xd;
    &lt;/transform>&#xd;
    &lt;transform type="TableAggregation" name="TA_dim14" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="INPUT_dim14" format="ea" />&#xd;
      &lt;/sources>&#xd;
      &lt;target>&#xd;
        &lt;coordinates keepSourceOrder="false">&#xd;
          &lt;coordinate name="level1">&#xd;
            &lt;input nameref=":element" />&#xd;
          &lt;/coordinate>&#xd;
        &lt;/coordinates>&#xd;
      &lt;/target>&#xd;
    &lt;/transform>&#xd;
    &lt;transform type="TableAggregation" name="TA_dim15" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="INPUT_dim15" format="ea" />&#xd;
      &lt;/sources>&#xd;
      &lt;target>&#xd;
        &lt;coordinates keepSourceOrder="false">&#xd;
          &lt;coordinate name="level1">&#xd;
            &lt;input nameref=":element" />&#xd;
          &lt;/coordinate>&#xd;
        &lt;/coordinates>&#xd;
      &lt;/target>&#xd;
    &lt;/transform>&#xd;
    &lt;transform type="TableAggregation" name="TA_dim16" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="INPUT_dim16" format="ea" />&#xd;
      &lt;/sources>&#xd;
      &lt;target>&#xd;
        &lt;coordinates keepSourceOrder="false">&#xd;
          &lt;coordinate name="level1">&#xd;
            &lt;input nameref=":element" />&#xd;
          &lt;/coordinate>&#xd;
        &lt;/coordinates>&#xd;
      &lt;/target>&#xd;
    &lt;/transform>&#xd;
    &lt;transform type="TableAggregation" name="TA_dim17" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="INPUT_dim17" format="ea" />&#xd;
      &lt;/sources>&#xd;
      &lt;target>&#xd;
        &lt;coordinates keepSourceOrder="false">&#xd;
          &lt;coordinate name="level1">&#xd;
            &lt;input nameref=":element" />&#xd;
          &lt;/coordinate>&#xd;
        &lt;/coordinates>&#xd;
      &lt;/target>&#xd;
    &lt;/transform>&#xd;
    &lt;transform type="TableAggregation" name="TA_dim18" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="INPUT_dim18" format="ea" />&#xd;
      &lt;/sources>&#xd;
      &lt;target>&#xd;
        &lt;coordinates keepSourceOrder="false">&#xd;
          &lt;coordinate name="level1">&#xd;
            &lt;input nameref=":element" />&#xd;
          &lt;/coordinate>&#xd;
        &lt;/coordinates>&#xd;
      &lt;/target>&#xd;
    &lt;/transform>&#xd;
    &lt;transform type="TableAggregation" name="TA_dim19" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="INPUT_dim19" format="ea" />&#xd;
      &lt;/sources>&#xd;
      &lt;target>&#xd;
        &lt;coordinates keepSourceOrder="false">&#xd;
          &lt;coordinate name="level1">&#xd;
            &lt;input nameref=":element" />&#xd;
          &lt;/coordinate>&#xd;
        &lt;/coordinates>&#xd;
      &lt;/target>&#xd;
    &lt;/transform>&#xd;
    &lt;transform type="TableAggregation" name="TA_dim20" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="INPUT_dim20" format="ea" />&#xd;
      &lt;/sources>&#xd;
      &lt;target>&#xd;
        &lt;coordinates keepSourceOrder="false">&#xd;
          &lt;coordinate name="level1">&#xd;
            &lt;input nameref=":element" />&#xd;
          &lt;/coordinate>&#xd;
        &lt;/coordinates>&#xd;
      &lt;/target>&#xd;
    &lt;/transform>&#xd;
    &lt;transform type="TableAggregation" name="TA_dim21" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="INPUT_dim21" format="ea" />&#xd;
      &lt;/sources>&#xd;
      &lt;target>&#xd;
        &lt;coordinates keepSourceOrder="false">&#xd;
          &lt;coordinate name="level1">&#xd;
            &lt;input nameref=":element" />&#xd;
          &lt;/coordinate>&#xd;
        &lt;/coordinates>&#xd;
      &lt;/target>&#xd;
    &lt;/transform>&#xd;
    &lt;transform type="TableAggregation" name="TA_dim22" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="INPUT_dim22" format="ea" />&#xd;
      &lt;/sources>&#xd;
      &lt;target>&#xd;
        &lt;coordinates keepSourceOrder="false">&#xd;
          &lt;coordinate name="level1">&#xd;
            &lt;input nameref=":element" />&#xd;
          &lt;/coordinate>&#xd;
        &lt;/coordinates>&#xd;
      &lt;/target>&#xd;
    &lt;/transform>&#xd;
    &lt;transform type="TableAggregation" name="TA_dim23" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="INPUT_dim23" format="ea" />&#xd;
      &lt;/sources>&#xd;
      &lt;target>&#xd;
        &lt;coordinates keepSourceOrder="false">&#xd;
          &lt;coordinate name="level1">&#xd;
            &lt;input nameref=":element" />&#xd;
          &lt;/coordinate>&#xd;
        &lt;/coordinates>&#xd;
      &lt;/target>&#xd;
    &lt;/transform>&#xd;
    &lt;transform type="TableAggregation" name="TA_dim24" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="INPUT_dim24" format="ea" />&#xd;
      &lt;/sources>&#xd;
      &lt;target>&#xd;
        &lt;coordinates keepSourceOrder="false">&#xd;
          &lt;coordinate name="level1">&#xd;
            &lt;input nameref=":element" />&#xd;
          &lt;/coordinate>&#xd;
        &lt;/coordinates>&#xd;
      &lt;/target>&#xd;
    &lt;/transform>&#xd;
    &lt;transform type="TableAggregation" name="TA_dim25" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="INPUT_dim25" format="ea" />&#xd;
      &lt;/sources>&#xd;
      &lt;target>&#xd;
        &lt;coordinates keepSourceOrder="false">&#xd;
          &lt;coordinate name="level1">&#xd;
            &lt;input nameref=":element" />&#xd;
          &lt;/coordinate>&#xd;
        &lt;/coordinates>&#xd;
      &lt;/target>&#xd;
    &lt;/transform>&#xd;
    &lt;transform type="TableAggregation" name="TA_dim26" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="INPUT_dim26" format="ea" />&#xd;
      &lt;/sources>&#xd;
      &lt;target>&#xd;
        &lt;coordinates keepSourceOrder="false">&#xd;
          &lt;coordinate name="level1">&#xd;
            &lt;input nameref=":element" />&#xd;
          &lt;/coordinate>&#xd;
        &lt;/coordinates>&#xd;
      &lt;/target>&#xd;
    &lt;/transform>&#xd;
    &lt;transform type="TableAggregation" name="TA_dim27" modified="1599657357196" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="INPUT_dim27" format="ea" />&#xd;
      &lt;/sources>&#xd;
      &lt;target>&#xd;
        &lt;coordinates keepSourceOrder="false">&#xd;
          &lt;coordinate name="level1">&#xd;
            &lt;input nameref=":element" />&#xd;
          &lt;/coordinate>&#xd;
        &lt;/coordinates>&#xd;
      &lt;/target>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="TA_countOutput" type="TableAggregation" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="OUTPUT_rowCount" />&#xd;
      &lt;/sources>&#xd;
      &lt;target>&#xd;
        &lt;coordinates keepSourceOrder="false" />&#xd;
        &lt;measures>&#xd;
          &lt;measure aggregate="count" name="outputRows" type="text">&#xd;
            &lt;input nameref="${db_dimensionMeasure}" />&#xd;
          &lt;/measure>&#xd;
        &lt;/measures>&#xd;
      &lt;/target>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="TJ_chunkSize" type="TableJoin" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="FN_convertChunks" />&#xd;
        &lt;source nameref="TA_countOutput" />&#xd;
      &lt;/sources>&#xd;
      &lt;joins persist="false">&#xd;
        &lt;join allColumns="false" unique="false">&#xd;
          &lt;left nameref="FN_convertChunks" />&#xd;
          &lt;right nameref="TA_countOutput" />&#xd;
        &lt;/join>&#xd;
      &lt;/joins>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="FT_variablesStaticInput" type="FieldTransform" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[Input for Loop job containing variables.
Calculates all the time related variables automatically.]]&gt;&lt;/comment>&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="CT_dummy" />&#xd;
      &lt;/sources>&#xd;
      &lt;functions>&#xd;
        &lt;function name="format_date" type="DateFormat">&#xd;
          &lt;inputs>&#xd;
            &lt;input constant="${time_elementStart}" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;targetformat>${intern_dateFormat}&lt;/targetformat>&#xd;
            &lt;sourceformat>${time_dateFormatSourceMonthly}&lt;/sourceformat>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_firstTrgYear" type="DateFormat">&#xd;
          &lt;inputs>&#xd;
            &lt;input nameref="format_date" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;targetformat>yyyy&lt;/targetformat>&#xd;
            &lt;sourceformat>${intern_dateFormat}&lt;/sourceformat>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_numPeriods" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input nameref="intern_firstTrgYear" type="int" />&#xd;
            &lt;input nameref="intern_firstDbYear" type="int" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>false&lt;/buffered>&#xd;
            &lt;type>int&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[return intern_firstTrgYear-intern_firstDbYear;]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_firstDbYear" type="DateFormat">&#xd;
          &lt;inputs>&#xd;
            &lt;input constant="${time_inputStartDate}" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;targetformat>yyyy&lt;/targetformat>&#xd;
            &lt;sourceformat>${time_dateFormatSourceMonthly}&lt;/sourceformat>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_firstMonth" type="DateFormat">&#xd;
          &lt;inputs>&#xd;
            &lt;input constant="${time_inputStartDate}" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;targetformat>MM&lt;/targetformat>&#xd;
            &lt;sourceformat>${time_dateFormatSourceMonthly}&lt;/sourceformat>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_firstTargetMonth" type="DateFormat">&#xd;
          &lt;inputs>&#xd;
            &lt;input constant="${time_elementStart}" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;targetformat>MM&lt;/targetformat>&#xd;
            &lt;sourceformat>${time_dateFormatSourceMonthly}&lt;/sourceformat>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_periodEnd" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="strVal" constant="${ext_numValues}" type="String" />&#xd;
            &lt;input alias="elemEnd" constant="${time_elementEnd}" type="String" />&#xd;
            &lt;input alias="date" nameref="format_date" type="String" />&#xd;
            &lt;input alias="internFormat" constant="${intern_dateFormat}" type="String" />&#xd;
            &lt;input alias="usedFormat" constant="${time_dateFormatSourceMonthly}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[import groovy.time.TimeCategory;

Date e;



if("${time_elementEnd}"=="")



{

  Date d = Date.parse(internFormat, date);

  use(TimeCategory) {

  e = d + (strVal.toInteger()-1).months; 

  }

}

else {

 e = Date.parse(usedFormat, elemEnd);



}

return e.format(internFormat);]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_lastTrgYear" type="DateFormat">&#xd;
          &lt;inputs>&#xd;
            &lt;input nameref="intern_periodEnd" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;targetformat>yyyy&lt;/targetformat>&#xd;
            &lt;sourceformat>${intern_dateFormat}&lt;/sourceformat>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_srcYearRange" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input nameref="intern_numPeriods" type="int" />&#xd;
            &lt;input alias="intern_firstMonth" nameref="intern_firstTargetMonth" type="String" />&#xd;
            &lt;input nameref="intern_firstTrgYear" type="String" />&#xd;
            &lt;input alias="firstDbYear" nameref="intern_firstDbYear" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[srcYearRng = "(" + firstDbYear;















int firstDBYear = firstDbYear.toInteger();















for(i=1;i&lt;intern_numPeriods;i++){







 srcYearRng =  srcYearRng+"|"+(firstDBYear+i);







}















if(intern_firstMonth == "01")







{







  srcYearRng = srcYearRng + ")";







}







else







{







  srcYearRng = srcYearRng +"|"+ intern_firstTrgYear + ")";







}







return srcYearRng;]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_lastTargetMonth" type="DateFormat">&#xd;
          &lt;inputs>&#xd;
            &lt;input nameref="intern_periodEnd" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;targetformat>MM&lt;/targetformat>&#xd;
            &lt;sourceformat>${intern_dateFormat}&lt;/sourceformat>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="rng_blockSrcBeginning" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="intern_firstMonth" nameref="intern_firstMonth" type="int" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if(intern_firstMonth==1)







  return "§";







nval = 12+12-intern_firstMonth+1; // full year plus rest of year







rolling = "(";







for (i = 1; i &lt;intern_firstMonth; i++)







{







  if(i&lt;2)







  rolling += "${time_leadingZero}"+"1";







  else if(i&lt;10)







  rolling = rolling+"|"+"${time_leadingZero}"+i;







  else







  rolling = rolling+"|"+i;







}







rolling +=")";







return rolling;]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="rng_blockSrcEnd" type="Groovy">&#xd;
          &lt;inputs&gt;&#xd;
            &lt;input alias="intern_firstMonth" nameref="intern_firstTargetMonth" type="int" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[nval = 12+12-intern_firstMonth+1; // full year plus rest of year







rolling = "(";







//first month







first = intern_firstMonth;







if(first > 12)







  return "§";







if(first &lt;2)







  rolling += "${time_leadingZero}"+"1";







  else if(first &lt;10)







  rolling = rolling+"${time_leadingZero}"+first;







  else







  rolling = rolling+""+first;







for (i = intern_firstMonth+1; i &lt;=12; i++)







{







  if(i&lt;2)







  rolling += "${time_leadingZero}1";







  else if(i&lt;10)







  rolling = rolling+"|${time_leadingZero}"+i;







  else







  rolling = rolling+"|"+i;







}







rolling +=")";







return rolling;]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="rng_blockTrgBeginning" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="lastTrgMonth" nameref="intern_lastTargetMonth" type="int" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[nval = 12+12-lastTrgMonth+1; // full year plus rest of year



rolling = "(";







//first month







first = lastTrgMonth+1;







if(first > 12)







  return "§";







if(first &lt;2)







  rolling += "${time_leadingZero}"+"1";







  else if(first &lt;10)







  rolling = rolling+"${time_leadingZero}"+first;







  else







  rolling = rolling+""+first;







for (i = lastTrgMonth+2; i &lt;=12; i++)







{







  if(i&lt;2)







  rolling += "${time_leadingZero}1";







  else if(i&lt;10)







  rolling = rolling+"|${time_leadingZero}"+i;







  else







  rolling = rolling+"|"+i;







}







rolling +=")";







return rolling;]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="rng_blockTrgEnd" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="intern_firstMonth" nameref="intern_firstTargetMonth" type="int" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if(intern_firstMonth==1)







  return "§";







nval = 12+12-intern_firstMonth+1; // full year plus rest of year







rolling = "(";







for (i = 1; i &lt;intern_firstMonth; i++)







{







  if(i&lt;2)







  rolling += "${time_leadingZero}"+"1";







  else if(i&lt;10)







  rolling = rolling+"|"+"${time_leadingZero}"+i;







  else







  rolling = rolling+"|"+i;







}







rolling +=")";







return rolling;]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_trgtYearRange" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input nameref="intern_firstTrgYear" type="int" />&#xd;
            &lt;input nameref="intern_lastTrgYear" type="int" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[range = intern_lastTrgYear-intern_firstTrgYear;















trgtRng = "("+intern_firstTrgYear;















for(i=1;i&lt;=range;i++)















{















  trgtRng+= "|"+(intern_firstTrgYear+i) ;















}







return trgtRng+")";]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_numValues" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="firstYear" nameref="intern_firstTrgYear" type="int" />&#xd;
            &lt;input alias="lastYear" nameref="intern_lastTrgYear" type="int" />&#xd;
            &lt;input alias="firstMonth" nameref="intern_firstTargetMonth" type="int" />&#xd;
            &lt;input alias="lastMonth" nameref="intern_lastTargetMonth" type="int" />&#xd;
            &lt;input alias="daily" constant="${time_dateDailySeparator}" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>int&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[points = 0;







if(firstYear==lastYear){







  points = 1 + lastMonth-firstMonth;







} else{







  points = 1+(lastMonth + ((lastYear-firstYear)*12)) - firstMonth;







}















if(daily != "\$"){







  points = points * 31;







}















return points;]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_extractSourceAccept" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="year" nameref="intern_srcYearRange" type="String" />&#xd;
            &lt;input alias="sep" constant="${time_dateSeparator}" type="String" />&#xd;
            &lt;input alias="day" constant="${time_dateDailySeparator}" type="String" />&#xd;
            &lt;input alias="month" constant="${time_yearRegExpAccept}" type="String" />&#xd;
            &lt;input alias="format" constant="${time_dateFormatSourceMonthly}" type="String" />&#xd;
            &lt;input alias="dailyFormat" constant="${time_dateFormatSourceDaily}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[// which position is year, which month, which days



arr = format.split("\\" + sep);



if (day == "\$") {



  if (arr[0].toUpperCase().contains("M")){



  return "^" + month + sep + year + day



}



  else {



  return "^" + year + sep + month + day



  }



}



else{



df = dailyFormat.split("\\" + sep);



def resultArr = new String[3];



  for (i = 0; i &lt; 3; i++){



    if (df[i].toUpperCase().contains("M")) {



    resultArr[i] = month



    }



    else if (df[i].toUpperCase().contains("D")) {



    resultArr[i] = "[0-3][0-9]"  



    }



    else {



    resultArr[i] = year



    } 



  }



return resultArr.join(sep);  



}]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_extractSourceDeny" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="year1" nameref="intern_srcYearRange" />&#xd;
            &lt;input alias="sep" constant="${time_dateSeparator}" />&#xd;
            &lt;input alias="month1" constant="${time_yearRegExpDeny}" />&#xd;
            &lt;input alias="year2" nameref="intern_firstTrgYear" />&#xd;
            &lt;input alias="month2" nameref="rng_blockSrcEnd" />&#xd;
            &lt;input alias="year3" nameref="intern_firstDbYear" />&#xd;
            &lt;input alias="month3" nameref="rng_blockSrcBeginning" />&#xd;
            &lt;input alias="day" constant="${time_dateDailySeparator}" />&#xd;
            &lt;input alias="dailyFormat" constant="${time_dateFormatSourceDaily}" />&#xd;
            &lt;input alias="format" constant="${time_dateFormatSourceMonthly}" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[arr = format.split("\\" + sep);







if (day == "\$") {



  if (arr[0].toUpperCase().contains("M")){



  //Don't need to care for days for s1.



  s1 = month1 + sep + year1;



  s2 = month2 + sep + year2 + day;



  s3 = month3 + sep + year3 + day;



  }



  else {



  s1 = year1 + sep + month1; 



  s2 = year2 + sep + month2 + day;



  s3 = year3 + sep + month3 + day;



  }



}



else{



df = dailyFormat.split("\\" + sep);



s1 = new String[3];



s2 = new String[3];



s3 = new String[3];







  for (i = 0; i &lt; 3; i++){



    if (df[i].toUpperCase().contains("M")) {



    s1[i] = month1;



    s2[i] = month2;



    s3[i] = month3;



    }



    else if (df[i].toUpperCase().contains("D")) {



    s2[i] = day;



    s3[i] = day;    



    }



    else if (df[i].toUpperCase().contains("Y")){



    s1[i] = year1;



    s2[i] = year2;



    s3[i] = year3;



    } 



  }



  s1 = s1 - null;



  s1 = s1.join(sep);



  s2 = s2.join(sep);



  s3 = s3.join(sep);



  



}



return s1 + "|" + s2 +"|"+ s3 ;







//////////////////////////////////////]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_extractTargetAccept" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="year" nameref="intern_trgtYearRange" type="String" />&#xd;
            &lt;input alias="sep" constant="${time_dateSeparator}" type="String" />&#xd;
            &lt;input alias="day" constant="${time_dateDailySeparator}" type="String" />&#xd;
            &lt;input alias="month" constant="${time_yearRegExpAccept}" type="String" />&#xd;
            &lt;input alias="format" constant="${time_dateFormatSourceMonthly}" type="String" />&#xd;
            &lt;input alias="dailyFormat" constant="${time_dateFormatSourceDaily}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[// which position is year, which month, which days



arr = format.split("\\" + sep);



if (day == "\$") {



  if (arr[0].toUpperCase().contains("M")){



  return "^" + month + sep + year + day



}



  else {



  return "^" + year + sep + month + day 



  }



}



else{



df = dailyFormat.split("\\" + sep);



def resultArr = new String[3];



  for (i = 0; i &lt; 3; i++){



    if (df[i].toUpperCase().contains("M")) {



    resultArr[i] = month



    }



    else if (df[i].toUpperCase().contains("D")) {



    resultArr[i] =  "[0-3][0-9]"       



    }



    else {



    resultArr[i] = year



    } 



  }



return resultArr.join(sep);  



}]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_extractTargetDeny" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="year1" nameref="intern_trgtYearRange" />&#xd;
            &lt;input alias="sep" constant="${time_dateSeparator}" />&#xd;
            &lt;input alias="month1" constant="${time_yearRegExpDeny}" />&#xd;
            &lt;input alias="year2" nameref="intern_firstTrgYear" />&#xd;
            &lt;input alias="month2" nameref="rng_blockTrgEnd" />&#xd;
            &lt;input alias="year3" nameref="intern_lastTrgYear" />&#xd;
            &lt;input alias="month3" nameref="rng_blockTrgBeginning" />&#xd;
            &lt;input alias="day" constant="${time_dateDailySeparator}" />&#xd;
            &lt;input alias="dailyFormat" constant="${time_dateFormatSourceDaily}" />&#xd;
            &lt;input alias="format" constant="${time_dateFormatSourceMonthly}" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[arr = format.split("\\" + sep);







if (day == "\$") {



  if (arr[0].toUpperCase().contains("M")){



  //Don't need to care for days for s1.



  s1 = month1 + sep + year1;



  s2 = month2 + sep + year2 + day;



  s3 = month3 + sep + year3 + day;



  }



  else {



  s1 = year1 + sep + month1; 



  s2 = year2 + sep + month2 + day;



  s3 = year3 + sep + month3 + day;



  }



}



else{



df = dailyFormat.split("\\" + sep);



s1 = new String[3];



s2 = new String[3];



s3 = new String[3];







  for (i = 0; i &lt; 3; i++){



    if (df[i].toUpperCase().contains("M")) {



    s1[i] = month1;



    s2[i] = month2;



    s3[i] = month3;



    }



    else if (df[i].toUpperCase().contains("D")) {



    s2[i] = day;



    s3[i] = day;    



    }



    else if (df[i].toUpperCase().contains("Y")){



    s1[i] = year1;



    s2[i] = year2;



    s3[i] = year3;



    } 



  }



  s1 = s1 - null;



  s1 = s1.join(sep);



  s2 = s2.join(sep);



  s3 = s3.join(sep);



  



}



return s1 + "|" + s2 +"|"+ s3 ;







//////////////////////////////////////]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_extractCopyAccept" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="year" nameref="intern_trgtYearRange" type="String" />&#xd;
            &lt;input alias="sep" constant="${time_dateSeparator}" type="String" />&#xd;
            &lt;input alias="month" constant="${time_yearRegExpAccept}" type="String" />&#xd;
            &lt;input alias="format" constant="${time_dateFormatSourceMonthly}" type="String" />&#xd;
            &lt;input alias="dailyFormat" constant="${time_dateFormatSourceDaily}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[// which position is year, which month, which days



arr = format.split("\\" + sep);



  if (arr[0].toUpperCase().contains("M")){



  return "^" + month + sep + year + "\$";



}



  else {



  return "^" + year + sep + month + "\$"; 



  }]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_extractCopyDeny" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="year1" nameref="intern_trgtYearRange" />&#xd;
            &lt;input alias="sep" constant="${time_dateSeparator}" />&#xd;
            &lt;input alias="month1" constant="${time_yearRegExpDeny}" />&#xd;
            &lt;input alias="year2" nameref="intern_firstTrgYear" />&#xd;
            &lt;input alias="month2" nameref="rng_blockTrgEnd" />&#xd;
            &lt;input alias="year3" nameref="intern_lastTrgYear" />&#xd;
            &lt;input alias="month3" nameref="rng_blockTrgBeginning" />&#xd;
            &lt;input alias="day" constant="$" />&#xd;
            &lt;input alias="format" constant="${time_dateFormatSourceMonthly}" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[arr = format.split("\\" + sep);







  if (arr[0].toUpperCase().contains("M")){



  //Don't need to care for days for s1.



  s1 = month1 + sep + year1;



  s2 = month2 + sep + year2 + day;



  s3 = month3 + sep + year3 + day;



  }



  else {



  s1 = year1 + sep + month1; 



  s2 = year2 + sep + month2 + day;



  s3 = year3 + sep + month3 + day;



  }







return s1 + "|" + s2 +"|"+ s3 ;







//////////////////////////////////////]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="time_currentFormat" type="Switch"&gt;&#xd;
          &lt;inputs>&#xd;
            &lt;input constant="${time_dateDailySeparator}" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;default>&#xd;
              &lt;result constant="${time_dateFormatSourceMonthly}" />&#xd;
            &lt;/default>&#xd;
            &lt;switchs>&#xd;
              &lt;switch>&#xd;
                &lt;condition operator="equal" type="accept" value="$" />&#xd;
                &lt;result constant="${time_dateFormatSourceMonthly}" />&#xd;
              &lt;/switch>&#xd;
              &lt;switch>&#xd;
                &lt;condition operator="equal" type="accept" value="(..)" />&#xd;
                &lt;result constant="${time_dateFormatSourceDaily}" />&#xd;
              &lt;/switch>&#xd;
            &lt;/switchs>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_dateFormat" type="Switch">&#xd;
          &lt;inputs>&#xd;
            &lt;input constant="${time_dateDailySeparator}" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;default>&#xd;
              &lt;result constant="yyyyMM" />&#xd;
            &lt;/default>&#xd;
            &lt;switchs>&#xd;
              &lt;switch>&#xd;
                &lt;condition operator="equal" type="accept" value="$" />&#xd;
                &lt;result constant="yyyyMM" />&#xd;
              &lt;/switch>&#xd;
              &lt;switch>&#xd;
                &lt;condition operator="equal" type="accept" value="(..)" />&#xd;
                &lt;result constant="yyyyMMdd" />&#xd;
              &lt;/switch>&#xd;
            &lt;/switchs>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_inputRange" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="date1" constant="${time_elementStart}" type="String" />&#xd;
            &lt;input alias="date2" constant="${time_inputStartDate}" type="String" />&#xd;
            &lt;input alias="internFormat" constant="${time_dateFormatSourceMonthly}" type="String" />&#xd;
            &lt;input alias="daily" constant="${time_dateDailySeparator}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>int&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[import groovy.time.TimeCategory;

Date d1 = Date.parse(internFormat, date1);
Date d2 = Date.parse(internFormat, date2);

if(daily == "\$") {
	years = ((int)d1.year-(int)d2.year)*12;
	months = (int)d1.month-(int)d2.month;
	return years + months;
}
else
	return d1-d2;]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
      &lt;/functions>&#xd;
      &lt;target>&#xd;
        &lt;coordinates>&#xd;
          &lt;coordinate name="aip_numPeriods">&#xd;
            &lt;input nameref="intern_numPeriods" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate name="time_elementEnd">&#xd;
            &lt;input nameref="intern_periodEnd" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate name="intern_extractSourceAccept">&#xd;
            &lt;input nameref="intern_extractSourceAccept" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate name="intern_extractSourceDeny">&#xd;
            &lt;input nameref="intern_extractSourceDeny" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate name="intern_extractTargetAccept">&#xd;
            &lt;input nameref="intern_extractTargetAccept" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate name="intern_extractTargetDeny">&#xd;
            &lt;input nameref="intern_extractTargetDeny" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate name="intern_extractCopyAccept">&#xd;
            &lt;input nameref="intern_extractCopyAccept" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate name="intern_extractCopyDeny">&#xd;
            &lt;input nameref="intern_extractCopyDeny" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate name="intern_dateFormat">&#xd;
            &lt;input nameref="intern_dateFormat" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate name="time_currentFormat">&#xd;
            &lt;input nameref="time_currentFormat" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate name="intern_inputRange">&#xd;
            &lt;input nameref="intern_inputRange" />&#xd;
          &lt;/coordinate>&#xd;
        &lt;/coordinates>&#xd;
      &lt;/target>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="TV_rowsCopy" type="TableView" modifiedBy="peter">&#xd;
      &lt;start>${intern_rowStart}&lt;/start>&#xd;
      &lt;end>${intern_rowStop}&lt;/end>&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="FT_dateTransformTarget" />&#xd;
      &lt;/sources>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="TV_sortCopy" type="TableView" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[Paths for output have to be sorted in the same way as the input (time, measure....)
ADAPT for own dimensions]]&gt;&lt;/comment>&#xd;
      &lt;start>${intern_rowStart}&lt;/start>&#xd;
      &lt;end>${intern_rowStop}&lt;/end>&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="FT_dateTransformCopy" />&#xd;
      &lt;/sources>&#xd;
      &lt;sorter>&#xd;
        &lt;input nameref="${db_dimensionMeasure}" />&#xd;
        &lt;input nameref="${db_dimension1}" />&#xd;
        &lt;input nameref="${db_dimension2}" />&#xd;
        &lt;input nameref="${db_dimension3}" />&#xd;
        &lt;input nameref="${db_dimension4}" />&#xd;
        &lt;input nameref="${db_dimension5}" />&#xd;
        &lt;input nameref="${db_dimension6}" />&#xd;
        &lt;input nameref="${db_dimension7}" />&#xd;
        &lt;input nameref="${db_dimension8}" />&#xd;
        &lt;input nameref="${db_dimension9}" />&#xd;
        &lt;input nameref="${db_dimension10}" />&#xd;
        &lt;input nameref="${db_dimension11}" />&#xd;
        &lt;input nameref="${db_dimension12}" />&#xd;
        &lt;input nameref="${db_dimension13}" />&#xd;
        &lt;input nameref="${db_dimension14}" />&#xd;
        &lt;input nameref="${db_dimension15}" />&#xd;
        &lt;input nameref="${db_dimension16}" />&#xd;
        &lt;input nameref="${db_dimension17}" />&#xd;
        &lt;input nameref="${db_dimension18}" />&#xd;
        &lt;input nameref="${db_dimension19}" />&#xd;
        &lt;input nameref="${db_dimension20}" />&#xd;
        &lt;input nameref="${db_dimension21}" />&#xd;
        &lt;input nameref="${db_dimension22}" />&#xd;
        &lt;input nameref="${db_dimension23}" />&#xd;
        &lt;input nameref="${db_dimension24}" />&#xd;
        &lt;input nameref="${db_dimension25}" />&#xd;
        &lt;input nameref="${db_dimension26}" />&#xd;
        &lt;input nameref="${db_dimension27}" />&#xd;
        &lt;input nameref="${db_dimensionVersion}" />&#xd;
        &lt;input nameref="date_sort" />&#xd;
      &lt;/sorter>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="FT_dateTransformCopy" type="FieldTransform" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[Adds date column which can be sorted for target]]&gt;&lt;/comment>&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="OUTPUT_copyValues" />&#xd;
      &lt;/sources>&#xd;
      &lt;functions>&#xd;
        &lt;function name="date_sort" type="DateFormat">&#xd;
          &lt;inputs>&#xd;
            &lt;input nameref="${db_dimensionTime}" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters&gt;&#xd;
            &lt;sourceformat>${intern_copyDaysFormat}&lt;/sourceformat>&#xd;
            &lt;targetformat>${intern_dateCopyFormat}&lt;/targetformat>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
      &lt;/functions>&#xd;
      &lt;target>&#xd;
        &lt;coordinates exclude="date_current|date_daily" include="." />&#xd;
      &lt;/target>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="New Table aggregation" type="TableAggregation" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="FT_indexOutput" />&#xd;
      &lt;/sources>&#xd;
      &lt;target>&#xd;
        &lt;coordinates keepSourceOrder="false" />&#xd;
        &lt;measures>&#xd;
          &lt;measure aggregate="group_concat" type="text" name="values">&#xd;
            &lt;input nameref="values" />&#xd;
          &lt;/measure>&#xd;
        &lt;/measures>&#xd;
      &lt;/target>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="TV_sortTargetVersions" type="TableView" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="TV_sortTarget" />&#xd;
      &lt;/sources>&#xd;
      &lt;sorter>&#xd;
        &lt;input nameref="${db_dimensionVersion}" />&#xd;
      &lt;/sorter>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="TU_combineVersions" type="TableUnion" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="TV_sortInput_outlier" />&#xd;
        &lt;source nameref="TV_sortInput" />&#xd;
      &lt;/sources>&#xd;
      &lt;cache>true&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="TV_sortInput_outlier" type="TableView" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[Inputs have to be sorted (time, measures...)
ADAPT for own dimensions
${intern_rowStop}
${intern_rowStart}]]&gt;&lt;/comment>&#xd;
      &lt;start>${intern_rowStartInput}&lt;/start>&#xd;
      &lt;end>${intern_rowStopInput}&lt;/end>&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="FT_dateTransformInput_outlier" />&#xd;
      &lt;/sources>&#xd;
      &lt;sorter>&#xd;
        &lt;input nameref="${db_dimensionVersion}" order="asc" />&#xd;
        &lt;input nameref="${db_dimensionMeasure}" order="asc" />&#xd;
        &lt;input nameref="${db_dimension1}" order="asc" />&#xd;
        &lt;input nameref="${db_dimension2}" order="asc" />&#xd;
        &lt;input nameref="${db_dimension3}" order="asc" />&#xd;
        &lt;input nameref="${db_dimension4}" />&#xd;
        &lt;input nameref="${db_dimension5}" />&#xd;
        &lt;input nameref="${db_dimension6}" />&#xd;
        &lt;input nameref="${db_dimension7}" />&#xd;
        &lt;input nameref="${db_dimension8}" />&#xd;
        &lt;input nameref="${db_dimension9}" />&#xd;
        &lt;input nameref="${db_dimension10}" />&#xd;
        &lt;input nameref="${db_dimension11}" />&#xd;
        &lt;input nameref="${db_dimension12}" />&#xd;
        &lt;input nameref="${db_dimension13}" />&#xd;
        &lt;input nameref="${db_dimension14}" />&#xd;
        &lt;input nameref="${db_dimension15}" />&#xd;
        &lt;input nameref="${db_dimension16}" />&#xd;
        &lt;input nameref="${db_dimension17}" />&#xd;
        &lt;input nameref="${db_dimension18}" />&#xd;
        &lt;input nameref="${db_dimension19}" />&#xd;
        &lt;input nameref="${db_dimension20}" />&#xd;
        &lt;input nameref="${db_dimension21}" />&#xd;
        &lt;input nameref="${db_dimension22}" />&#xd;
        &lt;input nameref="${db_dimension23}" />&#xd;
        &lt;input nameref="${db_dimension24}" />&#xd;
        &lt;input nameref="${db_dimension25}" />&#xd;
        &lt;input nameref="${db_dimension26}" />&#xd;
        &lt;input nameref="${db_dimension27}" />&#xd;
        &lt;input nameref="date_sort" order="asc" />&#xd;
      &lt;/sorter>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="FN_outputValues_outlier" type="FieldNormalization" modifiedBy="peter">&#xd;
      &lt;comment>Transform Comma separated values from Web Service result into a column where each value is in a separate row.&lt;/comment>&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="FT_trimOutput_outlier" />&#xd;
      &lt;/sources>&#xd;
      &lt;splitColumnName>values&lt;/splitColumnName>&#xd;
      &lt;delimiter>,&lt;/delimiter>&#xd;
      &lt;ignoreEmpty>false&lt;/ignoreEmpty>&#xd;
      &lt;ignoreDuplicates>false&lt;/ignoreDuplicates>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="FT_switchControlResult_Outlier" type="FieldTransform" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="AIP_extractResult_outlier" />&#xd;
      &lt;/sources>&#xd;
      &lt;functions>&#xd;
        &lt;function name="success" type="Split">&#xd;
          &lt;inputs>&#xd;
            &lt;input nameref="success" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;occurence>2&lt;/occurence>&#xd;
            &lt;separator>"&lt;/separator>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="switchInput" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input nameref="success" type="String" />&#xd;
            &lt;input nameref="web_success" type="boolean" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>int&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if(web_success == false || success != "True")

	return 0;

else

  return 1;]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="errorMessage" type="Split">&#xd;
          &lt;inputs>&#xd;
            &lt;input nameref="errorMessage" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;occurence>2&lt;/occurence>&#xd;
            &lt;separator>"&lt;/separator>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="combinedErrorMessage" type="Concatenation">&#xd;
          &lt;inputs>&#xd;
            &lt;input nameref="web_errorMessage" />&#xd;
            &lt;input nameref="errorMessage" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;delimiter>§&lt;/delimiter>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
      &lt;/functions>&#xd;
      &lt;target>&#xd;
        &lt;coordinates>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="success" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="combinedErrorMessage" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="switchInput" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="values" />&#xd;
          &lt;/coordinate>&#xd;
        &lt;/coordinates>&#xd;
      &lt;/target>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="FT_processCopy_outlier" type="FieldTransform" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="TJ_mergeOutput_outlier" />&#xd;
      &lt;/sources>&#xd;
      &lt;target>&#xd;
        &lt;coordinates exclude="^§§§row§§§$|^date_sort$|#Value" include=".">&#xd;
          &lt;coordinate name="${db_dimensionVersion}">&#xd;
            &lt;input constant="Outlier" />&#xd;
          &lt;/coordinate>&#xd;
        &lt;/coordinates>&#xd;
      &lt;/target>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="FT_outlierInputRows" type="FieldTransform" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="TV_sortInput_outlierKeys" />&#xd;
      &lt;/sources>&#xd;
      &lt;functions>&#xd;
        &lt;function name="§§§row§§§" type="RowNumber">&#xd;
          &lt;parameters />&#xd;
        &lt;/function>&#xd;
      &lt;/functions>&#xd;
      &lt;target>&#xd;
        &lt;coordinates include="." />&#xd;
      &lt;/target>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="FT_indexOutputValues_outlier" type="FieldTransform" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[Add row numbers to values transform for joining.
ADAPT dimensions]]&gt;&lt;/comment>&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="FN_outputValues_outlier" />&#xd;
      &lt;/sources>&#xd;
      &lt;functions>&#xd;
        &lt;function name="§§§row§§§" type="RowNumber">&#xd;
          &lt;parameters />&#xd;
        &lt;/function>&#xd;
      &lt;/functions>&#xd;
      &lt;target>&#xd;
        &lt;coordinates>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="values" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="§§§row§§§" />&#xd;
          &lt;/coordinate>&#xd;
        &lt;/coordinates>&#xd;
      &lt;/target>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="FT_dateTransformInput_outlier" type="FieldTransform" modifiedBy="peter">&#xd;
      &lt;comment>Adds date column which can be sorted for input&lt;/comment>&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="INPUT_sourceValues_outlier" />&#xd;
      &lt;/sources>&#xd;
      &lt;functions>&#xd;
        &lt;function name="date_sort" type="DateFormat">&#xd;
          &lt;inputs>&#xd;
            &lt;input nameref="${db_dimensionTime}" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;targetformat>${intern_dateFormat}&lt;/targetformat>&#xd;
            &lt;sourceformat>${time_dateFormatSourceMonthly}&lt;/sourceformat>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
      &lt;/functions>&#xd;
      &lt;target>&#xd;
        &lt;coordinates include="." />&#xd;
      &lt;/target>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="FT_trimOutput_outlier" type="FieldTransform" modifiedBy="peter">&#xd;
      &lt;comment>Transform web service results to correct format&lt;/comment>&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="AIP_extractResult_outlier" />&#xd;
      &lt;/sources>&#xd;
      &lt;functions>&#xd;
        &lt;function name="trim" type="SubString">&#xd;
          &lt;inputs>&#xd;
            &lt;input nameref="position" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;begin>2&lt;/begin>&#xd;
            &lt;fromSide>left&lt;/fromSide>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="trim2" type="Split">&#xd;
          &lt;inputs>&#xd;
            &lt;input nameref="trim" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;occurence>1&lt;/occurence>&#xd;
            &lt;separator>]&lt;/separator>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="trim_1" type="SubString">&#xd;
          &lt;inputs>&#xd;
            &lt;input nameref="values" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;begin>2&lt;/begin>&#xd;
            &lt;fromSide>left&lt;/fromSide>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="trim_2" type="Split">&#xd;
          &lt;inputs>&#xd;
            &lt;input nameref="trim_1" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;occurence>1&lt;/occurence>&#xd;
            &lt;separator>]&lt;/separator>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
      &lt;/functions>&#xd;
      &lt;target>&#xd;
        &lt;coordinates exclude="success|errorMessage">&#xd;
          &lt;coordinate name="values">&#xd;
            &lt;input nameref="trim_2" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate name="position">&#xd;
            &lt;input nameref="trim2" />&#xd;
          &lt;/coordinate>&#xd;
        &lt;/coordinates>&#xd;
      &lt;/target>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="TD_outlierInput" type="TableDenormalization" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="TU_combineVersions" />&#xd;
      &lt;/sources>&#xd;
      &lt;target>&#xd;
        &lt;coordinates exclude="^date_sort$" include="." keepSourceOrder="true" />&#xd;
        &lt;measures denormalize="${db_dimensionVersion}">&#xd;
          &lt;measure name="${db_elementVersion}">&#xd;
            &lt;input nameref="#Value" />&#xd;
          &lt;/measure>&#xd;
          &lt;measure name="Outlier">&#xd;
            &lt;input nameref="#Value" />&#xd;
          &lt;/measure>&#xd;
        &lt;/measures>&#xd;
      &lt;/target>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="FT_combineInputAndOutlier" type="FieldTransform" modifiedBy="peter">&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="TD_outlierInput" />&#xd;
      &lt;/sources>&#xd;
      &lt;functions>&#xd;
        &lt;function name="#Value" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="elementVersion" nameref="${db_elementVersion}" type="float" />&#xd;
            &lt;input alias="Outlier" nameref="Outlier" type="float" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;type>float&lt;/type>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
            &lt;script>&lt;![CDATA[if(Outlier > 0 || Outlier &lt; 0)
	return Outlier;
else
	return elementVersion;]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
      &lt;/functions>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="TV_sortInput_outlierKeys" type="TableView" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[Inputs have to be sorted (time, measures...)
ADAPT for own dimensions]]&gt;&lt;/comment>&#xd;
      &lt;start>${intern_rowStartInput}&lt;/start>&#xd;
      &lt;end>${intern_rowStopInput}&lt;/end>&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="FT_dateTransformInput_outlierKeys" />&#xd;
      &lt;/sources>&#xd;
      &lt;sorter>&#xd;
        &lt;input nameref="${db_dimensionMeasure}" order="asc" />&#xd;
        &lt;input nameref="${db_dimensionVersion}" />&#xd;
        &lt;input nameref="${db_dimension1}" />&#xd;
        &lt;input nameref="${db_dimension2}" />&#xd;
        &lt;input nameref="${db_dimension3}" />&#xd;
        &lt;input nameref="${db_dimension4}" />&#xd;
        &lt;input nameref="${db_dimension5}" />&#xd;
        &lt;input nameref="${db_dimension6}" />&#xd;
        &lt;input nameref="${db_dimension7}" />&#xd;
        &lt;input nameref="${db_dimension8}" />&#xd;
        &lt;input nameref="${db_dimension9}" />&#xd;
        &lt;input nameref="${db_dimension10}" />&#xd;
        &lt;input nameref="${db_dimension11}" />&#xd;
        &lt;input nameref="${db_dimension12}" />&#xd;
        &lt;input nameref="${db_dimension13}" />&#xd;
        &lt;input nameref="${db_dimension14}" />&#xd;
        &lt;input nameref="${db_dimension15}" />&#xd;
        &lt;input nameref="${db_dimension16}" />&#xd;
        &lt;input nameref="${db_dimension17}" />&#xd;
        &lt;input nameref="${db_dimension18}" />&#xd;
        &lt;input nameref="${db_dimension19}" />&#xd;
        &lt;input nameref="${db_dimension20}" />&#xd;
        &lt;input nameref="${db_dimension21}" />&#xd;
        &lt;input nameref="${db_dimension22}" />&#xd;
        &lt;input nameref="${db_dimension23}" />&#xd;
        &lt;input nameref="${db_dimension24}" />&#xd;
        &lt;input nameref="${db_dimension25}" />&#xd;
        &lt;input nameref="${db_dimension26}" />&#xd;
        &lt;input nameref="${db_dimension27}" />&#xd;
        &lt;input nameref="date_sort" />&#xd;
      &lt;/sorter>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="TN_outlierInput" type="TableNormalization" modifiedBy="peter">&#xd;
      &lt;ignoreEmpty>false&lt;/ignoreEmpty>&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="FT_combineInputAndOutlier" />&#xd;
      &lt;/sources>&#xd;
      &lt;target>&#xd;
        &lt;coordinates exclude="^${db_elementVersion}$|^Outlier$" include="." keepSourceOrder="false" />&#xd;
        &lt;measures normalize="${db_dimensionVersion}" valuename="#Value">&#xd;
          &lt;measure name="${db_elementVersion}">&#xd;
            &lt;input nameref="#Value" />&#xd;
          &lt;/measure>&#xd;
        &lt;/measures>&#xd;
      &lt;/target>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="TJ_mergeOutput_outlier" type="TableJoin" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[Table join for writing results in cube in correct format.
ADAPT dimensions]]&gt;&lt;/comment>&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="FT_outlierInputRows" />&#xd;
        &lt;source nameref="FT_indexOutputValues_outlier" />&#xd;
      &lt;/sources>&#xd;
      &lt;joins persist="false">&#xd;
        &lt;join allColumns="false" type="inner" unique="false">&#xd;
          &lt;left nameref="FT_outlierInputRows">&#xd;
            &lt;key nameref="§§§row§§§" />&#xd;
          &lt;/left>&#xd;
          &lt;right nameref="FT_indexOutputValues_outlier">&#xd;
            &lt;key nameref="§§§row§§§" />&#xd;
          &lt;/right>&#xd;
          &lt;conditions>&#xd;
            &lt;condition type="eq" />&#xd;
          &lt;/conditions>&#xd;
        &lt;/join>&#xd;
      &lt;/joins>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="FT_dateTransformInput_outlierKeys" type="FieldTransform" modifiedBy="peter">&#xd;
      &lt;comment>Adds date column which can be sorted for input&lt;/comment>&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="INPUT_sourceValues" />&#xd;
      &lt;/sources>&#xd;
      &lt;functions>&#xd;
        &lt;function name="date_sort" type="DateFormat">&#xd;
          &lt;inputs>&#xd;
            &lt;input nameref="${db_dimensionTime}" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;targetformat>${intern_dateFormat}&lt;/targetformat>&#xd;
            &lt;sourceformat>${time_dateFormatSourceMonthly}&lt;/sourceformat>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
      &lt;/functions>&#xd;
      &lt;target>&#xd;
        &lt;coordinates include="." />&#xd;
      &lt;/target>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1599657357196" name="TA_outlier" type="TableAggregation" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[Convert a column with a value in each row into a single string with comma separated values (this format is required for the web service).]]&gt;&lt;/comment>&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="TN_outlierInput" />&#xd;
      &lt;/sources>&#xd;
      &lt;target>&#xd;
        &lt;coordinates keepSourceOrder="false" />&#xd;
        &lt;measures>&#xd;
          &lt;measure aggregate="group_concat" name="aip_inputValues" type="text">&#xd;
            &lt;input nameref="#Value" />&#xd;
          &lt;/measure>&#xd;
        &lt;/measures>&#xd;
      &lt;/target>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1612343763073" name="FT_calculateDateInputs_pod" type="FieldTransform" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[Input for Loop job containing variables.
Calculates all the time related variables automatically.]]&gt;&lt;/comment>&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="VAR_service" />&#xd;
      &lt;/sources>&#xd;
      &lt;functions>&#xd;
        &lt;function name="intern_curFormatDay" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="cur" constant="${time_currentFormat}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[num = (cur =~ /d/).count;
if(num == 2)
	return "dd";
else
  return "";]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_curFormatMonth" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="cur" constant="${time_currentFormat}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[num = (cur =~ /M/).count;
if(num == 2)
	return "MM";
else if (num == 3)
  return "MMM";
else if (num == 4)
  return "MMMM";
else 
  return "";]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_curFormatYear" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="cur" constant="${time_currentFormat}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[num = (cur =~ /y/).count;
if(num == 2)
	return "yy";
else if (num == 4)
  return "yyyy";
else 
  return "";]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_firstInputYear" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="date" constant="${time_inputStartDate}" type="String" />&#xd;
            &lt;input alias="acceptedFormat" nameref="intern_curFormatYear" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[def cur = new Date().parse(format, date);
return cur.format(acceptedFormat);]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_firstInputMonth" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="date" constant="${time_inputStartDate}" type="String" />&#xd;
            &lt;input alias="acceptedFormat" nameref="intern_curFormatMonth" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[def cur = new Date().parse(format, date);
return cur.format(acceptedFormat);]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_firstInputDay" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="date" constant="${time_inputStartDate}" type="String" />&#xd;
            &lt;input alias="acceptedFormat" nameref="intern_curFormatDay" type="String" />&#xd;
            &lt;input alias="day" constant="${time_dateDailySeparator}" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (day == "\$") {
	return "";
}
def cur = new Date().parse(format, date);
return cur.format(acceptedFormat);]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_lastInputYear" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="date" constant="${time_inputEndDate}" type="String" />&#xd;
            &lt;input alias="acceptedFormat" nameref="intern_curFormatYear" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[def cur = new Date().parse(format, date);
return cur.format(acceptedFormat);]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_lastInputMonth" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="date" constant="${time_inputEndDate}" type="String" />&#xd;
            &lt;input alias="acceptedFormat" nameref="intern_curFormatMonth" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[def cur = new Date().parse(format, date);
return cur.format(acceptedFormat);]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_lastInputDay" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="date" constant="${time_inputEndDate}" type="String" /&gt;&#xd;
            &lt;input alias="acceptedFormat" nameref="intern_curFormatDay" type="String" />&#xd;
            &lt;input alias="day" constant="${time_dateDailySeparator}" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (day == "\$") {
	return "";
}
def cur = new Date().parse(format, date);
return cur.format(acceptedFormat);]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_firstTrgYear" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="date" constant="${time_elementStart}" type="String" />&#xd;
            &lt;input alias="acceptedFormat" nameref="intern_curFormatYear" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[def cur = new Date().parse(format, date);
return cur.format(acceptedFormat);]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_firstTrgMonth" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="date" constant="${time_elementStart}" type="String" />&#xd;
            &lt;input alias="acceptedFormat" nameref="intern_curFormatMonth" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[def cur = new Date().parse(format, date);
return cur.format(acceptedFormat);]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_firstTrgDay" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="date" constant="${time_elementStart}" type="String" />&#xd;
            &lt;input alias="acceptedFormat" nameref="intern_curFormatDay" type="String" />&#xd;
            &lt;input alias="day" constant="${time_dateDailySeparator}" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (day == "\$") {
	return "";
}
def cur = new Date().parse(format, date);
return cur.format(acceptedFormat);]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_lastTrgYear" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="date" constant="${time_elementEnd}" type="String" />&#xd;
            &lt;input alias="acceptedFormat" nameref="intern_curFormatYear" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[def cur = new Date().parse(format, date);
return cur.format(acceptedFormat);]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_lastTrgMonth" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="date" constant="${time_elementEnd}" type="String" />&#xd;
            &lt;input alias="acceptedFormat" nameref="intern_curFormatMonth" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[def cur = new Date().parse(format, date);
return cur.format(acceptedFormat);]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_lastTrgDay" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="date" constant="${time_elementEnd}" type="String" />&#xd;
            &lt;input alias="acceptedFormat" nameref="intern_curFormatDay" type="String" />&#xd;
            &lt;input alias="day" constant="${time_dateDailySeparator}" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (day == "\$") {
	return "";
}
def cur = new Date().parse(format, date);
return cur.format(acceptedFormat);]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_srcYearRange" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="first" nameref="intern_firstInputYear" type="int" />&#xd;
            &lt;input alias="last" nameref="intern_lastInputYear" type="int" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
            &lt;script>&lt;![CDATA[first = first+1;
last = last;
// only create if there is a middle part
if(first&lt;last) {
  srcYearRng = "("+first;

  for(i=first+1;i&lt;last;i++)
  {
   srcYearRng =  srcYearRng+"|"+i;
  }
  srcYearRng =  srcYearRng+")";
}
else if(first-1 == last)
  return "§";
else
  return last;]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_trgYearRange" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="first" nameref="intern_firstTrgYear" type="int" />&#xd;
            &lt;input alias="last" nameref="intern_lastTrgYear" type="int" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[first = first +1;
last = last-1;
// only create if there is a middle part
if(first&lt;last) {
  srcYearRng = "("+first;

  for(i=first+1;i&lt;=last;i++)
  {
   srcYearRng =  srcYearRng+"|"+i;
  }
  srcYearRng =  srcYearRng+")";
}
else if(first-1 == last+1)
  return "§";
else
  return last+1;]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_monthAccept" type="Groovy">&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[import groovy.time.TimeCategory

def acceptedFormat = "MM";
// set first month
def cur = new Date().parse(acceptedFormat, "1");

rolling = "("+cur.format(acceptedFormat);

use(TimeCategory) {

for (i = 2; i &lt;=12; i++)
{
  cur = cur + 1.month;
  rolling = rolling + "|" + cur.format(acceptedFormat);
}
  
rolling = rolling + ")";
}

return rolling;]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="rng_blockSrcBeginning" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="month" nameref="intern_firstInputMonth" type="String" />&#xd;
            &lt;input alias="all" nameref="intern_monthAccept" type="String" />&#xd;
            &lt;input alias="format" nameref="intern_curFormatMonth" type="String" />&#xd;
            &lt;input alias="rng" nameref="intern_srcYearRange" type="String" />&#xd;
            &lt;input alias="last" nameref="intern_lastInputMonth" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[import groovy.time.TimeCategory

int m = month.toInteger();
if(rng == "§")
	l = last.toInteger();
else
  l = 12;

def cur = new Date().parse(format, month);

use(TimeCategory) {
  rolling = "("+cur.format(format);

  //until end of the year
  for (i = m; i &lt;l; i++)
  {
	cur = cur + 1.month;
	rolling = rolling + "|" + cur.format(format);
  }

  rolling = rolling + ")";
}

return rolling;]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="rng_blockSrcEnd" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="month" nameref="intern_lastInputMonth" type="String" />&#xd;
            &lt;input alias="all" nameref="intern_monthAccept" type="String" />&#xd;
            &lt;input alias="format" nameref="intern_curFormatMonth" type="String" />&#xd;
            &lt;input alias="rng" nameref="intern_srcYearRange" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[import groovy.time.TimeCategory

if(rng=="§")
	return "§";

int m = month.toInteger();
if(m==12)
	  return all;

def cur = new Date().parse(format, "1");
rolling = "("+cur.format(format);

use(TimeCategory) {

for (i = 1; i &lt;m; i++)
{
  cur = cur + 1.month;
  rolling = rolling + "|" + cur.format(format);
}
  
rolling = rolling + ")";
}

return rolling;]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="rng_blockSrcBeginningDays" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="day" nameref="intern_firstInputDay" type="String" />&#xd;
            &lt;input alias="format" nameref="intern_curFormatDay" type="String" />&#xd;
            &lt;input alias="daily" constant="${time_dateDailySeparator}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[import groovy.time.TimeCategory
if(daily == "\$")
	return "§";

int m = day.toInteger();

if(m == 1)
	return "§";

def cur = new Date().parse(format, "1");
rolling = "("+cur.format(format);

use(TimeCategory) {

for (i = 2; i &lt;m; i++)
{
  cur = cur + 1.day;
  rolling = rolling + "|" + cur.format(format);
}
  
rolling = rolling + ")";
}

return rolling;]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="rng_blockSrcEndDays" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="day" nameref="intern_lastInputDay" type="String" />&#xd;
            &lt;input alias="format" nameref="intern_curFormatDay" type="String" />&#xd;
            &lt;input alias="daily" constant="${time_dateDailySeparator}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[import groovy.time.TimeCategory

if(daily == "\$")
	return "§";

int m = day.toInteger();
if(m == 31)
	return "§";

def cur = new Date().parse(format, day);

use(TimeCategory) {
  cur = cur + 1.day;
  rolling = "("+cur.format(format);

  //until end of the year
  for (i = m+1; i &lt;31; i++)
  {
	cur = cur + 1.day;
	rolling = rolling + "|" + cur.format(format);
  }

  rolling = rolling + ")";
}

return rolling;]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="rng_blockTrgBeginning" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="month" nameref="intern_firstTrgMonth" type="String" />&#xd;
            &lt;input alias="all" nameref="intern_monthAccept" type="String" />&#xd;
            &lt;input alias="format" nameref="intern_curFormatMonth" type="String" />&#xd;
            &lt;input alias="rng" nameref="intern_trgYearRange" type="String" />&#xd;
            &lt;input alias="last" nameref="intern_lastTrgMonth" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[import groovy.time.TimeCategory

int m = month.toInteger();
if(rng == "§")
	l = last.toInteger();
else
  l = 12;

def cur = new Date().parse(format, month);

use(TimeCategory) {
  rolling = "("+cur.format(format);

  //until end of the year
  for (i = m; i &lt;l; i++)
  {
	cur = cur + 1.month;
	rolling = rolling + "|" + cur.format(format);
  }

  rolling = rolling + ")";
}

return rolling;]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="rng_blockTrgEnd" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="month" nameref="intern_lastTrgMonth" type="String" />&#xd;
            &lt;input alias="all" nameref="intern_monthAccept" type="String" />&#xd;
            &lt;input alias="format" nameref="intern_curFormatMonth" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[import groovy.time.TimeCategory

int m = month.toInteger();
if(m==12)
	  return all;

def cur = new Date().parse(format, "1");
rolling = "("+cur.format(format);

use(TimeCategory) {

for (i = 1; i &lt;m; i++)
{
  cur = cur + 1.month;
  rolling = rolling + "|" + cur.format(format);
}
  
rolling = rolling + ")";
}

return rolling;]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="rng_blockTrgBeginningDays" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="day" nameref="intern_firstTrgDay" type="String" />&#xd;
            &lt;input alias="format" nameref="intern_curFormatDay" type="String" />&#xd;
            &lt;input alias="daily" constant="${time_dateDailySeparator}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[import groovy.time.TimeCategory

if(daily == "\$")
	return "§";

int m = day.toInteger();
if(m==1)
	return "§";

def cur = new Date().parse(format, "1");

use(TimeCategory) {
  rolling = "("+cur.format(format);

  //until end of the year
  for (i = 2; i &lt;m; i++)
  {
	cur = cur + 1.day;
	rolling = rolling + "|" + cur.format(format);
  }

  rolling = rolling + ")";
}

return rolling;]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_extractSourceAccept_1" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="year" nameref="intern_firstInputYear" type="String" />&#xd;
            &lt;input alias="Y" nameref="intern_curFormatYear" type="String" />&#xd;
            &lt;input alias="day" constant="${time_dateDailySeparator}" type="String" />&#xd;
            &lt;input alias="month" nameref="rng_blockSrcBeginning" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
            &lt;input alias="M" nameref="intern_curFormatMonth" type="String" />&#xd;
            &lt;input alias="D" nameref="intern_curFormatDay" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[// which position is year, which month, which days
arr = format;
if (day == "\$") {
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  return "^"+arr+"\$";
}
else{
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  arr = arr.replaceAll(D,"[0-3][0-9]");
  return "^"+arr+"\$";
}]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_extractSourceAccept_2" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="year" nameref="intern_srcYearRange" type="String" />&#xd;
            &lt;input alias="Y" nameref="intern_curFormatYear" type="String" />&#xd;
            &lt;input alias="day" constant="${time_dateDailySeparator}" type="String" />&#xd;
            &lt;input alias="month" nameref="intern_monthAccept" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
            &lt;input alias="M" nameref="intern_curFormatMonth" type="String" />&#xd;
            &lt;input alias="D" nameref="intern_curFormatDay" type="String" />&#xd;
            &lt;input alias="lastYear" nameref="intern_lastInputYear" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[// which position is year, which month, which days
if(lastYear == year)
	return "^§\$";

arr = format;
if (day == "\$") {
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  return "^"+arr+"\$";
}
else{
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  arr = arr.replaceAll(D,"[0-3][0-9]");
  return "^"+arr+"\$";
}]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_extractSourceAccept_3" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="year" nameref="intern_lastInputYear" type="String" />&#xd;
            &lt;input alias="Y" nameref="intern_curFormatYear" type="String" />&#xd;
            &lt;input alias="day" constant="${time_dateDailySeparator}" type="String" />&#xd;
            &lt;input alias="month" nameref="rng_blockSrcEnd" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
            &lt;input alias="M" nameref="intern_curFormatMonth" type="String" />&#xd;
            &lt;input alias="D" nameref="intern_curFormatDay" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[// which position is year, which month, which days

arr = format;
if (day == "\$") {
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  return "^"+arr+"\$";
}
else{
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  arr = arr.replaceAll(D,"[0-3][0-9]");
  return "^"+arr+"\$";
}]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_extractTargetAccept_1" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="year" nameref="intern_firstTrgYear" type="String" />&#xd;
            &lt;input alias="Y" nameref="intern_curFormatYear" type="String" />&#xd;
            &lt;input alias="day" constant="${time_dateDailySeparator}" type="String" />&#xd;
            &lt;input alias="month" nameref="rng_blockTrgBeginning" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
            &lt;input alias="M" nameref="intern_curFormatMonth" type="String" />&#xd;
            &lt;input alias="D" nameref="intern_curFormatDay" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[// which position is year, which month, which days
arr = format;
if (day == "\$") {
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  return "^"+arr+"\$";
}
else{
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  arr = arr.replaceAll(D,"[0-3][0-9]");
  return "^"+arr+"\$";
}]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_extractTargetAccept_2" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="year" nameref="intern_trgYearRange" type="String" />&#xd;
            &lt;input alias="Y" nameref="intern_curFormatYear" type="String" />&#xd;
            &lt;input alias="day" constant="${time_dateDailySeparator}" type="String" />&#xd;
            &lt;input alias="month" nameref="intern_monthAccept" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
            &lt;input alias="M" nameref="intern_curFormatMonth" type="String" />&#xd;
            &lt;input alias="D" nameref="intern_curFormatDay" type="String" />&#xd;
            &lt;input alias="lastYear" nameref="intern_lastTrgYear" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[// which position is year, which month, which days
if(lastYear == year)
	return "^§\$";

arr = format;
if (day == "\$") {
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  return "^"+arr+"\$";
}
else{
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  arr = arr.replaceAll(D,"[0-3][0-9]");
  return "^"+arr+"\$";
}]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_extractTargetAccept_3" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="year" nameref="intern_lastTrgYear" type="String" />&#xd;
            &lt;input alias="Y" nameref="intern_curFormatYear" type="String" />&#xd;
            &lt;input alias="day" constant="${time_dateDailySeparator}" type="String" />&#xd;
            &lt;input alias="month" nameref="rng_blockTrgEnd" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
            &lt;input alias="M" nameref="intern_curFormatMonth" type="String" />&#xd;
            &lt;input alias="D" nameref="intern_curFormatDay" type="String" />&#xd;
            &lt;input alias="first" nameref="intern_firstTrgYear" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[// which position is year, which month, which days
if(first == year)
	return "^§\$";

arr = format;
if (day == "\$") {
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  return "^"+arr+"\$";
}
else{
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  arr = arr.replaceAll(D,"[0-3][0-9]");
  return "^"+arr+"\$";
}]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_extractCopyAccept_1" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="year" nameref="intern_firstTrgYear" type="String" />&#xd;
            &lt;input alias="Y" nameref="intern_curFormatYear" type="String" />&#xd;
            &lt;input alias="month" nameref="rng_blockTrgBeginning" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
            &lt;input alias="targetAccept" nameref="intern_extractTargetAccept_1" type="String" />&#xd;
            &lt;input alias="copyByWeekday" constant="${intern_copyByWeekday}" type="int" />&#xd;
            &lt;input alias="M" nameref="intern_curFormatMonth" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[//daily copy
if(copyByWeekday == 1)
	return targetAccept;
// monthly copy
else {
  arr = format;
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  return "^"+arr+"\$";
}
return "";]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_extractCopyAccept_2" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="year" nameref="intern_trgYearRange" type="String" />&#xd;
            &lt;input alias="Y" nameref="intern_curFormatYear" type="String" />&#xd;
            &lt;input alias="month" nameref="intern_monthAccept" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
            &lt;input alias="targetAccept" nameref="intern_extractTargetAccept_2" type="String" />&#xd;
            &lt;input alias="copyByWeekday" constant="${intern_copyByWeekday}" type="int" />&#xd;
            &lt;input alias="M" nameref="intern_curFormatMonth" type="String" />&#xd;
            &lt;input alias="lastYear" nameref="intern_lastTrgYear" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[//daily copy
if(lastYear == year)
	return "^§\$";

if(copyByWeekday == 1)
	return targetAccept;
// monthly copy
else {
  arr = format;
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  return "^"+arr+"\$";
}
return "";]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_extractCopyAccept_3" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="year" nameref="intern_lastTrgYear" type="String" />&#xd;
            &lt;input alias="Y" nameref="intern_curFormatYear" type="String" />&#xd;
            &lt;input alias="month" nameref="rng_blockTrgEnd" type="String" />&#xd;
            &lt;input alias="format" constant="${time_dateFormatSourceMonthly}" type="String" />&#xd;
            &lt;input alias="targetAccept" nameref="intern_extractTargetAccept_3" type="String" />&#xd;
            &lt;input alias="copyByWeekday" constant="${intern_copyByWeekday}" type="int" />&#xd;
            &lt;input alias="M" nameref="intern_curFormatMonth" type="String" />&#xd;
            &lt;input alias="first" nameref="intern_firstTrgYear" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[//daily copy
if(first == year)
	return "^§\$";

if(copyByWeekday == 1)
	return targetAccept;
// monthly copy
else {
  arr = format;
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  return "^"+arr+"\$";
}
return "";]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_dateFormat" type="Switch">&#xd;
          &lt;inputs>&#xd;
            &lt;input constant="${time_dateDailySeparator}" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;default>&#xd;
              &lt;result constant="yyyyMM" />&#xd;
            &lt;/default>&#xd;
            &lt;switchs>&#xd;
              &lt;switch>&#xd;
                &lt;condition operator="equal" type="accept" value="$" />&#xd;
                &lt;result constant="yyyyMM" />&#xd;
              &lt;/switch>&#xd;
              &lt;switch>&#xd;
                &lt;condition operator="equal" type="accept" value="(..)" />&#xd;
                &lt;result constant="yyyyMMdd" />&#xd;
              &lt;/switch>&#xd;
            &lt;/switchs>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_inputRange" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="date1" constant="${time_elementStart}" type="String" />&#xd;
            &lt;input alias="date2" constant="${time_inputStartDate}" type="String" />&#xd;
            &lt;input alias="internFormat" constant="${time_dateFormatSourceMonthly}" type="String" />&#xd;
            &lt;input alias="daily" constant="${time_dateDailySeparator}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>int&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[import groovy.time.TimeCategory;

Date d1 = Date.parse(internFormat, date1);
Date d2 = Date.parse(internFormat, date2);

if(daily == "\$") {
	years = ((int)d1.year-(int)d2.year)*12;
	months = (int)d1.month-(int)d2.month;
	return years + months;
}
else
	return d1-d2;]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="period" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="a" constant="${ext_period}" type="float" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>int&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[return a;]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_dateCopyFormat" type="Switch">&#xd;
          &lt;inputs>&#xd;
            &lt;input constant="${intern_copyByWeekday}" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;default>&#xd;
              &lt;result constant="${intern_copyDaysMonthlySort}" />&#xd;
            &lt;/default>&#xd;
            &lt;switchs>&#xd;
              &lt;switch>&#xd;
                &lt;condition operator="equal" type="accept" value="1" />&#xd;
                &lt;result constant="${intern_dateFormat}" />&#xd;
              &lt;/switch>&#xd;
            &lt;/switchs>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_copyDaysFormat" type="Switch">&#xd;
          &lt;inputs>&#xd;
            &lt;input constant="${intern_copyByWeekday}" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;default>&#xd;
              &lt;result constant="${time_dateFormatSourceMonthly}" />&#xd;
            &lt;/default>&#xd;
            &lt;switchs>&#xd;
              &lt;switch>&#xd;
                &lt;condition operator="equal" type="accept" value="1" />&#xd;
                &lt;result constant="${time_currentFormat}" />&#xd;
              &lt;/switch>&#xd;
            &lt;/switchs>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_maxSeries" type="Switch">&#xd;
          &lt;inputs>&#xd;
            &lt;input constant="${time_dateDailySeparator}" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;default>&#xd;
              &lt;result constant="${intern_maxSeries}" />&#xd;
            &lt;/default>&#xd;
            &lt;switchs>&#xd;
              &lt;switch>&#xd;
                &lt;condition operator="like" type="accept" value="(..)" />&#xd;
                &lt;result constant="2" />&#xd;
              &lt;/switch>&#xd;
            &lt;/switchs>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_extractSourceDeny_1" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="year" nameref="intern_firstInputYear" type="String" />&#xd;
            &lt;input alias="M" nameref="intern_curFormatMonth" type="String" />&#xd;
            &lt;input alias="day" constant="${time_dateDailySeparator}" type="String" />&#xd;
            &lt;input alias="month" nameref="intern_firstInputMonth" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
            &lt;input alias="startDays" nameref="rng_blockSrcBeginningDays" type="String" />&#xd;
            &lt;input alias="Y" nameref="intern_curFormatYear" type="String" />&#xd;
            &lt;input alias="D" nameref="intern_curFormatDay" type="String" />&#xd;
            &lt;input alias="daily" constant="${time_dateDailySeparator}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[// which position is year, which month, which days
if(daily == "\$")
	return "^§\$";

arr = format;
if (day == "\$") {
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  return "^"+arr+"\$";
}
else{
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  arr = arr.replaceAll(D,startDays);
  return "^"+arr+"\$";
}]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_extractSourceDeny_3" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="year" nameref="intern_lastInputYear" type="String" />&#xd;
            &lt;input alias="M" nameref="intern_curFormatMonth" type="String" />&#xd;
            &lt;input alias="day" constant="${time_dateDailySeparator}" type="String" />&#xd;
            &lt;input alias="month" nameref="intern_lastInputMonth" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
            &lt;input alias="endDays" nameref="rng_blockSrcEndDays" type="String" />&#xd;
            &lt;input alias="Y" nameref="intern_curFormatYear" type="String" />&#xd;
            &lt;input alias="D" nameref="intern_curFormatDay" type="String" />&#xd;
            &lt;input alias="daily" constant="${time_dateDailySeparator}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[// which position is year, which month, which days
if(daily == "\$")
	return "^§\$";

arr = format;
if (day == "\$") {
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  return "^"+arr+"\$";
}
else{
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  arr = arr.replaceAll(D,endDays);
  return "^"+arr+"\$";
}]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_extractTargetDeny_1" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="year" nameref="intern_firstTrgYear" type="String" />&#xd;
            &lt;input alias="M" nameref="intern_curFormatMonth" type="String" />&#xd;
            &lt;input alias="day" constant="${time_dateDailySeparator}" type="String" />&#xd;
            &lt;input alias="month" nameref="intern_firstTrgMonth" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
            &lt;input alias="startDays" nameref="rng_blockTrgBeginningDays" type="String" />&#xd;
            &lt;input alias="Y" nameref="intern_curFormatYear" type="String" />&#xd;
            &lt;input alias="D" nameref="intern_curFormatDay" type="String" />&#xd;
            &lt;input alias="daily" constant="${time_dateDailySeparator}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[// which position is year, which month, which days
if(daily == "\$")
	return "^§\$";

arr = format;
if (day == "\$") {
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  return "^"+arr+"\$";
}
else{
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  arr = arr.replaceAll(D,startDays);
  return "^"+arr+"\$";
}]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_extractTargetDeny_3" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="year" nameref="intern_lastTrgYear" type="String" />&#xd;
            &lt;input alias="M" nameref="intern_curFormatMonth" type="String" />&#xd;
            &lt;input alias="day" constant="${time_dateDailySeparator}" type="String" />&#xd;
            &lt;input alias="month" nameref="intern_lastTrgMonth" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
            &lt;input alias="endDays" nameref="rng_blockTrgEnd" type="String" />&#xd;
            &lt;input alias="Y" nameref="intern_curFormatYear" type="String" />&#xd;
            &lt;input alias="D" nameref="intern_curFormatDay" type="String" />&#xd;
            &lt;input alias="daily" constant="${time_dateDailySeparator}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[// which position is year, which month, which days
if(daily == "\$")
	return "^§\$";

arr = format;
if (day == "\$") {
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  return "^"+arr+"\$";
}
else{
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  arr = arr.replaceAll(D,endDays);
  return "^"+arr+"\$";
}]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_extractCopyDeny_1" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="year" nameref="intern_lastTrgYear" type="String" />&#xd;
            &lt;input alias="M" nameref="intern_curFormatMonth" type="String" />&#xd;
            &lt;input alias="copyByWeekday" constant="${intern_copyByWeekday}" type="String" />&#xd;
            &lt;input alias="month" nameref="intern_lastTrgMonth" type="String" />&#xd;
            &lt;input alias="format" constant="${time_dateFormatSourceMonthly}" type="String" />&#xd;
            &lt;input alias="Y" nameref="intern_curFormatYear" type="String" />&#xd;
            &lt;input alias="D" nameref="intern_curFormatDay" type="String" />&#xd;
            &lt;input alias="daily" constant="${time_dateDailySeparator}" type="String" />&#xd;
            &lt;input alias="targetDeny" nameref="intern_extractTargetDeny_1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[// which position is year, which month, which days
if(daily == "\$")
	return "^§\$";

if(copyByWeekday == 1)
	return targetDeny;
else{
  arr = format;
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  return "^"+arr+"\$";
}]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_extractCopyDeny_3" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="year" nameref="intern_lastTrgYear" type="String" />&#xd;
            &lt;input alias="M" nameref="intern_curFormatMonth" type="String" />&#xd;
            &lt;input alias="day" constant="${time_dateDailySeparator}" type="String" />&#xd;
            &lt;input alias="month" nameref="intern_lastTrgMonth" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
            &lt;input alias="endDays" nameref="rng_blockTrgEnd" type="String" />&#xd;
            &lt;input alias="Y" nameref="intern_curFormatYear" type="String" />&#xd;
            &lt;input alias="D" nameref="intern_curFormatDay" type="String" />&#xd;
            &lt;input alias="daily" constant="${time_dateDailySeparator}" type="String" />&#xd;
            &lt;input alias="taregtDeny" nameref="intern_extractTargetDeny_3" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[// which position is year, which month, which days
if(daily == "\$")
	return "^§\$";

if(copyByWeekday == 1)
	return targetDeny;

arr = format;
if (day == "\$") {
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  return "^"+arr+"\$";
}
else{
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  arr = arr.replaceAll(D,endDays);
  return "^"+arr+"\$";
}]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="service_protocol" type="Switch">&#xd;
          &lt;inputs>&#xd;
            &lt;input constant="${sys_AIssistedURL}" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;default>&#xd;
              &lt;result constant="https" />&#xd;
            &lt;/default>&#xd;
            &lt;switchs>&#xd;
              &lt;switch>&#xd;
                &lt;condition operator="equal" type="accept" value="jedox" />&#xd;
                &lt;result constant="http" />&#xd;
              &lt;/switch>&#xd;
            &lt;/switchs>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="service_combinedURL" type="Switch">&#xd;
          &lt;inputs>&#xd;
            &lt;input constant="${sys_AIssistedURL}" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;default>&#xd;
              &lt;result constant="${sys_AIssistedURL}:${sys_AIssistedPort}" />&#xd;
            &lt;/default>&#xd;
            &lt;switchs>&#xd;
              &lt;switch>&#xd;
                &lt;condition operator="equal" type="accept" value="jedox" />&#xd;
                &lt;result constant="jedox" />&#xd;
              &lt;/switch>&#xd;
            &lt;/switchs>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="service_api" type="Switch">&#xd;
          &lt;inputs>&#xd;
            &lt;input constant="${sys_AIssistedURL}" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;default>&#xd;
              &lt;result constant="api" />&#xd;
            &lt;/default>&#xd;
            &lt;switchs>&#xd;
              &lt;switch>&#xd;
                &lt;condition operator="equal" type="accept" value="jedox" />&#xd;
                &lt;result constant="ai-r/api" />&#xd;
              &lt;/switch>&#xd;
            &lt;/switchs>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
      &lt;/functions>&#xd;
      &lt;target>&#xd;
        &lt;coordinates>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_extractSourceAccept_1" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_extractSourceAccept_2" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_extractSourceAccept_3" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_extractTargetAccept_1" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_extractTargetAccept_2" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_extractTargetAccept_3" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_extractCopyAccept_1" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_extractCopyAccept_2" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_extractCopyAccept_3" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_dateFormat" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_inputRange" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate name="aip_period">&#xd;
            &lt;input nameref="period" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_dateCopyFormat" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_copyDaysFormat" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_maxSeries" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_extractSourceDeny_1" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_extractSourceDeny_3" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_extractTargetDeny_1" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_extractTargetDeny_3" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_extractCopyDeny_1" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_extractCopyDeny_3" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="service_protocol" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="service_combinedURL" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="service_api" />&#xd;
          &lt;/coordinate>&#xd;
        &lt;/coordinates>&#xd;
      &lt;/target>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
    &lt;transform modified="1610982561783" name="FT_calculateDateInputs" type="FieldTransform" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[Input for Loop job containing variables.
Calculates all the time related variables automatically.]]&gt;&lt;/comment>&#xd;
      &lt;sources>&#xd;
        &lt;source nameref="AIP_extractToken" />&#xd;
      &lt;/sources>&#xd;
      &lt;functions>&#xd;
        &lt;function name="intern_curFormatDay" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="cur" constant="${time_currentFormat}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[num = (cur =~ /d/).count;
if(num == 2)
	return "dd";
else
  return "";]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_curFormatMonth" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="cur" constant="${time_currentFormat}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[num = (cur =~ /M/).count;
if(num == 2)
	return "MM";
else if (num == 3)
  return "MMM";
else if (num == 4)
  return "MMMM";
else 
  return "";]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_curFormatYear" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="cur" constant="${time_currentFormat}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[num = (cur =~ /y/).count;
if(num == 2)
	return "yy";
else if (num == 4)
  return "yyyy";
else 
  return "";]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_firstInputYear" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="date" constant="${time_inputStartDate}" type="String" />&#xd;
            &lt;input alias="acceptedFormat" nameref="intern_curFormatYear" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[def cur = new Date().parse(format, date);
return cur.format(acceptedFormat);]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_firstInputMonth" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="date" constant="${time_inputStartDate}" type="String" />&#xd;
            &lt;input alias="acceptedFormat" nameref="intern_curFormatMonth" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[def cur = new Date().parse(format, date);
return cur.format(acceptedFormat);]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_firstInputDay" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="date" constant="${time_inputStartDate}" type="String" />&#xd;
            &lt;input alias="acceptedFormat" nameref="intern_curFormatDay" type="String" />&#xd;
            &lt;input alias="day" constant="${time_dateDailySeparator}" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (day == "\$") {
	return "";
}
def cur = new Date().parse(format, date);
return cur.format(acceptedFormat);]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_lastInputYear" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="date" constant="${time_inputEndDate}" type="String" />&#xd;
            &lt;input alias="acceptedFormat" nameref="intern_curFormatYear" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[def cur = new Date().parse(format, date);
return cur.format(acceptedFormat);]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_lastInputMonth" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="date" constant="${time_inputEndDate}" type="String" />&#xd;
            &lt;input alias="acceptedFormat" nameref="intern_curFormatMonth" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[def cur = new Date().parse(format, date);
return cur.format(acceptedFormat);]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_lastInputDay" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="date" constant="${time_inputEndDate}" type="String" />&#xd;
            &lt;input alias="acceptedFormat" nameref="intern_curFormatDay" type="String" />&#xd;
            &lt;input alias="day" constant="${time_dateDailySeparator}" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (day == "\$") {
	return "";
}
def cur = new Date().parse(format, date);
return cur.format(acceptedFormat);]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_firstTrgYear" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="date" constant="${time_elementStart}" type="String" />&#xd;
            &lt;input alias="acceptedFormat" nameref="intern_curFormatYear" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[def cur = new Date().parse(format, date);
return cur.format(acceptedFormat);]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_firstTrgMonth" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="date" constant="${time_elementStart}" type="String" />&#xd;
            &lt;input alias="acceptedFormat" nameref="intern_curFormatMonth" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[def cur = new Date().parse(format, date);
return cur.format(acceptedFormat);]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_firstTrgDay" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="date" constant="${time_elementStart}" type="String" />&#xd;
            &lt;input alias="acceptedFormat" nameref="intern_curFormatDay" type="String" />&#xd;
            &lt;input alias="day" constant="${time_dateDailySeparator}" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (day == "\$") {
	return "";
}
def cur = new Date().parse(format, date);
return cur.format(acceptedFormat);]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_lastTrgYear" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="date" constant="${time_elementEnd}" type="String" />&#xd;
            &lt;input alias="acceptedFormat" nameref="intern_curFormatYear" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[def cur = new Date().parse(format, date);
return cur.format(acceptedFormat);]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_lastTrgMonth" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="date" constant="${time_elementEnd}" type="String" />&#xd;
            &lt;input alias="acceptedFormat" nameref="intern_curFormatMonth" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[def cur = new Date().parse(format, date);
return cur.format(acceptedFormat);]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_lastTrgDay" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="date" constant="${time_elementEnd}" type="String" />&#xd;
            &lt;input alias="acceptedFormat" nameref="intern_curFormatDay" type="String" />&#xd;
            &lt;input alias="day" constant="${time_dateDailySeparator}" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[if (day == "\$") {
	return "";
}
def cur = new Date().parse(format, date);
return cur.format(acceptedFormat);]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_srcYearRange" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="first" nameref="intern_firstInputYear" type="int" />&#xd;
            &lt;input alias="last" nameref="intern_lastInputYear" type="int" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
            &lt;script>&lt;![CDATA[first = first+1;
last = last;
// only create if there is a middle part
if(first&lt;last) {
  srcYearRng = "("+first;

  for(i=first+1;i&lt;last;i++)
  {
   srcYearRng =  srcYearRng+"|"+i;
  }
  srcYearRng =  srcYearRng+")";
}
else if(first-1 == last)
  return "§";
else
  return last;]]&gt;&lt;/script>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_trgYearRange" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="first" nameref="intern_firstTrgYear" type="int" />&#xd;
            &lt;input alias="last" nameref="intern_lastTrgYear" type="int" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[first = first +1;
last = last-1;
// only create if there is a middle part
if(first&lt;last) {
  srcYearRng = "("+first;

  for(i=first+1;i&lt;=last;i++)
  {
   srcYearRng =  srcYearRng+"|"+i;
  }
  srcYearRng =  srcYearRng+")";
}
else if(first-1 == last+1)
  return "§";
else
  return last+1;]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_monthAccept" type="Groovy">&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[import groovy.time.TimeCategory

def acceptedFormat = "MM";
// set first month
def cur = new Date().parse(acceptedFormat, "1");

rolling = "("+cur.format(acceptedFormat);

use(TimeCategory) {

for (i = 2; i &lt;=12; i++)
{
  cur = cur + 1.month;
  rolling = rolling + "|" + cur.format(acceptedFormat);
}
  
rolling = rolling + ")";
}

return rolling;]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="rng_blockSrcBeginning" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="month" nameref="intern_firstInputMonth" type="String" />&#xd;
            &lt;input alias="all" nameref="intern_monthAccept" type="String" />&#xd;
            &lt;input alias="format" nameref="intern_curFormatMonth" type="String" />&#xd;
            &lt;input alias="rng" nameref="intern_srcYearRange" type="String" />&#xd;
            &lt;input alias="last" nameref="intern_lastInputMonth" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[import groovy.time.TimeCategory

int m = month.toInteger();
if(rng == "§")
	l = last.toInteger();
else
  l = 12;

def cur = new Date().parse(format, month);

use(TimeCategory) {
  rolling = "("+cur.format(format);

  //until end of the year
  for (i = m; i &lt;l; i++)
  {
	cur = cur + 1.month;
	rolling = rolling + "|" + cur.format(format);
  }

  rolling = rolling + ")";
}

return rolling;]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="rng_blockSrcEnd" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="month" nameref="intern_lastInputMonth" type="String" />&#xd;
            &lt;input alias="all" nameref="intern_monthAccept" type="String" />&#xd;
            &lt;input alias="format" nameref="intern_curFormatMonth" type="String" />&#xd;
            &lt;input alias="rng" nameref="intern_srcYearRange" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[import groovy.time.TimeCategory

if(rng=="§")
	return "§";

int m = month.toInteger();
if(m==12)
	  return all;

def cur = new Date().parse(format, "1");
rolling = "("+cur.format(format);

use(TimeCategory) {

for (i = 1; i &lt;m; i++)
{
  cur = cur + 1.month;
  rolling = rolling + "|" + cur.format(format);
}
  
rolling = rolling + ")";
}

return rolling;]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="rng_blockSrcBeginningDays" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="day" nameref="intern_firstInputDay" type="String" />&#xd;
            &lt;input alias="format" nameref="intern_curFormatDay" type="String" />&#xd;
            &lt;input alias="daily" constant="${time_dateDailySeparator}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[import groovy.time.TimeCategory
if(daily == "\$")
	return "§";

int m = day.toInteger();

if(m == 1)
	return "§";

def cur = new Date().parse(format, "1");
rolling = "("+cur.format(format);

use(TimeCategory) {

for (i = 2; i &lt;m; i++)
{
  cur = cur + 1.day;
  rolling = rolling + "|" + cur.format(format);
}
  
rolling = rolling + ")";
}

return rolling;]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="rng_blockSrcEndDays" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="day" nameref="intern_lastInputDay" type="String" />&#xd;
            &lt;input alias="format" nameref="intern_curFormatDay" type="String" />&#xd;
            &lt;input alias="daily" constant="${time_dateDailySeparator}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[import groovy.time.TimeCategory

if(daily == "\$")
	return "§";

int m = day.toInteger();
if(m == 31)
	return "§";

def cur = new Date().parse(format, day);

use(TimeCategory) {
  cur = cur + 1.day;
  rolling = "("+cur.format(format);

  //until end of the year
  for (i = m+1; i &lt;31; i++)
  {
	cur = cur + 1.day;
	rolling = rolling + "|" + cur.format(format);
  }

  rolling = rolling + ")";
}

return rolling;]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="rng_blockTrgBeginning" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="month" nameref="intern_firstTrgMonth" type="String" />&#xd;
            &lt;input alias="all" nameref="intern_monthAccept" type="String" />&#xd;
            &lt;input alias="format" nameref="intern_curFormatMonth" type="String" />&#xd;
            &lt;input alias="rng" nameref="intern_trgYearRange" type="String" />&#xd;
            &lt;input alias="last" nameref="intern_lastTrgMonth" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[import groovy.time.TimeCategory

int m = month.toInteger();
if(rng == "§")
	l = last.toInteger();
else
  l = 12;

def cur = new Date().parse(format, month);

use(TimeCategory) {
  rolling = "("+cur.format(format);

  //until end of the year
  for (i = m; i &lt;l; i++)
  {
	cur = cur + 1.month;
	rolling = rolling + "|" + cur.format(format);
  }

  rolling = rolling + ")";
}

return rolling;]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="rng_blockTrgEnd" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="month" nameref="intern_lastTrgMonth" type="String" />&#xd;
            &lt;input alias="all" nameref="intern_monthAccept" type="String" />&#xd;
            &lt;input alias="format" nameref="intern_curFormatMonth" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[import groovy.time.TimeCategory

int m = month.toInteger();
if(m==12)
	  return all;

def cur = new Date().parse(format, "1");
rolling = "("+cur.format(format);

use(TimeCategory) {

for (i = 1; i &lt;m; i++)
{
  cur = cur + 1.month;
  rolling = rolling + "|" + cur.format(format);
}
  
rolling = rolling + ")";
}

return rolling;]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="rng_blockTrgBeginningDays" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="day" nameref="intern_firstTrgDay" type="String" />&#xd;
            &lt;input alias="format" nameref="intern_curFormatDay" type="String" />&#xd;
            &lt;input alias="daily" constant="${time_dateDailySeparator}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>String&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[import groovy.time.TimeCategory

if(daily == "\$")
	return "§";

int m = day.toInteger();
if(m==1)
	return "§";

def cur = new Date().parse(format, "1");

use(TimeCategory) {
  rolling = "("+cur.format(format);

  //until end of the year
  for (i = 2; i &lt;m; i++)
  {
	cur = cur + 1.day;
	rolling = rolling + "|" + cur.format(format);
  }

  rolling = rolling + ")";
}

return rolling;]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_extractSourceAccept_1" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="year" nameref="intern_firstInputYear" type="String" />&#xd;
            &lt;input alias="Y" nameref="intern_curFormatYear" type="String" />&#xd;
            &lt;input alias="day" constant="${time_dateDailySeparator}" type="String" />&#xd;
            &lt;input alias="month" nameref="rng_blockSrcBeginning" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
            &lt;input alias="M" nameref="intern_curFormatMonth" type="String" />&#xd;
            &lt;input alias="D" nameref="intern_curFormatDay" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[// which position is year, which month, which days
arr = format;
if (day == "\$") {
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  return "^"+arr+"\$";
}
else{
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  arr = arr.replaceAll(D,"[0-3][0-9]");
  return "^"+arr+"\$";
}]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_extractSourceAccept_2" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="year" nameref="intern_srcYearRange" type="String" />&#xd;
            &lt;input alias="Y" nameref="intern_curFormatYear" type="String" />&#xd;
            &lt;input alias="day" constant="${time_dateDailySeparator}" type="String" />&#xd;
            &lt;input alias="month" nameref="intern_monthAccept" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
            &lt;input alias="M" nameref="intern_curFormatMonth" type="String" />&#xd;
            &lt;input alias="D" nameref="intern_curFormatDay" type="String" />&#xd;
            &lt;input alias="lastYear" nameref="intern_lastInputYear" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[// which position is year, which month, which days
if(lastYear == year)
	return "^§\$";

arr = format;
if (day == "\$") {
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  return "^"+arr+"\$";
}
else{
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  arr = arr.replaceAll(D,"[0-3][0-9]");
  return "^"+arr+"\$";
}]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_extractSourceAccept_3" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="year" nameref="intern_lastInputYear" type="String" />&#xd;
            &lt;input alias="Y" nameref="intern_curFormatYear" type="String" />&#xd;
            &lt;input alias="day" constant="${time_dateDailySeparator}" type="String" />&#xd;
            &lt;input alias="month" nameref="rng_blockSrcEnd" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
            &lt;input alias="M" nameref="intern_curFormatMonth" type="String" />&#xd;
            &lt;input alias="D" nameref="intern_curFormatDay" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[// which position is year, which month, which days

arr = format;
if (day == "\$") {
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  return "^"+arr+"\$";
}
else{
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  arr = arr.replaceAll(D,"[0-3][0-9]");
  return "^"+arr+"\$";
}]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_extractTargetAccept_1" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="year" nameref="intern_firstTrgYear" type="String" />&#xd;
            &lt;input alias="Y" nameref="intern_curFormatYear" type="String" />&#xd;
            &lt;input alias="day" constant="${time_dateDailySeparator}" type="String" />&#xd;
            &lt;input alias="month" nameref="rng_blockTrgBeginning" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
            &lt;input alias="M" nameref="intern_curFormatMonth" type="String" />&#xd;
            &lt;input alias="D" nameref="intern_curFormatDay" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[// which position is year, which month, which days
arr = format;
if (day == "\$") {
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  return "^"+arr+"\$";
}
else{
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  arr = arr.replaceAll(D,"[0-3][0-9]");
  return "^"+arr+"\$";
}]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_extractTargetAccept_2" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="year" nameref="intern_trgYearRange" type="String" />&#xd;
            &lt;input alias="Y" nameref="intern_curFormatYear" type="String" />&#xd;
            &lt;input alias="day" constant="${time_dateDailySeparator}" type="String" />&#xd;
            &lt;input alias="month" nameref="intern_monthAccept" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
            &lt;input alias="M" nameref="intern_curFormatMonth" type="String" />&#xd;
            &lt;input alias="D" nameref="intern_curFormatDay" type="String" />&#xd;
            &lt;input alias="lastYear" nameref="intern_lastTrgYear" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[// which position is year, which month, which days
if(lastYear == year)
	return "^§\$";

arr = format;
if (day == "\$") {
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  return "^"+arr+"\$";
}
else{
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  arr = arr.replaceAll(D,"[0-3][0-9]");
  return "^"+arr+"\$";
}]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_extractTargetAccept_3" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="year" nameref="intern_lastTrgYear" type="String" />&#xd;
            &lt;input alias="Y" nameref="intern_curFormatYear" type="String" />&#xd;
            &lt;input alias="day" constant="${time_dateDailySeparator}" type="String" />&#xd;
            &lt;input alias="month" nameref="rng_blockTrgEnd" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
            &lt;input alias="M" nameref="intern_curFormatMonth" type="String" />&#xd;
            &lt;input alias="D" nameref="intern_curFormatDay" type="String" />&#xd;
            &lt;input alias="first" nameref="intern_firstTrgYear" type="String" /&gt;&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[// which position is year, which month, which days
if(first == year)
	return "^§\$";

arr = format;
if (day == "\$") {
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  return "^"+arr+"\$";
}
else{
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  arr = arr.replaceAll(D,"[0-3][0-9]");
  return "^"+arr+"\$";
}]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_extractCopyAccept_1" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="year" nameref="intern_firstTrgYear" type="String" />&#xd;
            &lt;input alias="Y" nameref="intern_curFormatYear" type="String" />&#xd;
            &lt;input alias="month" nameref="rng_blockTrgBeginning" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
            &lt;input alias="targetAccept" nameref="intern_extractTargetAccept_1" type="String" />&#xd;
            &lt;input alias="copyByWeekday" constant="${intern_copyByWeekday}" type="int" />&#xd;
            &lt;input alias="M" nameref="intern_curFormatMonth" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[//daily copy
if(copyByWeekday == 1)
	return targetAccept;
// monthly copy
else {
  arr = format;
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  return "^"+arr+"\$";
}
return "";]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_extractCopyAccept_2" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="year" nameref="intern_trgYearRange" type="String" />&#xd;
            &lt;input alias="Y" nameref="intern_curFormatYear" type="String" />&#xd;
            &lt;input alias="month" nameref="intern_monthAccept" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
            &lt;input alias="targetAccept" nameref="intern_extractTargetAccept_2" type="String" />&#xd;
            &lt;input alias="copyByWeekday" constant="${intern_copyByWeekday}" type="int" />&#xd;
            &lt;input alias="M" nameref="intern_curFormatMonth" type="String" />&#xd;
            &lt;input alias="lastYear" nameref="intern_lastTrgYear" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[//daily copy
if(lastYear == year)
	return "^§\$";

if(copyByWeekday == 1)
	return targetAccept;
// monthly copy
else {
  arr = format;
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  return "^"+arr+"\$";
}
return "";]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_extractCopyAccept_3" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="year" nameref="intern_lastTrgYear" type="String" />&#xd;
            &lt;input alias="Y" nameref="intern_curFormatYear" type="String" />&#xd;
            &lt;input alias="month" nameref="rng_blockTrgEnd" type="String" />&#xd;
            &lt;input alias="format" constant="${time_dateFormatSourceMonthly}" type="String" />&#xd;
            &lt;input alias="targetAccept" nameref="intern_extractTargetAccept_3" type="String" />&#xd;
            &lt;input alias="copyByWeekday" constant="${intern_copyByWeekday}" type="int" />&#xd;
            &lt;input alias="M" nameref="intern_curFormatMonth" type="String" />&#xd;
            &lt;input alias="first" nameref="intern_firstTrgYear" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[//daily copy
if(first == year)
	return "^§\$";

if(copyByWeekday == 1)
	return targetAccept;
// monthly copy
else {
  arr = format;
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  return "^"+arr+"\$";
}
return "";]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_dateFormat" type="Switch">&#xd;
          &lt;inputs>&#xd;
            &lt;input constant="${time_dateDailySeparator}" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;default>&#xd;
              &lt;result constant="yyyyMM" />&#xd;
            &lt;/default>&#xd;
            &lt;switchs>&#xd;
              &lt;switch>&#xd;
                &lt;condition operator="equal" type="accept" value="$" />&#xd;
                &lt;result constant="yyyyMM" />&#xd;
              &lt;/switch>&#xd;
              &lt;switch>&#xd;
                &lt;condition operator="equal" type="accept" value="(..)" />&#xd;
                &lt;result constant="yyyyMMdd" />&#xd;
              &lt;/switch>&#xd;
            &lt;/switchs>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_inputRange" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="date1" constant="${time_elementStart}" type="String" />&#xd;
            &lt;input alias="date2" constant="${time_inputStartDate}" type="String" />&#xd;
            &lt;input alias="internFormat" constant="${time_dateFormatSourceMonthly}" type="String" />&#xd;
            &lt;input alias="daily" constant="${time_dateDailySeparator}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>int&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[import groovy.time.TimeCategory;

Date d1 = Date.parse(internFormat, date1);
Date d2 = Date.parse(internFormat, date2);

if(daily == "\$") {
	years = ((int)d1.year-(int)d2.year)*12;
	months = (int)d1.month-(int)d2.month;
	return years + months;
}
else
	return d1-d2;]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="period" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="a" constant="${ext_period}" type="float" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;type>int&lt;/type>&#xd;
            &lt;script>&lt;![CDATA[return a;]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_dateCopyFormat" type="Switch">&#xd;
          &lt;inputs>&#xd;
            &lt;input constant="${intern_copyByWeekday}" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;default>&#xd;
              &lt;result constant="${intern_copyDaysMonthlySort}" />&#xd;
            &lt;/default>&#xd;
            &lt;switchs>&#xd;
              &lt;switch>&#xd;
                &lt;condition operator="equal" type="accept" value="1" />&#xd;
                &lt;result constant="${intern_dateFormat}" />&#xd;
              &lt;/switch>&#xd;
            &lt;/switchs>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_copyDaysFormat" type="Switch">&#xd;
          &lt;inputs>&#xd;
            &lt;input constant="${intern_copyByWeekday}" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;default>&#xd;
              &lt;result constant="${time_dateFormatSourceMonthly}" />&#xd;
            &lt;/default>&#xd;
            &lt;switchs>&#xd;
              &lt;switch>&#xd;
                &lt;condition operator="equal" type="accept" value="1" />&#xd;
                &lt;result constant="${time_currentFormat}" />&#xd;
              &lt;/switch>&#xd;
            &lt;/switchs>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_maxSeries" type="Switch">&#xd;
          &lt;inputs>&#xd;
            &lt;input constant="${time_dateDailySeparator}" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;default>&#xd;
              &lt;result constant="${intern_maxSeries}" />&#xd;
            &lt;/default>&#xd;
            &lt;switchs>&#xd;
              &lt;switch>&#xd;
                &lt;condition operator="like" type="accept" value="(..)" />&#xd;
                &lt;result constant="2" />&#xd;
              &lt;/switch>&#xd;
            &lt;/switchs>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_extractSourceDeny_1" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="year" nameref="intern_firstInputYear" type="String" />&#xd;
            &lt;input alias="M" nameref="intern_curFormatMonth" type="String" />&#xd;
            &lt;input alias="day" constant="${time_dateDailySeparator}" type="String" /&gt;&#xd;
            &lt;input alias="month" nameref="intern_firstInputMonth" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
            &lt;input alias="startDays" nameref="rng_blockSrcBeginningDays" type="String" />&#xd;
            &lt;input alias="Y" nameref="intern_curFormatYear" type="String" />&#xd;
            &lt;input alias="D" nameref="intern_curFormatDay" type="String" />&#xd;
            &lt;input alias="daily" constant="${time_dateDailySeparator}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[// which position is year, which month, which days
if(daily == "\$")
	return "^§\$";

arr = format;
if (day == "\$") {
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  return "^"+arr+"\$";
}
else{
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  arr = arr.replaceAll(D,startDays);
  return "^"+arr+"\$";
}]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_extractSourceDeny_3" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="year" nameref="intern_lastInputYear" type="String" />&#xd;
            &lt;input alias="M" nameref="intern_curFormatMonth" type="String" />&#xd;
            &lt;input alias="day" constant="${time_dateDailySeparator}" type="String" />&#xd;
            &lt;input alias="month" nameref="intern_lastInputMonth" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
            &lt;input alias="endDays" nameref="rng_blockSrcEndDays" type="String" />&#xd;
            &lt;input alias="Y" nameref="intern_curFormatYear" type="String" />&#xd;
            &lt;input alias="D" nameref="intern_curFormatDay" type="String" />&#xd;
            &lt;input alias="daily" constant="${time_dateDailySeparator}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[// which position is year, which month, which days
if(daily == "\$")
	return "^§\$";

arr = format;
if (day == "\$") {
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  return "^"+arr+"\$";
}
else{
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  arr = arr.replaceAll(D,endDays);
  return "^"+arr+"\$";
}]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_extractTargetDeny_1" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="year" nameref="intern_firstTrgYear" type="String" />&#xd;
            &lt;input alias="M" nameref="intern_curFormatMonth" type="String" />&#xd;
            &lt;input alias="day" constant="${time_dateDailySeparator}" type="String" />&#xd;
            &lt;input alias="month" nameref="intern_firstTrgMonth" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
            &lt;input alias="startDays" nameref="rng_blockTrgBeginningDays" type="String" />&#xd;
            &lt;input alias="Y" nameref="intern_curFormatYear" type="String" />&#xd;
            &lt;input alias="D" nameref="intern_curFormatDay" type="String" />&#xd;
            &lt;input alias="daily" constant="${time_dateDailySeparator}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[// which position is year, which month, which days
if(daily == "\$")
	return "^§\$";

arr = format;
if (day == "\$") {
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  return "^"+arr+"\$";
}
else{
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  arr = arr.replaceAll(D,startDays);
  return "^"+arr+"\$";
}]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_extractTargetDeny_3" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="year" nameref="intern_lastTrgYear" type="String" />&#xd;
            &lt;input alias="M" nameref="intern_curFormatMonth" type="String" />&#xd;
            &lt;input alias="day" constant="${time_dateDailySeparator}" type="String" />&#xd;
            &lt;input alias="month" nameref="intern_lastTrgMonth" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
            &lt;input alias="endDays" nameref="rng_blockTrgEnd" type="String" />&#xd;
            &lt;input alias="Y" nameref="intern_curFormatYear" type="String" />&#xd;
            &lt;input alias="D" nameref="intern_curFormatDay" type="String" />&#xd;
            &lt;input alias="daily" constant="${time_dateDailySeparator}" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[// which position is year, which month, which days
if(daily == "\$")
	return "^§\$";

arr = format;
if (day == "\$") {
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  return "^"+arr+"\$";
}
else{
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  arr = arr.replaceAll(D,endDays);
  return "^"+arr+"\$";
}]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_extractCopyDeny_1" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="year" nameref="intern_lastTrgYear" type="String" />&#xd;
            &lt;input alias="M" nameref="intern_curFormatMonth" type="String" />&#xd;
            &lt;input alias="copyByWeekday" constant="${intern_copyByWeekday}" type="String" />&#xd;
            &lt;input alias="month" nameref="intern_lastTrgMonth" type="String" />&#xd;
            &lt;input alias="format" constant="${time_dateFormatSourceMonthly}" type="String" />&#xd;
            &lt;input alias="Y" nameref="intern_curFormatYear" type="String" />&#xd;
            &lt;input alias="D" nameref="intern_curFormatDay" type="String" />&#xd;
            &lt;input alias="daily" constant="${time_dateDailySeparator}" type="String" />&#xd;
            &lt;input alias="targetDeny" nameref="intern_extractTargetDeny_1" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[// which position is year, which month, which days
if(daily == "\$")
	return "^§\$";

if(copyByWeekday == 1)
	return targetDeny;
else{
  arr = format;
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  return "^"+arr+"\$";
}]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="intern_extractCopyDeny_3" type="Groovy">&#xd;
          &lt;inputs>&#xd;
            &lt;input alias="year" nameref="intern_lastTrgYear" type="String" />&#xd;
            &lt;input alias="M" nameref="intern_curFormatMonth" type="String" />&#xd;
            &lt;input alias="day" constant="${time_dateDailySeparator}" type="String" />&#xd;
            &lt;input alias="month" nameref="intern_lastTrgMonth" type="String" />&#xd;
            &lt;input alias="format" constant="${time_currentFormat}" type="String" />&#xd;
            &lt;input alias="endDays" nameref="rng_blockTrgEnd" type="String" />&#xd;
            &lt;input alias="Y" nameref="intern_curFormatYear" type="String" />&#xd;
            &lt;input alias="D" nameref="intern_curFormatDay" type="String" />&#xd;
            &lt;input alias="daily" constant="${time_dateDailySeparator}" type="String" />&#xd;
            &lt;input alias="taregtDeny" nameref="intern_extractTargetDeny_3" type="String" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;buffered>true&lt;/buffered>&#xd;
            &lt;script>&lt;![CDATA[// which position is year, which month, which days
if(daily == "\$")
	return "^§\$";

if(copyByWeekday == 1)
	return targetDeny;

arr = format;
if (day == "\$") {
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  return "^"+arr+"\$";
}
else{
  arr = arr.replaceAll(M,month);
  arr = arr.replaceAll(Y,year);
  arr = arr.replaceAll(D,endDays);
  return "^"+arr+"\$";
}]]&gt;&lt;/script>&#xd;
            &lt;nullDefaults>false&lt;/nullDefaults>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="service_protocol" type="Switch">&#xd;
          &lt;inputs>&#xd;
            &lt;input constant="${sys_AIssistedURL}" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;default>&#xd;
              &lt;result constant="https" />&#xd;
            &lt;/default>&#xd;
            &lt;switchs>&#xd;
              &lt;switch>&#xd;
                &lt;condition operator="equal" type="accept" value="jedox" />&#xd;
                &lt;result constant="http" />&#xd;
              &lt;/switch>&#xd;
            &lt;/switchs>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="service_combinedURL" type="Switch">&#xd;
          &lt;inputs>&#xd;
            &lt;input constant="${sys_AIssistedURL}" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;default>&#xd;
              &lt;result constant="${sys_AIssistedURL}:${sys_AIssistedPort}" />&#xd;
            &lt;/default>&#xd;
            &lt;switchs>&#xd;
              &lt;switch>&#xd;
                &lt;condition operator="equal" type="accept" value="jedox" />&#xd;
                &lt;result constant="jedox" />&#xd;
              &lt;/switch>&#xd;
            &lt;/switchs>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
        &lt;function name="service_api" type="Switch">&#xd;
          &lt;inputs>&#xd;
            &lt;input constant="${sys_AIssistedURL}" />&#xd;
          &lt;/inputs>&#xd;
          &lt;parameters>&#xd;
            &lt;default>&#xd;
              &lt;result constant="api" />&#xd;
            &lt;/default>&#xd;
            &lt;switchs>&#xd;
              &lt;switch>&#xd;
                &lt;condition operator="equal" type="accept" value="jedox" />&#xd;
                &lt;result constant="ai-r/api" />&#xd;
              &lt;/switch>&#xd;
            &lt;/switchs>&#xd;
          &lt;/parameters>&#xd;
        &lt;/function>&#xd;
      &lt;/functions>&#xd;
      &lt;target>&#xd;
        &lt;coordinates>&#xd;
          &lt;coordinate name="intern_bearer">&#xd;
            &lt;input nameref="access_token" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_extractSourceAccept_1" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_extractSourceAccept_2" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_extractSourceAccept_3" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_extractTargetAccept_1" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_extractTargetAccept_2" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_extractTargetAccept_3" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_extractCopyAccept_1" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_extractCopyAccept_2" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_extractCopyAccept_3" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_dateFormat" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_inputRange" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate name="aip_period">&#xd;
            &lt;input nameref="period" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_dateCopyFormat" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_copyDaysFormat" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_maxSeries" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_extractSourceDeny_1" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_extractSourceDeny_3" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_extractTargetDeny_1" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_extractTargetDeny_3" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_extractCopyDeny_1" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="intern_extractCopyDeny_3" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="service_protocol" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="service_combinedURL" />&#xd;
          &lt;/coordinate>&#xd;
          &lt;coordinate>&#xd;
            &lt;input nameref="service_api" />&#xd;
          &lt;/coordinate>&#xd;
        &lt;/coordinates>&#xd;
      &lt;/target>&#xd;
      &lt;cache>false&lt;/cache>&#xd;
    &lt;/transform>&#xd;
  &lt;/transforms>&#xd;
  &lt;loads>&#xd;
    &lt;load modified="1599657357196" name="LOAD_result" type="Cube" modifiedBy="peter">&#xd;
      &lt;comment>Load Prediction data&#xd;
ADAPT for own dimensions - Make sure you have added version(s) for prediction/upper/lower or accuracy&lt;/comment>&#xd;
      &lt;source nameref="FT_processForecast" />&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;mode>insert&lt;/mode>&#xd;
      &lt;bulksize>100000&lt;/bulksize>&#xd;
      &lt;cube cubeLayoutChangeMode="none" deactivateSVS="false" name="${sys_targetCube}" splash="default" />&#xd;
    &lt;/load>&#xd;
    &lt;load modified="1599657357196" name="LOAD_accuracy" type="Cube" modifiedBy="peter">&#xd;
      &lt;comment>Only needed if you want to store Accuracy values&lt;/comment>&#xd;
      &lt;source nameref="FT_accuracy" />&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;mode>insert&lt;/mode>&#xd;
      &lt;bulksize>100000&lt;/bulksize>&#xd;
      &lt;cube cubeLayoutChangeMode="none" deactivateSVS="false" name="Accuracy_${sys_sourceCube}" splash="default" />&#xd;
    &lt;/load>&#xd;
    &lt;load modified="1599657357196" name="DIM_updateVersions" type="Dimension" modifiedBy="peter">&#xd;
      &lt;comment>Adds the prediction element &amp;amp; ..._loer, ..._upper to the Version dimension&lt;/comment>&#xd;
      &lt;source nameref="CT_addVersions" />&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;dimension name="${db_dimensionVersion}">&#xd;
        &lt;elements mode="insert" />&#xd;
        &lt;consolidations mode="inactive" />&#xd;
        &lt;attributes mode="inactive" />&#xd;
      &lt;/dimension>&#xd;
    &lt;/load>&#xd;
    &lt;load modified="1599657357196" name="DIM_addAccuracy" type="Dimension" modifiedBy="peter">&#xd;
      &lt;comment>Adds the Accuracy dimension to the database.&lt;/comment>&#xd;
      &lt;source nameref="TLE_DIM_addAccuracy" />&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;dimension name="${intern_accuracyDim}">&#xd;
        &lt;elements mode="insert" />&#xd;
        &lt;consolidations mode="inactive" />&#xd;
        &lt;attributes mode="inactive" />&#xd;
      &lt;/dimension>&#xd;
    &lt;/load>&#xd;
    &lt;load modified="1599657357196" name="LOAD_createAccuracyCube" type="Cube" modifiedBy="peter">&#xd;
      &lt;comment>Only needed if you want to store Accuracy values&lt;/comment>&#xd;
      &lt;source nameref="TN_createAccuracy" />&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;mode>create&lt;/mode>&#xd;
      &lt;bulksize>100000&lt;/bulksize>&#xd;
      &lt;cube cubeLayoutChangeMode="none" deactivateSVS="false" name="Accuracy_${sys_sourceCube}" splash="default" />&#xd;
    &lt;/load>&#xd;
    &lt;load modified="1599657357196" name="CP_copyFunction" type="CubeSliceCopy" modifiedBy="peter">&#xd;
      &lt;source nameref="FT_processCopy" />&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;copyMode>copy&lt;/copyMode>&#xd;
      &lt;cube name="${sys_sourceCube}" useRules="true" />&#xd;
      &lt;dimensions>&#xd;
        &lt;dimension name="${db_dimensionMeasure}">&#xd;
          &lt;mapFrom nameref="${db_dimensionMeasure}" />&#xd;
          &lt;mapTo nameref="${db_dimensionMeasure}" />&#xd;
        &lt;/dimension>&#xd;
        &lt;dimension name="${db_dimensionTime}">&#xd;
          &lt;mapFrom nameref="sourceMonth" />&#xd;
          &lt;mapTo nameref="${db_dimensionTime}" />&#xd;
        &lt;/dimension>&#xd;
        &lt;dimension name="${db_dimensionVersion}">&#xd;
          &lt;mapFrom nameref="sourceVersion" />&#xd;
          &lt;mapTo nameref="targetVersion" />&#xd;
        &lt;/dimension>&#xd;
        &lt;dimension name="${db_dimension1}">&#xd;
          &lt;mapFrom nameref="${db_dimension1}" />&#xd;
          &lt;mapTo nameref="${db_dimension1}" />&#xd;
        &lt;/dimension>&#xd;
        &lt;dimension name="${db_dimension2}">&#xd;
          &lt;mapFrom nameref="${db_dimension2}" />&#xd;
          &lt;mapTo nameref="${db_dimension2}" />&#xd;
        &lt;/dimension>&#xd;
        &lt;dimension name="${db_dimension3}">&#xd;
          &lt;mapFrom nameref="${db_dimension3}" />&#xd;
          &lt;mapTo nameref="${db_dimension3}" />&#xd;
        &lt;/dimension>&#xd;
        &lt;dimension name="${db_dimension4}">&#xd;
          &lt;mapFrom nameref="${db_dimension4}" />&#xd;
          &lt;mapTo nameref="${db_dimension4}" />&#xd;
        &lt;/dimension>&#xd;
        &lt;dimension name="${db_dimension5}">&#xd;
          &lt;mapFrom nameref="${db_dimension5}" />&#xd;
          &lt;mapTo nameref="${db_dimension5}" />&#xd;
        &lt;/dimension>&#xd;
        &lt;dimension name="${db_dimension6}">&#xd;
          &lt;mapFrom nameref="${db_dimension6}" />&#xd;
          &lt;mapTo nameref="${db_dimension6}" />&#xd;
        &lt;/dimension>&#xd;
        &lt;dimension name="${db_dimension7}">&#xd;
          &lt;mapFrom nameref="${db_dimension7}" />&#xd;
          &lt;mapTo nameref="${db_dimension7}" />&#xd;
        &lt;/dimension>&#xd;
        &lt;dimension name="${db_dimension8}">&#xd;
          &lt;mapFrom nameref="${db_dimension8}" />&#xd;
          &lt;mapTo nameref="${db_dimension8}" />&#xd;
        &lt;/dimension>&#xd;
        &lt;dimension name="${db_dimension9}">&#xd;
          &lt;mapFrom nameref="${db_dimension9}" />&#xd;
          &lt;mapTo nameref="${db_dimension9}" />&#xd;
        &lt;/dimension>&#xd;
        &lt;dimension name="${db_dimension10}">&#xd;
          &lt;mapFrom nameref="${db_dimension10}" />&#xd;
          &lt;mapTo nameref="${db_dimension10}" />&#xd;
        &lt;/dimension>&#xd;
        &lt;dimension name="${db_dimension11}">&#xd;
          &lt;mapFrom nameref="${db_dimension11}" />&#xd;
          &lt;mapTo nameref="${db_dimension11}" />&#xd;
        &lt;/dimension>&#xd;
        &lt;dimension name="${db_dimension12}">&#xd;
          &lt;mapFrom nameref="${db_dimension12}" />&#xd;
          &lt;mapTo nameref="${db_dimension12}" />&#xd;
        &lt;/dimension>&#xd;
        &lt;dimension name="${db_dimension13}">&#xd;
          &lt;mapFrom nameref="${db_dimension13}" />&#xd;
          &lt;mapTo nameref="${db_dimension13}" />&#xd;
        &lt;/dimension>&#xd;
        &lt;dimension name="${db_dimension14}">&#xd;
          &lt;mapFrom nameref="${db_dimension14}" />&#xd;
          &lt;mapTo nameref="${db_dimension14}" />&#xd;
        &lt;/dimension>&#xd;
        &lt;dimension name="${db_dimension15}">&#xd;
          &lt;mapFrom nameref="${db_dimension15}" />&#xd;
          &lt;mapTo nameref="${db_dimension15}" />&#xd;
        &lt;/dimension>&#xd;
        &lt;dimension name="${db_dimension16}">&#xd;
          &lt;mapFrom nameref="${db_dimension16}" />&#xd;
          &lt;mapTo nameref="${db_dimension16}" />&#xd;
        &lt;/dimension>&#xd;
        &lt;dimension name="${db_dimension17}"&gt;&#xd;
          &lt;mapFrom nameref="${db_dimension17}" />&#xd;
          &lt;mapTo nameref="${db_dimension17}" />&#xd;
        &lt;/dimension>&#xd;
        &lt;dimension name="${db_dimension18}">&#xd;
          &lt;mapFrom nameref="${db_dimension18}" />&#xd;
          &lt;mapTo nameref="${db_dimension18}" />&#xd;
        &lt;/dimension>&#xd;
        &lt;dimension name="${db_dimension19}">&#xd;
          &lt;mapFrom nameref="${db_dimension19}" />&#xd;
          &lt;mapTo nameref="${db_dimension19}" />&#xd;
        &lt;/dimension>&#xd;
        &lt;dimension name="${db_dimension20}">&#xd;
          &lt;mapFrom nameref="${db_dimension20}" />&#xd;
          &lt;mapTo nameref="${db_dimension20}" />&#xd;
        &lt;/dimension>&#xd;
        &lt;dimension name="${db_dimension21}">&#xd;
          &lt;mapFrom nameref="${db_dimension21}" />&#xd;
          &lt;mapTo nameref="${db_dimension21}" />&#xd;
        &lt;/dimension>&#xd;
        &lt;dimension name="${db_dimension22}">&#xd;
          &lt;mapFrom nameref="${db_dimension22}" />&#xd;
          &lt;mapTo nameref="${db_dimension22}" />&#xd;
        &lt;/dimension>&#xd;
        &lt;dimension name="${db_dimension23}">&#xd;
          &lt;mapFrom nameref="${db_dimension23}" />&#xd;
          &lt;mapTo nameref="${db_dimension23}" />&#xd;
        &lt;/dimension>&#xd;
        &lt;dimension name="${db_dimension24}">&#xd;
          &lt;mapFrom nameref="${db_dimension24}" />&#xd;
          &lt;mapTo nameref="${db_dimension24}" />&#xd;
        &lt;/dimension>&#xd;
        &lt;dimension name="${db_dimension25}">&#xd;
          &lt;mapFrom nameref="${db_dimension25}" />&#xd;
          &lt;mapTo nameref="${db_dimension25}" />&#xd;
        &lt;/dimension>&#xd;
        &lt;dimension name="${db_dimension26}">&#xd;
          &lt;mapFrom nameref="${db_dimension26}" />&#xd;
          &lt;mapTo nameref="${db_dimension26}" />&#xd;
        &lt;/dimension>&#xd;
        &lt;dimension name="${db_dimension27}">&#xd;
          &lt;mapFrom nameref="${db_dimension27}" />&#xd;
          &lt;mapTo nameref="${db_dimension27}" />&#xd;
        &lt;/dimension>&#xd;
      &lt;/dimensions>&#xd;
    &lt;/load>&#xd;
    &lt;load modified="1599657357196" name="LOAD_clearOutput" type="Cube" modifiedBy="peter">&#xd;
      &lt;comment>Clear prediction data&#xd;
ADAPT for own dimensions&#xd;
If using the extended dimension version change the Data Source to "EXTRACT_clear_target_values_extended"&lt;/comment>&#xd;
      &lt;source nameref="INPUT_targetValues_clearJob" />&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;mode>delete&lt;/mode>&#xd;
      &lt;bulksize>100000&lt;/bulksize>&#xd;
      &lt;cube cubeLayoutChangeMode="noneWithDefaultWrite" deactivateSVS="false" name="${sys_targetCube}" splash="default" />&#xd;
    &lt;/load>&#xd;
    &lt;load modified="1599657357196" name="LOAD_clearAccuracy" type="Cube" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[Clear accuracy data]]&gt;&lt;/comment>&#xd;
      &lt;source nameref="INPUT_clearAccuracy" />&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;mode>delete&lt;/mode>&#xd;
      &lt;bulksize>100000&lt;/bulksize>&#xd;
      &lt;cube cubeLayoutChangeMode="none" deactivateSVS="false" name="Accuracy_${sys_sourceCube}" splash="default" />&#xd;
    &lt;/load>&#xd;
    &lt;load modified="1599657357196" name="LOAD_clearSetup" type="Cube" modifiedBy="peter">&#xd;
      &lt;source nameref="INPUT_reportVariables" />&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;mode>delete&lt;/mode>&#xd;
      &lt;bulksize>100000&lt;/bulksize>&#xd;
      &lt;cube cubeLayoutChangeMode="none" deactivateSVS="true" name="${sys_aiConfigCube}" />&#xd;
    &lt;/load>&#xd;
    &lt;load modified="1599657357196" name="LOAD_outlier" type="Cube" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[Load Prediction data
ADAPT for own dimensions - Make sure you have added version(s) for prediction/upper/lower or accuracy]]&gt;&lt;/comment>&#xd;
      &lt;source nameref="FT_processCopy_outlier" />&#xd;
      &lt;connection nameref="CON_jedoxGlobal" />&#xd;
      &lt;mode>insert&lt;/mode>&#xd;
      &lt;bulksize>100000&lt;/bulksize>&#xd;
      &lt;cube cubeLayoutChangeMode="none" deactivateSVS="false" name="${sys_targetCube}" splash="default" />&#xd;
    &lt;/load>&#xd;
  &lt;/loads>&#xd;
  &lt;jobs>&#xd;
    &lt;job modified="1605661178007" name="MainJob" type="Parallel" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[Main job - entry point for call from outside]]&gt;&lt;/comment>&#xd;
      &lt;executions>&#xd;
        &lt;execution nameref="Loop_externalVariables" parallel="false" type="job" />&#xd;
        &lt;execution nameref="GRV_summary" parallel="false" type="job" />&#xd;
      &lt;/executions>&#xd;
      &lt;failStatus>error&lt;/failStatus>&#xd;
    &lt;/job>&#xd;
    &lt;job modified="1606302934923" name="PresetStaticInput" type="Loop" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[Sets variables for main job]]&gt;&lt;/comment>&#xd;
      &lt;loop nameref="FT_calculateDateInputs${service_pod}" />&#xd;
      &lt;execution nameref="Loop_overAllChunks" type="job" />&#xd;
      &lt;failStatus>error&lt;/failStatus>&#xd;
    &lt;/job>&#xd;
    &lt;job modified="1599657357196" name="PresetStaticInput_clearJob" type="Loop" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[Sets variables &amp; start clear job.]]&gt;&lt;/comment>&#xd;
      &lt;loop nameref="FT_macroVariablesDimLoop" />&#xd;
      &lt;execution nameref="ClearValues" type="job" />&#xd;
      &lt;assignment>&#xd;
        &lt;variable name="time_elementStart">&#xd;
          &lt;input nameref="AIPredictionDurationStart" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimensionMeasure">&#xd;
          &lt;input nameref="AIMeasureName" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementVersion">&#xd;
          &lt;input nameref="AIVersionValue" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="sys_targetCube">&#xd;
          &lt;input constant="${sys_sourceCube}" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="aip_predictionType">&#xd;
          &lt;input nameref="AIPredictionType" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimensionVersion">&#xd;
          &lt;input nameref="AIVersionName" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="sys_accuracyFlag">&#xd;
          &lt;input nameref="AIPredictionAccuracyCube" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="aip_period">&#xd;
          &lt;input nameref="AIPredictionInterval" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementTargetVersion">&#xd;
          &lt;input nameref="AIVersionTargetValue" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimensionTime">&#xd;
          &lt;input nameref="AITimeName" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="ext_numValues">&#xd;
          &lt;input nameref="AIPredictionDuration" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMeasure">&#xd;
          &lt;input nameref="AIMeasureValueRegexed" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="time_firstDBYear">&#xd;
          &lt;input nameref="AIFirstDbYear" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="time_dateDailySeparator">&#xd;
          &lt;input nameref="AIDateDailySeparator" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension1">&#xd;
          &lt;input nameref="dim1" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim1">&#xd;
          &lt;input nameref="elem1" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode1">&#xd;
          &lt;input nameref="mode1" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension2">&#xd;
          &lt;input nameref="dim2" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim2">&#xd;
          &lt;input nameref="elem2" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode2">&#xd;
          &lt;input nameref="mode2" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension3">&#xd;
          &lt;input nameref="dim3" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim3">&#xd;
          &lt;input nameref="elem3" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode3">&#xd;
          &lt;input nameref="mode3" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension4">&#xd;
          &lt;input nameref="dim4" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim4">&#xd;
          &lt;input nameref="elem4" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode4">&#xd;
          &lt;input nameref="mode4" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension5">&#xd;
          &lt;input nameref="dim5" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim5">&#xd;
          &lt;input nameref="elem5" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode5">&#xd;
          &lt;input nameref="mode5" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension6">&#xd;
          &lt;input nameref="dim6" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim6">&#xd;
          &lt;input nameref="elem6" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode6">&#xd;
          &lt;input nameref="mode6" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension7">&#xd;
          &lt;input nameref="dim7" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim7">&#xd;
          &lt;input nameref="elem7" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode7">&#xd;
          &lt;input nameref="mode7" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension8">&#xd;
          &lt;input nameref="dim8" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim8">&#xd;
          &lt;input nameref="elem8" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode8">&#xd;
          &lt;input nameref="mode8" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension9">&#xd;
          &lt;input nameref="dim9" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim9">&#xd;
          &lt;input nameref="elem9" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode9">&#xd;
          &lt;input nameref="mode9" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension10">&#xd;
          &lt;input nameref="dim10" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim10">&#xd;
          &lt;input nameref="elem10" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode10">&#xd;
          &lt;input nameref="mode10" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension11">&#xd;
          &lt;input nameref="dim11" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim11">&#xd;
          &lt;input nameref="elem11" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode11">&#xd;
          &lt;input nameref="mode11" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension12">&#xd;
          &lt;input nameref="dim12" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim12">&#xd;
          &lt;input nameref="elem12" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode12">&#xd;
          &lt;input nameref="mode12" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension13">&#xd;
          &lt;input nameref="dim13" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim13">&#xd;
          &lt;input nameref="elem13" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode13">&#xd;
          &lt;input nameref="mode13" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension14">&#xd;
          &lt;input nameref="dim14" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim14">&#xd;
          &lt;input nameref="elem14" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode14">&#xd;
          &lt;input nameref="mode14" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension15">&#xd;
          &lt;input nameref="dim15" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim15">&#xd;
          &lt;input nameref="elem15" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode15">&#xd;
          &lt;input nameref="mode15" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension16">&#xd;
          &lt;input nameref="dim16" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim16">&#xd;
          &lt;input nameref="elem16" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode16">&#xd;
          &lt;input nameref="mode16" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension17">&#xd;
          &lt;input nameref="dim17" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim17">&#xd;
          &lt;input nameref="elem17" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode17">&#xd;
          &lt;input nameref="mode17" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension18">&#xd;
          &lt;input nameref="dim18" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim18">&#xd;
          &lt;input nameref="elem18" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode18">&#xd;
          &lt;input nameref="mode18" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension19">&#xd;
          &lt;input nameref="dim19" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim19">&#xd;
          &lt;input nameref="elem19" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode19">&#xd;
          &lt;input nameref="mode19" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension20">&#xd;
          &lt;input nameref="dim20" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim20">&#xd;
          &lt;input nameref="elem20" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode20">&#xd;
          &lt;input nameref="mode20" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension21">&#xd;
          &lt;input nameref="dim21" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim21">&#xd;
          &lt;input nameref="elem21" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode21">&#xd;
          &lt;input nameref="mode21" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension22">&#xd;
          &lt;input nameref="dim22" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim22">&#xd;
          &lt;input nameref="elem22" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode22">&#xd;
          &lt;input nameref="mode22" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension23">&#xd;
          &lt;input nameref="dim23" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim23">&#xd;
          &lt;input nameref="elem23" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode23">&#xd;
          &lt;input nameref="mode23" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension24">&#xd;
          &lt;input nameref="dim24" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim24">&#xd;
          &lt;input nameref="elem24" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode24">&#xd;
          &lt;input nameref="mode24" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension25">&#xd;
          &lt;input nameref="dim25" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim25">&#xd;
          &lt;input nameref="elem25" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode25">&#xd;
          &lt;input nameref="mode25" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension26">&#xd;
          &lt;input nameref="dim26" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim26">&#xd;
          &lt;input nameref="elem26" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode26">&#xd;
          &lt;input nameref="mode26" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension27">&#xd;
          &lt;input nameref="dim27" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim27">&#xd;
          &lt;input nameref="elem27" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode27">&#xd;
          &lt;input nameref="mode27" />&#xd;
        &lt;/variable>&#xd;
      &lt;/assignment>&#xd;
      &lt;failStatus>error&lt;/failStatus>&#xd;
    &lt;/job>&#xd;
    &lt;job modified="1599657357196" name="PresetStaticInput_updateDatabase" type="Loop" modifiedBy="peter">&#xd;
      &lt;comment>Sets variables &amp;amp; start Update existing database job.&lt;/comment>&#xd;
      &lt;execution nameref="UpdateExistingDatabase" type="job" />&#xd;
      &lt;failStatus>error&lt;/failStatus>&#xd;
      &lt;loop nameref="FT_variablesStaticInput" />&#xd;
    &lt;/job>&#xd;
    &lt;job modified="1599657357196" name="Loop_inputValues" type="Loop" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[Sets the variable aip_inputValues to the returned values of the INPUT path (Extract from source cube)]]&gt;&lt;/comment>&#xd;
      &lt;loop nameref="TA_input" />&#xd;
      &lt;execution nameref="SW_emptyCheck" type="job" />&#xd;
      &lt;assignment>&#xd;
        &lt;variable name="aip_inputValues">&#xd;
          &lt;input nameref="aip_inputValues" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="intern_inputSum">&#xd;
          &lt;input nameref="sum" />&#xd;
        &lt;/variable>&#xd;
      &lt;/assignment>&#xd;
      &lt;failStatus>error&lt;/failStatus>&#xd;
    &lt;/job>&#xd;
    &lt;job modified="1599657357196" name="SW_executionLogic" type="Switch" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[Checks if the prediction returns success state, then triggers copying and loading data.]]&gt;&lt;/comment>&#xd;
      &lt;switchOn>&#xd;
        &lt;source nameref="FT_switchControlResult" row="1">&#xd;
          &lt;input nameref="switchInput" />&#xd;
        &lt;/source>&#xd;
      &lt;/switchOn>&#xd;
      &lt;switchs>&#xd;
        &lt;switch>&#xd;
          &lt;condition operator="equal" type="accept" value="1" />&#xd;
          &lt;execution nameref="EXECUTE_resultLoading" type="job" />&#xd;
        &lt;/switch>&#xd;
        &lt;switch>&#xd;
          &lt;condition operator="equal" type="accept" value="2" />&#xd;
          &lt;execution nameref="EXECUTE_resultLoadingWOaccuracy" type="job" /&gt;&#xd;
        &lt;/switch>&#xd;
        &lt;switch>&#xd;
          &lt;condition operator="equal" type="accept" value="0" />&#xd;
          &lt;execution nameref="GRV_logWsError" type="job" />&#xd;
        &lt;/switch>&#xd;
      &lt;/switchs>&#xd;
    &lt;/job>&#xd;
    &lt;job modified="1599657357196" name="EXECUTE_resultLoading" type="Standard" modifiedBy="peter">&#xd;
      &lt;executions>&#xd;
        &lt;execution nameref="DIM_addAccuracy" type="load" />&#xd;
        &lt;execution nameref="CP_copyFunction" type="load" />&#xd;
        &lt;execution nameref="LOAD_result" type="load" /&gt;&#xd;
        &lt;execution nameref="LOAD_accuracy" type="load" />&#xd;
      &lt;/executions>&#xd;
      &lt;comment>Start copying and result loading (called by Switch job)&lt;/comment>&#xd;
      &lt;failStatus>error&lt;/failStatus>&#xd;
    &lt;/job>&#xd;
    &lt;job modified="1599657357196" name="SW_emptyCheck" type="Switch" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[Checks if the prediction returns success state, then triggers copying and loading data.]]&gt;&lt;/comment>&#xd;
      &lt;switchOn>&#xd;
        &lt;source nameref="CT_inputCheck" row="1">&#xd;
          &lt;input nameref="inputValues" />&#xd;
        &lt;/source>&#xd;
      &lt;/switchOn>&#xd;
      &lt;switchs>&#xd;
        &lt;switch>&#xd;
          &lt;condition operator="equal" type="deny" value="0" />&#xd;
          &lt;execution nameref="SW_OutlierSwitch" type="job" />&#xd;
        &lt;/switch>&#xd;
      &lt;/switchs>&#xd;
    &lt;/job>&#xd;
    &lt;job modified="1599657357196" name="UpdateExistingDatabase" type="Standard" modifiedBy="peter">&#xd;
      &lt;executions>&#xd;
        &lt;execution nameref="DIM_addAccuracy" type="load" />&#xd;
      &lt;/executions>&#xd;
      &lt;comment>Update an existing database with new version elements and accuracy dimension &amp;amp; cube&lt;/comment>&#xd;
      &lt;failStatus>error&lt;/failStatus>&#xd;
    &lt;/job>&#xd;
    &lt;job modified="1599657357196" name="EXECUTE_resultLoadingWOaccuracy" type="Standard" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[Start copying and result loading (called by Switch job)

LOAD -> LOAD_result]]&gt;&lt;/comment>&#xd;
      &lt;executions>&#xd;
        &lt;execution nameref="CP_copyFunction" type="load" />&#xd;
        &lt;execution nameref="LOAD_result" type="load" />&#xd;
      &lt;/executions>&#xd;
      &lt;failStatus>error&lt;/failStatus>&#xd;
    &lt;/job>&#xd;
    &lt;job modified="1606303117545" name="Loop_externalVariables" type="Loop" modifiedBy="peter">&#xd;
      &lt;loop nameref="FT_macroVariablesDimLoop" />&#xd;
      &lt;execution nameref="PresetStaticInput" type="job" />&#xd;
      &lt;assignment>&#xd;
        &lt;variable name="time_elementStart">&#xd;
          &lt;input nameref="${sys_prefix}PredictionDurationStart" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimensionMeasure">&#xd;
          &lt;input nameref="${sys_prefix}MeasureName" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementVersion">&#xd;
          &lt;input nameref="${sys_prefix}VersionValue" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="sys_targetCube">&#xd;
          &lt;input constant="${sys_sourceCube}" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="aip_predictionType">&#xd;
          &lt;input nameref="${sys_prefix}PredictionType" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimensionVersion">&#xd;
          &lt;input nameref="${sys_prefix}VersionName" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="sys_accuracyFlag">&#xd;
          &lt;input nameref="${sys_prefix}PredictionAccuracyCube" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="ext_period">&#xd;
          &lt;input nameref="${sys_prefix}PredictionInterval" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementTargetVersion">&#xd;
          &lt;input nameref="${sys_prefix}VersionTargetValue" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimensionTime">&#xd;
          &lt;input nameref="${sys_prefix}TimeName" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="ext_numValues">&#xd;
          &lt;input nameref="${sys_prefix}PredictionDuration" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMeasure">&#xd;
          &lt;input nameref="${sys_prefix}MeasureValueRegexed" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="time_inputStartDate">&#xd;
          &lt;input nameref="${sys_prefix}TimeValueStart" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="time_dateDailySeparator">&#xd;
          &lt;input nameref="${sys_prefix}DateDailySeparator" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension1">&#xd;
          &lt;input nameref="dim1" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim1">&#xd;
          &lt;input nameref="elem1" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode1">&#xd;
          &lt;input nameref="mode1" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension2">&#xd;
          &lt;input nameref="dim2" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim2">&#xd;
          &lt;input nameref="elem2" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode2">&#xd;
          &lt;input nameref="mode2" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension3">&#xd;
          &lt;input nameref="dim3" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim3">&#xd;
          &lt;input nameref="elem3" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode3">&#xd;
          &lt;input nameref="mode3" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension4">&#xd;
          &lt;input nameref="dim4" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim4">&#xd;
          &lt;input nameref="elem4" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode4">&#xd;
          &lt;input nameref="mode4" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension5">&#xd;
          &lt;input nameref="dim5" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim5">&#xd;
          &lt;input nameref="elem5" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode5">&#xd;
          &lt;input nameref="mode5" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension6">&#xd;
          &lt;input nameref="dim6" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim6">&#xd;
          &lt;input nameref="elem6" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode6">&#xd;
          &lt;input nameref="mode6" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension7">&#xd;
          &lt;input nameref="dim7" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim7">&#xd;
          &lt;input nameref="elem7" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode7">&#xd;
          &lt;input nameref="mode7" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension8">&#xd;
          &lt;input nameref="dim8" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim8">&#xd;
          &lt;input nameref="elem8" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode8">&#xd;
          &lt;input nameref="mode8" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension9">&#xd;
          &lt;input nameref="dim9" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim9">&#xd;
          &lt;input nameref="elem9" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode9">&#xd;
          &lt;input nameref="mode9" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension10">&#xd;
          &lt;input nameref="dim10" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim10">&#xd;
          &lt;input nameref="elem10" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode10">&#xd;
          &lt;input nameref="mode10" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension11">&#xd;
          &lt;input nameref="dim11" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim11">&#xd;
          &lt;input nameref="elem11" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode11">&#xd;
          &lt;input nameref="mode11" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension12">&#xd;
          &lt;input nameref="dim12" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim12">&#xd;
          &lt;input nameref="elem12" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode12">&#xd;
          &lt;input nameref="mode12" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension13">&#xd;
          &lt;input nameref="dim13" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim13">&#xd;
          &lt;input nameref="elem13" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode13">&#xd;
          &lt;input nameref="mode13" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension14">&#xd;
          &lt;input nameref="dim14" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim14">&#xd;
          &lt;input nameref="elem14" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode14">&#xd;
          &lt;input nameref="mode14" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension15">&#xd;
          &lt;input nameref="dim15" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim15">&#xd;
          &lt;input nameref="elem15" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode15">&#xd;
          &lt;input nameref="mode15" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension16">&#xd;
          &lt;input nameref="dim16" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim16">&#xd;
          &lt;input nameref="elem16" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode16">&#xd;
          &lt;input nameref="mode16" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension17">&#xd;
          &lt;input nameref="dim17" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim17">&#xd;
          &lt;input nameref="elem17" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode17">&#xd;
          &lt;input nameref="mode17" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension18">&#xd;
          &lt;input nameref="dim18" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim18">&#xd;
          &lt;input nameref="elem18" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode18">&#xd;
          &lt;input nameref="mode18" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension19">&#xd;
          &lt;input nameref="dim19" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim19">&#xd;
          &lt;input nameref="elem19" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode19">&#xd;
          &lt;input nameref="mode19" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension20">&#xd;
          &lt;input nameref="dim20" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim20">&#xd;
          &lt;input nameref="elem20" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode20">&#xd;
          &lt;input nameref="mode20" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension21">&#xd;
          &lt;input nameref="dim21" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim21">&#xd;
          &lt;input nameref="elem21" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode21">&#xd;
          &lt;input nameref="mode21" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension22">&#xd;
          &lt;input nameref="dim22" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim22">&#xd;
          &lt;input nameref="elem22" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode22">&#xd;
          &lt;input nameref="mode22" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension23">&#xd;
          &lt;input nameref="dim23" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim23">&#xd;
          &lt;input nameref="elem23" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode23">&#xd;
          &lt;input nameref="mode23" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension24">&#xd;
          &lt;input nameref="dim24" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim24">&#xd;
          &lt;input nameref="elem24" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode24">&#xd;
          &lt;input nameref="mode24" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension25">&#xd;
          &lt;input nameref="dim25" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim25">&#xd;
          &lt;input nameref="elem25" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode25">&#xd;
          &lt;input nameref="mode25" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension26">&#xd;
          &lt;input nameref="dim26" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim26">&#xd;
          &lt;input nameref="elem26" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode26">&#xd;
          &lt;input nameref="mode26" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension27">&#xd;
          &lt;input nameref="dim27" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim27">&#xd;
          &lt;input nameref="elem27" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode27">&#xd;
          &lt;input nameref="mode27" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="time_currentFormat">&#xd;
          &lt;input nameref="${sys_prefix}DateFormat" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="intern_copyByWeekday">&#xd;
          &lt;input nameref="${sys_prefix}CopyDaysByWeekday" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="sys_useOutlierFlag">&#xd;
          &lt;input nameref="${sys_prefix}PredictionOutlier" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="time_elementEnd">&#xd;
          &lt;input nameref="${sys_prefix}PredictionDurationEnd" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="time_inputEndDate">&#xd;
          &lt;input nameref="${sys_prefix}TimeValueEnd" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="time_usePreviousMonth">&#xd;
          &lt;input nameref="${sys_prefix}UsePreviousMonth" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="service_pod">&#xd;
          &lt;input nameref="service_pod" />&#xd;
        &lt;/variable>&#xd;
      &lt;/assignment>&#xd;
      &lt;failStatus>error&lt;/failStatus>&#xd;
    &lt;/job>&#xd;
    &lt;job modified="1599657357196" name="Loop_overAllChunks" type="Loop" modifiedBy="peter">&#xd;
      &lt;loop nameref="FT_addChunkSize" />&#xd;
      &lt;execution nameref="Loop_inputValues" type="job" />&#xd;
      &lt;failStatus>error&lt;/failStatus>&#xd;
    &lt;/job>&#xd;
    &lt;job modified="1606989823682" name="GRV_logWsError" type="Groovy" modifiedBy="peter">&#xd;
      &lt;jobscript>&lt;![CDATA[extract = API.initSource("FT_switchControlResult");
extract.nextRow();

err = extract.getColumnString("combinedErrorMessage");
if(err.contains("1019"))
	err = err + ' - License error: Please check your license credentials and/or check if your license is expired';

if(err.contains("401"))
	err = err + ' - License error: Please check your license credentials and/or check if your license is expired';

LOG.warn(err);]]&gt;&lt;/jobscript>&#xd;
      &lt;failStatus>error&lt;/failStatus>&#xd;
    &lt;/job>&#xd;
    &lt;job modified="1599657357196" name="ClearAccuracy" type="Parallel" modifiedBy="peter">&#xd;
      &lt;executions>&#xd;
        &lt;execution nameref="LOAD_clearAccuracy" parallel="false" type="load" />&#xd;
        &lt;execution nameref="LOAD_clearOutput" parallel="false" type="load" />&#xd;
      &lt;/executions>&#xd;
      &lt;failStatus>error&lt;/failStatus>&#xd;
    &lt;/job>&#xd;
    &lt;job modified="1599657357196" name="ClearValues" type="Parallel" modifiedBy="peter">&#xd;
      &lt;executions>&#xd;
        &lt;execution nameref="LOAD_clearOutput" parallel="false" type="load" />&#xd;
      &lt;/executions>&#xd;
      &lt;failStatus>error&lt;/failStatus>&#xd;
    &lt;/job>&#xd;
    &lt;job modified="1599657357196" name="SW_clearValues" type="Switch" modifiedBy="peter">&#xd;
      &lt;switchOn>&#xd;
        &lt;source nameref="CT_accuracyFlag" row="1">&#xd;
          &lt;input nameref="flag" />&#xd;
        &lt;/source>&#xd;
      &lt;/switchOn>&#xd;
      &lt;default>&#xd;
        &lt;execution nameref="ClearValues" type="job" />&#xd;
      &lt;/default>&#xd;
      &lt;switchs>&#xd;
        &lt;switch>&#xd;
          &lt;condition operator="equal" type="accept" value="1" />&#xd;
          &lt;execution nameref="ClearAccuracy" type="job" />&#xd;
        &lt;/switch>&#xd;
        &lt;switch>&#xd;
          &lt;condition operator="equal" type="accept" value="0" />&#xd;
          &lt;execution nameref="ClearValues" type="job" />&#xd;
        &lt;/switch>&#xd;
      &lt;/switchs>&#xd;
    &lt;/job>&#xd;
    &lt;job modified="1599657357196" name="Loop_externalVariables_clearValues" type="Loop" modifiedBy="peter">&#xd;
      &lt;loop nameref="FT_macroVariablesDimLoop" />&#xd;
      &lt;execution nameref="SW_clearValues" type="job" />&#xd;
      &lt;assignment>&#xd;
        &lt;variable name="time_elementStart">&#xd;
          &lt;input nameref="${sys_prefix}PredictionDurationStart" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimensionMeasure">&#xd;
          &lt;input nameref="${sys_prefix}MeasureName" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementVersion">&#xd;
          &lt;input nameref="${sys_prefix}VersionValue" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="sys_targetCube">&#xd;
          &lt;input constant="${sys_sourceCube}" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="aip_predictionType">&#xd;
          &lt;input nameref="${sys_prefix}PredictionType" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimensionVersion">&#xd;
          &lt;input nameref="${sys_prefix}VersionName" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="sys_accuracyFlag">&#xd;
          &lt;input nameref="${sys_prefix}PredictionAccuracyCube" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="aip_period">&#xd;
          &lt;input nameref="${sys_prefix}PredictionInterval" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementTargetVersion">&#xd;
          &lt;input nameref="${sys_prefix}VersionTargetValue" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimensionTime">&#xd;
          &lt;input nameref="${sys_prefix}TimeName" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="ext_numValues">&#xd;
          &lt;input nameref="${sys_prefix}PredictionDuration" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMeasure">&#xd;
          &lt;input nameref="${sys_prefix}MeasureValueRegexed" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="time_inputStartDate">&#xd;
          &lt;input nameref="${sys_prefix}InputStartDate" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="time_dateDailySeparator">&#xd;
          &lt;input nameref="${sys_prefix}DateDailySeparator" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension1"&gt;&#xd;
          &lt;input nameref="dim1" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim1">&#xd;
          &lt;input nameref="elem1" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode1">&#xd;
          &lt;input nameref="mode1" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension2">&#xd;
          &lt;input nameref="dim2" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim2">&#xd;
          &lt;input nameref="elem2" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode2">&#xd;
          &lt;input nameref="mode2" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension3">&#xd;
          &lt;input nameref="dim3" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim3">&#xd;
          &lt;input nameref="elem3" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode3">&#xd;
          &lt;input nameref="mode3" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension4">&#xd;
          &lt;input nameref="dim4" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim4">&#xd;
          &lt;input nameref="elem4" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode4">&#xd;
          &lt;input nameref="mode4" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension5">&#xd;
          &lt;input nameref="dim5" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim5">&#xd;
          &lt;input nameref="elem5" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode5">&#xd;
          &lt;input nameref="mode5" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension6">&#xd;
          &lt;input nameref="dim6" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim6">&#xd;
          &lt;input nameref="elem6" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode6">&#xd;
          &lt;input nameref="mode6" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension7">&#xd;
          &lt;input nameref="dim7" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim7">&#xd;
          &lt;input nameref="elem7" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode7">&#xd;
          &lt;input nameref="mode7" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension8">&#xd;
          &lt;input nameref="dim8" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim8">&#xd;
          &lt;input nameref="elem8" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode8">&#xd;
          &lt;input nameref="mode8" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension9">&#xd;
          &lt;input nameref="dim9" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim9">&#xd;
          &lt;input nameref="elem9" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode9">&#xd;
          &lt;input nameref="mode9" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension10">&#xd;
          &lt;input nameref="dim10" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim10">&#xd;
          &lt;input nameref="elem10" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode10">&#xd;
          &lt;input nameref="mode10" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension11">&#xd;
          &lt;input nameref="dim11" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim11">&#xd;
          &lt;input nameref="elem11" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode11">&#xd;
          &lt;input nameref="mode11" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension12">&#xd;
          &lt;input nameref="dim12" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim12">&#xd;
          &lt;input nameref="elem12" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode12">&#xd;
          &lt;input nameref="mode12" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension13">&#xd;
          &lt;input nameref="dim13" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim13">&#xd;
          &lt;input nameref="elem13" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode13">&#xd;
          &lt;input nameref="mode13" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension14">&#xd;
          &lt;input nameref="dim14" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim14">&#xd;
          &lt;input nameref="elem14" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode14">&#xd;
          &lt;input nameref="mode14" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension15">&#xd;
          &lt;input nameref="dim15" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim15">&#xd;
          &lt;input nameref="elem15" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode15">&#xd;
          &lt;input nameref="mode15" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension16">&#xd;
          &lt;input nameref="dim16" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim16">&#xd;
          &lt;input nameref="elem16" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode16">&#xd;
          &lt;input nameref="mode16" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension17">&#xd;
          &lt;input nameref="dim17" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim17">&#xd;
          &lt;input nameref="elem17" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode17">&#xd;
          &lt;input nameref="mode17" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension18">&#xd;
          &lt;input nameref="dim18" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim18">&#xd;
          &lt;input nameref="elem18" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode18">&#xd;
          &lt;input nameref="mode18" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension19">&#xd;
          &lt;input nameref="dim19" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim19">&#xd;
          &lt;input nameref="elem19" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode19">&#xd;
          &lt;input nameref="mode19" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension20">&#xd;
          &lt;input nameref="dim20" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim20">&#xd;
          &lt;input nameref="elem20" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode20">&#xd;
          &lt;input nameref="mode20" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension21">&#xd;
          &lt;input nameref="dim21" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim21">&#xd;
          &lt;input nameref="elem21" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode21">&#xd;
          &lt;input nameref="mode21" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension22">&#xd;
          &lt;input nameref="dim22" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim22">&#xd;
          &lt;input nameref="elem22" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode22">&#xd;
          &lt;input nameref="mode22" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension23">&#xd;
          &lt;input nameref="dim23" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim23">&#xd;
          &lt;input nameref="elem23" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode23">&#xd;
          &lt;input nameref="mode23" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension24">&#xd;
          &lt;input nameref="dim24" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim24">&#xd;
          &lt;input nameref="elem24" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode24">&#xd;
          &lt;input nameref="mode24" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension25">&#xd;
          &lt;input nameref="dim25" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim25">&#xd;
          &lt;input nameref="elem25" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode25">&#xd;
          &lt;input nameref="mode25" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension26">&#xd;
          &lt;input nameref="dim26" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim26">&#xd;
          &lt;input nameref="elem26" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode26">&#xd;
          &lt;input nameref="mode26" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_dimension27">&#xd;
          &lt;input nameref="dim27" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementDim27">&#xd;
          &lt;input nameref="elem27" />&#xd;
        &lt;/variable>&#xd;
        &lt;variable name="db_elementMode27">&#xd;
          &lt;input nameref="mode27" />&#xd;
        &lt;/variable>&#xd;
      &lt;/assignment>&#xd;
      &lt;failStatus>error&lt;/failStatus>&#xd;
    &lt;/job>&#xd;
    &lt;job modified="1599657357196" name="ClearJob" type="Standard" modifiedBy="peter">&#xd;
      &lt;executions>&#xd;
        &lt;execution nameref="Loop_externalVariables_clearValues" type="job" />&#xd;
      &lt;/executions>&#xd;
      &lt;failStatus>error&lt;/failStatus>&#xd;
    &lt;/job>&#xd;
    &lt;job modified="1606996405866" name="ClearSetup" type="Parallel" modifiedBy="peter">&#xd;
      &lt;executions>&#xd;
        &lt;execution nameref="LOAD_clearSetup" parallel="false" type="load" />&#xd;
      &lt;/executions>&#xd;
      &lt;failStatus>error&lt;/failStatus>&#xd;
    &lt;/job>&#xd;
    &lt;job modified="1599657357196" name="SW_debug" type="Switch" modifiedBy="peter">&#xd;
      &lt;switchOn>&#xd;
        &lt;source nameref="New Table aggregation">&#xd;
          &lt;input nameref="values" />&#xd;
        &lt;/source>&#xd;
      &lt;/switchOn>&#xd;
      &lt;switchs>&#xd;
        &lt;switch>&#xd;
          &lt;condition operator="equal" type="accept" value="7" />&#xd;
          &lt;execution nameref="GRV_logWsError" type="job" />&#xd;
        &lt;/switch>&#xd;
      &lt;/switchs>&#xd;
    &lt;/job>&#xd;
    &lt;job modified="1599657357196" name="Loop_outlierValues" type="Loop" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[Sets the variable aip_inputValues to the returned values of the INPUT path (Extract from source cube)]]&gt;&lt;/comment>&#xd;
      &lt;loop nameref="TA_outlier" />&#xd;
      &lt;execution nameref="SW_executionLogic" type="job" />&#xd;
      &lt;assignment>&#xd;
        &lt;variable name="aip_inputValues">&#xd;
          &lt;input nameref="aip_inputValues" />&#xd;
        &lt;/variable>&#xd;
      &lt;/assignment>&#xd;
      &lt;failStatus>error&lt;/failStatus>&#xd;
    &lt;/job>&#xd;
    &lt;job modified="1599657357196" name="dummyJob_SW_executionLogic" type="Groovy" modifiedBy="peter">&#xd;
      &lt;jobscript>&lt;![CDATA[return 1;]]&gt;&lt;/jobscript>&#xd;
      &lt;failStatus>error&lt;/failStatus>&#xd;
    &lt;/job>&#xd;
    &lt;job modified="1599657357196" name="EXECUTE_outlierLoading" type="Standard" modifiedBy="peter">&#xd;
      &lt;executions>&#xd;
        &lt;execution nameref="LOAD_outlier" type="load" />&#xd;
        &lt;execution nameref="Loop_outlierValues" type="job" />&#xd;
      &lt;/executions>&#xd;
      &lt;failStatus>error&lt;/failStatus>&#xd;
    &lt;/job>&#xd;
    &lt;job modified="1607125192693" name="GRV_logWsError_Outlier" type="Groovy" modifiedBy="peter">&#xd;
      &lt;jobscript>&lt;![CDATA[extract = API.initSource("FT_switchControlResult_Outlier");
extract.nextRow();

err = extract.getColumnString("combinedErrorMessage");
if(err.contains("1019"))
	err = err + ' - License error: Please check your license credentials and/or check if your license is expired';

if(err.contains("401"))
	err = err + ' - License error: Please check your license credentials and/or check if your license is expired';

LOG.warn(extract.getColumnString("combinedErrorMessage"));]]&gt;&lt;/jobscript>&#xd;
      &lt;failStatus>error&lt;/failStatus>&#xd;
    &lt;/job>&#xd;
    &lt;job modified="1599657357196" name="SW_executionLogicOutlier" type="Switch" modifiedBy="peter">&#xd;
      &lt;switchOn>&#xd;
        &lt;source nameref="FT_switchControlResult_Outlier" row="1">&#xd;
          &lt;input nameref="switchInput" />&#xd;
        &lt;/source>&#xd;
      &lt;/switchOn>&#xd;
      &lt;switchs>&#xd;
        &lt;switch>&#xd;
          &lt;condition operator="equal" type="accept" value="1" />&#xd;
          &lt;execution nameref="EXECUTE_outlierLoading" type="job" />&#xd;
        &lt;/switch>&#xd;
        &lt;switch>&#xd;
          &lt;condition operator="equal" type="accept" value="0" />&#xd;
          &lt;execution nameref="GRV_logWsError_Outlier" type="job" />&#xd;
        &lt;/switch>&#xd;
      &lt;/switchs>&#xd;
    &lt;/job>&#xd;
    &lt;job modified="1599657357196" name="SW_OutlierSwitch" type="Switch" modifiedBy="peter">&#xd;
      &lt;comment>&lt;![CDATA[Checks if the prediction returns success state, then triggers copying and loading data.]]&gt;&lt;/comment>&#xd;
      &lt;switchOn>&#xd;
        &lt;source nameref="CT_inputCheck" row="2">&#xd;
          &lt;input nameref="inputValues" />&#xd;
        &lt;/source>&#xd;
      &lt;/switchOn>&#xd;
      &lt;switchs>&#xd;
        &lt;switch>&#xd;
          &lt;condition operator="equal" type="accept" value="0" />&#xd;
          &lt;execution nameref="SW_executionLogic" type="job" />&#xd;
        &lt;/switch>&#xd;
        &lt;switch>&#xd;
          &lt;condition operator="equal" type="accept" value="1" />&#xd;
          &lt;execution nameref="SW_executionLogicOutlier" type="job" />&#xd;
        &lt;/switch>&#xd;
      &lt;/switchs>&#xd;
    &lt;/job>&#xd;
    &lt;job modified="1605661130997" name="GRV_summary" type="Groovy" modifiedBy="peter">&#xd;
      &lt;jobscript>&lt;![CDATA[txt ="Finished Time Series Prediction, input range from ${time_inputStartDate} to ${time_inputEndDate}, prediction range from ${time_elementStart} to ${time_elementEnd}, using predictiopn type ${aip_predictionType}";
LOG.info(txt);]]&gt;&lt;/jobscript>&#xd;
      &lt;failStatus>error&lt;/failStatus>&#xd;
    &lt;/job>&#xd;
  &lt;/jobs>&#xd;
&lt;/project>&#xd;
</e0></e1></e1></cube>